Notation/glossary:
# phi = (1+5**0.5)/2
# x = 2/(5**0.25)
# y = x*phi


TODO: S2 uvf vs Petersen colouring:
    probably it's a poor cycle + strong Petersen colouring for remaining edges
        strong petersen colouring - это когда vertex cutset
        то есть есть множество вершин S, а cutset соединяет S с V - S
        poor edges form a cutset
    so probably
    poor cycle + poor cutset
        poor edges from cutset connect vertices from different subsets
        we can color vertices in 2 colors


DONE?/FIXME: weird bug in code
    when replace conf1 with conf2 in gen_icosidodecahedron
    and attach cuboctahedrons
    we lose nz5 flow
    do we lose in precision?

    UPD: i think i fixed problem
    i think it was in "add_opposite_points", when comparing coordinates to 0


TODO: S2 uvf vectors vs poor/rich edges:
    - TODO: is there relation between rich edges (from Petersen colouring or from [o]6c4c)
        and vectors coming from icosidodecahedron?

    - TODO: also looks like new edges appear exactly twice in each triple
        so, if we always have a vertex with 3 poor edges, then probably we won't find uvf (currently)
        actually, poor edges should form a cycle
        TODO: also probably rich connected components are 15 edges or less
            e. g. for 22.05g11 we get 4-pole and a matching of 4 edges + 2 circuits of poor/cuboctahedron edges


TODO: S2 uvf, small number of Petersen colourings:
    TODO: 20.05g5 - 3 colourings
    
    pprrrrrrrrrrrrrprrrppprppppppp
    nn                 nnn  n n nn
    012345678901234567890123456789

    0ppr:      14(e0)  10(e1)  3(e2)
    1rrr:      9(e3)   5(e4)   6(e5)
    2rrr:      7(e6)   4(e7)   9(e8)
    3rrr:      0(e2)   5(e9)   7(e10)
    4rrr:      2(e7)   13(e11) 5(e12)
    5rrr:      1(e4)   3(e9)   4(e12)
    6rrr:      1(e5)   8(e13)  7(e14)
    7rrr:      2(e6)   3(e10)  6(e14)
    8rpr:      6(e13)  12(e15) 15(e16)
        v: 8; triple: 29 26 36
        old vector v: 29; -0.30901699437494701 0.5 0.80901699437494778
        old vector v: 26; -0.30901699437494701 -0.5 0.8090169943749479
        old vector v: 36; 0 1 0
    9rrr:      1(e3)   2(e8)   11(e17)
    10prp:     0(e1)   13(e18) 18(e19)
    11rpp:     9(e17)  15(e20) 16(e21)
    12prp:     8(e15)  17(e22) 13(e23)
    13rrp:     4(e11)  10(e18) 12(e23)
        v: 13; triple: 51 41 29
        old vector v: 51; 0.30901699437494701 0.5 -0.8090169943749479
        old vector v: 41; 0 -1 0
        old vector v: 29; -0.30901699437494701 0.5 0.80901699437494778
    14ppp:     0(e0)   17(e24) 19(e25)
    15rpp:     8(e16)  11(e20) 19(e26)
    16ppp:     11(e21) 18(e27) 17(e28)
    17rpp:     12(e22) 14(e24) 16(e28)
    18ppp:     10(e19) 16(e27) 19(e29)
    19ppp:     14(e25) 15(e26) 18(e29)

    (2 new) v: 0; triple: 76 11 28
    v: 1; triple: 53 0 54
    v: 2; triple: 37 70 6
    v: 3; triple: 28 57 8
    v: 4; triple: 70 51 52
    v: 5; triple: 0 57 52
    v: 6; triple: 54 29 68
    v: 7; triple: 37 8 68
    v: 8; triple: 29 26 36
    v: 9; triple: 53 6 27
    (2 new) v: 10; triple: 11 41 10
    (2 new) v: 11; triple: 27 67 1
    v: 12; triple: 26 41 29
    v: 13; triple: 51 41 29
    (2 new) v: 14; triple: 76 66 49
    (2 new) v: 15; triple: 36 67 66
    (2 new) v: 16; triple: 1 27 10
    (2 new) v: 17; triple: 41 66 10
    (2 new) v: 18; triple: 10 27 1
    (2 new) v: 19; triple: 49 66 1
    new vectors: 1, 10, 11, 66, 67, 76
        0-10-18-19-15-11-16-17-14-0 - length 9

                   o       o o o
    pprrrrrrrrrrrrrprrrppprppppppp
    nn                 nnn  n n nn
    012345678901234567890123456789
    22             _1 1_22222___21
    prrrrrrrrrrrrrrprrppprpprppppr: 2 (11 poor edges)
    pprrrrrrrrrrrrrprrrppprppppppp: 1 (probably this one; 13 poor edges)
    rprrrrrrrrrrrrrpprrprppppppprr: 0 (11 poor edges)
    looks like they are all similar to each other
    g5: 0: 0; 1: 1; 2: 2; 3: 7; 4: 8; 5: 6; 6: 10; 7: 4; 8: 12; 9: 14; 
    10: 9; 11: 5; 12: 3; 13: 13; 14: 11; 15: 5; 16: 0; 17: 1; 18: 0; 19: 2; 
    20: 2; 21: 0; 22: 0; 23: 13; 24: 1; 25: 2; 26: 1; 27: 1; 28: 2; 29: 0;
    
    vertices 1-6-8, vectors: 54-29
    vertices 1-5-4-13, vectors: 0-52-51
    0ppr:      14(e0):p0  10(e1):p1  3(e2):p2
    1rrr:      9(e3):p7   5(e4):p8   6(e5):p6
        v: 1; triple: 53 0 54
    2rrr:      7(e6):p10   4(e7):p4   9(e8):p12
    3rrr:      0(e2):p2   5(e9):p14   7(e10):p9
    4rrr:      2(e7):p4   13(e11):p5 5(e12):p3
        v: 4; triple: 70 51 52
    5rrr:      1(e4):p8   3(e9):p14   4(e12):p3
        v: 5; triple: 0 57 52
    6rrr:      1(e5):p6   8(e13):p13  7(e14):p11
        v: 6; triple: 54 29 68
    7rrr:      2(e6):p10   3(e10):p9  6(e14):p11
    8rpr:      6(e13):p13  12(e15):p5 15(e16):p0
        v: 8; triple: 29 26 36
        old vector v: 29; -0.30901699437494701 0.5 0.80901699437494778
        old vector v: 26; -0.30901699437494701 -0.5 0.8090169943749479
        old vector v: 36; 0 1 0
    9rrr:      1(e3)   2(e8)   11(e17)
    10prp:     0(e1)   13(e18) 18(e19)
    11rpp:     9(e17)  15(e20) 16(e21)
    12prp:     8(e15)  17(e22) 13(e23)
    13rrp:     4(e11):p5  10(e18):p0 12(e23):p13
        v: 13; triple: 51 41 29
        old vector v: 51; 0.30901699437494701 0.5 -0.8090169943749479
        old vector v: 41; 0 -1 0
        old vector v: 29; -0.30901699437494701 0.5 0.80901699437494778
    14ppp:     0(e0):0   17(e24) 19(e25)
    15rpp:     8(e16)  11(e20) 19(e26)
    16ppp:     11(e21) 18(e27) 17(e28)
    17rpp:     12(e22) 14(e24) 16(e28)
    18ppp:     10(e19) 16(e27) 19(e29)
    19ppp:     14(e25) 15(e26) 18(e29)

    old vector v: 0; -1 0 0
    vector v: 1; -0.96875986667354408 0 -0.24800064661741741
    old vector v: 6; -0.80901699437494712 0.30901699437494767 -0.5
    old vector v: 7; -0.80901699437494712 0.30901699437494767 0.5
    old vector v: 8; -0.80901699437494679 -0.30901699437494728 -0.5
    old vector v: 9; -0.80901699437494679 -0.30901699437494728 0.5
    vector v: 10; -0.65974287229859663 0.5 0.56101634775752984
    vector v: 11; -0.65974287229859652 -0.5 0.56101634775753007
    old vector v: 20; -0.5 -0.80901699437494756 0.30901699437494728
    old vector v: 23; -0.5 -0.80901699437494767 -0.30901699437494734
    old vector v: 24; -0.5 0.80901699437494778 0.30901699437494756
    old vector v: 25; -0.5 0.8090169943749479 -0.30901699437494778
    old vector v: 26; -0.30901699437494701 -0.5 0.8090169943749479
    old vector v: 27; -0.30901699437494701 -0.5 -0.80901699437494778
    old vector v: 28; -0.30901699437494701 0.5 -0.80901699437494778
    old vector v: 29; -0.30901699437494701 0.5 0.80901699437494778
    old vector v: 36; 0 1 0
    old vector v: 37; 0 0 1
    old vector v: 40; 0 0 -1
    old vector v: 41; 0 -1 0
    old vector v: 48; 0.30901699437494701 -0.5 -0.80901699437494778
    old vector v: 49; 0.30901699437494701 -0.5 0.80901699437494778
    old vector v: 50; 0.30901699437494701 0.5 0.80901699437494778
    old vector v: 51; 0.30901699437494701 0.5 -0.8090169943749479
    old vector v: 52; 0.5 -0.8090169943749479 0.30901699437494778
    old vector v: 53; 0.5 -0.80901699437494778 -0.30901699437494756
    old vector v: 54; 0.5 0.80901699437494767 0.30901699437494734
    old vector v: 57; 0.5 0.80901699437494756 -0.30901699437494728
    vector v: 66; 0.65974287229859652 0.5 -0.56101634775753007
    vector v: 67; 0.65974287229859663 -0.5 -0.56101634775752984
    old vector v: 68; 0.80901699437494679 0.30901699437494728 -0.5
    old vector v: 69; 0.80901699437494679 0.30901699437494728 0.5
    old vector v: 70; 0.80901699437494712 -0.30901699437494767 -0.5
    old vector v: 71; 0.80901699437494712 -0.30901699437494767 0.5
    vector v: 76; 0.96875986667354408 0 0.24800064661741741
    old vector v: 77; 1 0 0


TODO: S2 uvf, Blanusa snarks:
    from logs:
        18.05g1:
            - petersen colouring: 1 неизоморфное решение, где есть 2 пути по 4 poor ребра
            0:      12(e0)  14(e1)  3(e2)
            1:      9(e3)   16(e4)  6(e5)
            2:      17(e6)  4(e7)   9(e8)
            3:      0(e2)   5(e9)   7(e10)
            4:      2(e7)   13(e11) 5(e12)
            5:      3(e9)   4(e12)  16(e13)
            6:      1(e5)   15(e14) 7(e15)
            7:      3(e10)  6(e15)  17(e16)
            8:      12(e17) 15(e18) 11(e19)
            9:      1(e3)   2(e8)   11(e20)
            10:     14(e21) 13(e22) 11(e23)
            11:     8(e19)  9(e20)  10(e23)
            12:     0(e0)   8(e17)  13(e24)
            13:     4(e11)  10(e22) 12(e24)
            14:     0(e1)   10(e21) 15(e25)
            15:     6(e14)  8(e18)  14(e25)
            16:     1(e4)   5(e13)  17(e26)
            17:     2(e6)   7(e16)  16(e26)
            9-1-16-5-3-7-17-2-9
                _ _      _  _
            rrrrppprprprpprrprrrrrrrrrr: 0
            rrrpprpprprrrprpprrrrrrrrrr: 1
            012345678901234567890123456

            0: 0; 1: 1; 2: 2; 3: 9; 4: 10; 5: 11; 6: 14; 7: 9; 8: 2; 9: 9; 10: 14; 11: 11; 12: 10; 13: 11; 14: 10; 15: 9; 16: 2; 17: 5; 18: 4; 19: 3; 20: 14; 21: 7; 22: 6; 23: 8; 24: 13; 25: 12; 26: 9;
            0: 0; 1: 1; 2: 2; 3: 2; 4: 14; 5: 9; 6: 11; 7: 10; 8: 9; 9: 14; 10: 9; 11: 11; 12: 9; 13: 2; 14: 10; 15: 11; 16: 10; 17: 5; 18: 4; 19: 3; 20: 14; 21: 7; 22: 6; 23: 8; 24: 13; 25: 12; 26: 9;

        18.05g2:
            - petersen colouring: 1 неизоморфное решение, где есть 2 пути по 4 poor ребра
            0:      12(e0)  14(e1)  3(e2)
            1:      9(e3)   5(e4)   6(e5)
            2:      7(e6)   4(e7)   9(e8)
            3:      0(e2)   5(e9)   7(e10)
            4:      2(e7)   13(e11) 5(e12)
            5:      1(e4)   3(e9)   4(e12)
            6:      1(e5)   8(e13)  7(e14)
            7:      2(e6)   3(e10)  6(e14)
            8:      6(e13)  15(e15) 11(e16)
            9:      1(e3)   2(e8)   11(e17)
            10:     14(e18) 13(e19) 16(e20)
            11:     8(e16)  9(e17)  16(e21)
            12:     0(e0)   17(e22) 13(e23)
            13:     4(e11)  10(e19) 12(e23)
            14:     0(e1)   10(e18) 15(e24)
            15:     8(e15)  14(e24) 17(e25)
            16:     10(e20) 11(e21) 17(e26)
            17:     12(e22) 15(e25) 16(e26)
            110121211110121202211221111
            prrrrrrrrrrrrrrprrpprpprprp: 0
            rprrrrrrrrrrrrrprrprpppprpr: 1
            rrrrppprprprpprrrprrrrrrrrr: 2
            rrrpprpprprrrpprrprrrrrrrrr: 3
            012345678901234567890123456
            always rich:
                 e2: 0-3
                e11: 4-13
                e16: 8-11
                0:      12(e0)  14(e1)  3(e2)
                3:      0(e2)   5(e9)   7(e10)
                4:      2(e7)   13(e11) 5(e12)
                13:     4(e11)  10(e19) 12(e23)
                8:      6(e13)  15(e15) 11(e16)
                11:     8(e16)  9(e17)  16(e21)

            012345678901234567890123456
            prrrrrrrrrrrrrrprrpprpprprp: 0
            poor edges
                2 poor paths: 0-12-17-16-11 + 8-15-14-10-13

            0: 0; 1: 1; 2: 2; 3: 5; 4: 3; 5: 4; 6: 11; 7: 6; 8: 13; 9: 14; 
            10: 9; 11: 7; 12: 8; 13: 12; 14: 10; 15: 7; 16: 1; 17: 0; 18: 7; 19: 12; 
            20: 1; 21: 2; 22: 2; 23: 1; 24: 12; 25: 1; 26: 0;
            poor paths, colours: 0-2-0-2 + 7-12-7-12

            Petersen graph:
            0:      6(e0)   4(e1)   8(e2)
            1:      9(e3)   5(e4)   6(e5)
            2:      7(e6)   4(e7)   9(e8)
            3:      8(e9)   5(e10)  7(e11)
            4:      0(e1)   2(e7)   5(e12)
            5:      1(e4)   3(e10)  4(e12)
            6:      0(e0)   1(e5)   7(e13)
            7:      2(e6)   3(e11)  6(e13)
            8:      0(e2)   3(e9)   9(e14)
            9:      1(e3)   2(e8)   8(e14)
    So, here poor edges can only form paths


TODO: (current) S2 unit vector flows, suspicious coincidence:
    o6c4c, with 2x6cdcs:
        10.05: g1
        18.05: -
        20.05: g1, g4-g6
        22.05: g3, g4, g7, g9-g18, g20
        24.05: g2, g4, g5, g7-g14, g16-g20, g22, g24-g26, g28-g36, g38

    we can't find S2 unit vector flow currently for these snarks (but not only for them)

    DONE: check 26.05g13 - it shouldn't have a flow, probably
        but if it has - then it's unexpected (it doesn't have o6c4c with has_2cdcs)
        Probably there's no uvf, because the search for it is too long already
        Checked, it doesn't

    DONE: here's another list:
        10.05: g1
        18.05: -
        20.05: g1, g4, g5
        22.05: g3, g4, g7, g9-g18, g20
        24.05: g2, g5, g8-g10, g13, g14, g16, g18-g20, g22, g24-g26, g28-g36, g38
        TODO: o6c4c_and_petersen_colouring - графы, где у o6c4c и petersen colouring совпадает набор poor рёбер (aka profile)

    So, currently we have this:
        unit vectors count: 78
        unit vectors triples count: 68
        10.05: g1
        18.05: -
        20.05: g1, g4, g5
        22.05: g4, g11-g18
        24.05: g2, g5, g8-g10, g13, g14, g18-g19, g24, g26, g28, g29, g31-g36, g38
            (g37 didn't finish checking, waited for 1 or 2 hours;
            so probably no uvf for it, currently)

    TODO: so, we have {s2 uvf} \in {o6c4c_and_petersen_colouring} \in {o6c4c, with 2x6cdcs}


DONE: S2 uvf, 20.05g1:
    v: 0; 10 4 14 ; triple: 0 53 54
    v: 1; 9 18 6 ; triple: 48 36 26
    v: 2; 15 4 11 ; triple: 70 6 37
    v: 3; 8 19 7 ; triple: 24 27 71
    v: 4; 0 2 5 ; triple: 53 6 27
    v: 5; 4 12 16 ; triple: 27 1 67
    v: 6; 1 10 7 ; triple: 26 52 7
    v: 7; 3 6 15 ; triple: 71 7 37
    v: 8; 3 14 9 ; triple: 24 0 54
    v: 9; 1 8 11 ; triple: 48 54 68
    v: 10; 0 6 13 ; triple: 0 52 20
    v: 11; 2 9 13 ; triple: 37 68 69
    v: 12; 5 18 13 ; triple: 1 11 28
    v: 13; 10 11 12 ; triple: 20 69 28
    v: 14; 0 8 17 ; triple: 54 0 24
    v: 15; 2 7 17 ; triple: 70 37 71
    v: 16; 5 19 17 ; triple: 67 76 27
    v: 17; 14 15 16 ; triple: 24 71 27
    v: 18; 1 12 19 ; triple: 36 11 10
    v: 19; 3 16 18 ; triple: 27 76 10

    from logs:
        у этого графа особенно выделяется один цикл длины 5 (собственно он в нём один такой)
            '12 18 19 16 5'
        - stronger petersen colouring: есть решения, где 9 poor рёбер - 2 пути по 2 ребра + этот цикл
            если не учитывать симметрии, то
            2 решения с 5 poor рёбрами
            10 - с 7
            5 - с 9 (во всех есть этот цикл)

    v: 5;  4 >12 >16 ; triple: 27 1 67
    v: 12; >5 >18 13 ; triple: 1 11 28
    v: 18; 1 >12 >19 ; triple: 36 11 10
    v: 19; 3 >16 >18 ; triple: 27 76 10
    v: 16; >5 >19 17 ; triple: 67 76 27

    cuboctahedron vectors:
        vector v: 1; -a 0 -b
        vector v: 76; a 0 b
        vector v: 10; -c 0.5 d
        vector v: 67; c -0.5 -d
            vector v: 66; c 0.5 -d
        vector v: 11; -c -0.5 d

    0:      10(e0)  4(e1)   14(e2)
    1:      9(e3)   18(e4)  6(e5)
    2:      15(e6)  4(e7)   11(e8)
    3:      8(e9)   19(e10) 7(e11)
    4:      0(e1)   2(e7)   5(e12)
    5:      4(e12)  12(e13) 16(e14)
    6:      1(e5)   10(e15) 7(e16)
    7:      3(e11)  6(e16)  15(e17)
    8:      3(e9)   14(e18) 9(e19)
    9:      1(e3)   8(e19)  11(e20)
    10:     0(e0)   6(e15)  13(e21)
    11:     2(e8)   9(e20)  13(e22)
    12:     5(e13)  18(e23) 13(e24)
    13:     10(e21) 11(e22) 12(e24)
    14:     0(e2)   8(e18)  17(e25)
    15:     2(e6)   7(e17)  17(e26)
    16:     5(e14)  19(e27) 17(e28)
    17:     14(e25) 15(e26) 16(e28)
    18:     1(e4)   12(e23) 19(e29)
    19:     3(e10)  16(e27) 18(e29)
    petersen colouring
                     vv        v   v v
        rrrrrrrrrrrrrpppprrpprrprrrprp: 15
        rrrrrrrrrrrrrpprpppprrrprrrprp: 13
        rrprrrprrrrrrpprrpprrrrprrrprp: 10
        prrrrrrrprrrrppprrrrprrprrrprp: 6
        prprrrprprrrrpprrrrrrrrprrrprp: 3
        012345678901234567890123456789
        0         1         2
        also poor (twice):
            e0, e2, e6, e8, e16, e17, e18, e19, e20
            0-10
            ...

        but it's interesting, that we don't have a petersen colouring with exactly this 5 edges
        it's always more; exactly 4 more poor edges
        TODO: so there's a bit more going on here
                       __  __
        rrrrrrrrrrrrrpppprrpprrprrrprp
        012345678901234567890123456789
        e15: 6-10
        e16: 6-7
        e19: 8-9
        e20: 9-11
        7-6-10 + 8-9-11


TODO: 22.05g11, petersen colouring:
       _ _       __    ____ __ _ _ __
    rrrprprrrrrrrpprrrrpppprpprpppppp: 9
    012345678901234567890123456789012
    0         1         2         3
    e28 - poor
        16-21
        vector v: 6; -0.80901699437494712 0.30901699437494767 -0.5
    e30 - poor
        20-18
        vector v: 53; 0.5 -0.80901699437494778 -0.30901699437494756
    both edges are in the matching
    probably because they are chords inside same poor circuit


TODO: S2, compounds of icosidodecahedrons and cuboctahedrons
    study these 36/42 vectors
    TODO: and try to reiterate from them
    TODO: and also check them for nz6 counterexample


    Tietze’s graph, 36 vectors
        phi = (1 + 5**0.5)/2
        a = 0.96875986667354408
            a = 1/6 * (-1 + 2**0.5 + 5**0.5 + 10**0.5)
            a = 1/3 * (phi-1 + phi * 2**0.5)
        b = 0.24800064661741741
            b = 1/6 * (1 + 2**0.5 + 5**0.5 - 10**0.5)
            b = 1/3 * (phi - (phi-1) * 2**0.5)
        c = 0.65974287229859663
            c = 1/12 * (1 + 2*2**0.5 - 5**0.5 + 2*10**0.5)
            c = 1/3 * (-(phi-1)/2 + phi * 2**0.5)
        d = 0.56101634775752984
            d = 1/12 * (1 - 2*2**0.5 + 5**0.5 + 2*10**0.5)
            d = 1/3 * (phi/2 + (phi-1) * 2**0.5)

        vector v: 0; -1 0 0
        vector v: 1; -a 0 -b
        vector v: 13; -phi/2 (phi-1)/2 -0.5
        vector v: 14; -phi/2 (phi-1)/2 0.5
        vector v: 15; -phi/2 -(phi-1)/2 -0.5
        vector v: 16; -phi/2 -(phi-1)/2 0.5
        vector v: 17; -c 0.5 d
        vector v: 18; -c -0.5 d
        vector v: 30; -0.5 -phi/2 (phi-1)/2
        vector v: 33; -0.5 -phi/2 -(phi-1)/2
        vector v: 34; -0.5 phi/2 (phi-1)/2
        vector v: 35; -0.5 phi/2 -(phi-1)/2
        vector v: 40; -(phi-1)/2 -0.5 phi/2
        vector v: 41; -(phi-1)/2 -0.5 -phi/2
        vector v: 42; -(phi-1)/2 0.5 -phi/2
        vector v: 43; -(phi-1)/2 0.5 phi/2
        vector v: 57; 0 1 0
        vector v: 58; 0 0 1
        vector v: 61; 0 0 -1
        vector v: 62; 0 -1 0
        vector v: 76; (phi-1)/2 -0.5 -phi/2
        vector v: 77; (phi-1)/2 -0.5 phi/2
        vector v: 78; (phi-1)/2 0.5 phi/2
        vector v: 79; (phi-1)/2 0.5 -phi/2
        vector v: 84; 0.5 -phi/2 (phi-1)/2
        vector v: 85; 0.5 -phi/2 -(phi-1)/2
        vector v: 86; 0.5 phi/2 (phi-1)/2
        vector v: 89; 0.5 phi/2 -(phi-1)/2
        vector v: 101; c 0.5 -d
        vector v: 102; c -0.5 -d
        vector v: 103; phi/2 (phi-1)/2 -0.5
        vector v: 104; phi/2 (phi-1)/2 0.5
        vector v: 105; phi/2 -(phi-1)/2 -0.5
        vector v: 106; phi/2 -(phi-1)/2 0.5
        vector v: 118; a 0 b
        vector v: 119; 1 0 0

        vector v: 1; -a 0 -b
        vector v: 118; a 0 b
        vector v: 17; -c 0.5 d
        vector v: 102; c -0.5 -d
        vector v: 18; -c -0.5 d
        vector v: 101; c 0.5 -d
    
        v: 9; triple: 77 18 118
        v: 10; triple: 57 18 17
        v: 11; triple: 41 17 118

    22.05g11, 42 vectors:
        - filtered some vectors
            unit vectors count: 78
            unit vectors triples count: 68
        found alternative configuration, with a,b,c,d + e,f,g
        a = 0.96875986667354408
            a = 1/3 * (phi-1 + phi * 2**0.5)
        b = 0.24800064661741741
            b = 1/3 * (phi - (phi-1) * 2**0.5)
        c = 0.65974287229859663
            c = 1/3 * (-(phi-1)/2 + phi * 2**0.5)
        d = 0.56101634775752984
            d = 1/3 * (phi/2 + (phi-1) * 2**0.5)
        e = 0.84408251704099657
            e = 1/6 * (2 * 2**0.5 + 5**0.5)
            e = 1/3 * (phi - 1/2 + 2**0.5)
        f = 0.53506552266604934
            f = 1/12 * (3 + 4 * 2**0.5 - 5**0.5)
            f = 1/3 * (1 - phi/2 + 2**0.5)
        g = 0.0350655226660485
            g = 1/3 * ?
            g = (9 - (phi - 1/2 + 2**0.5)**2 - (1 - phi/2 + 2**0.5)**2)**0.5 / 3
            9*g**2 = 9 - (phi+1) - 1/4 - 2 - 1 - (phi+1)/4 - 2 +\
                (phi + 2**0.5 - 2*phi*2**0.5 + phi + phi*2**0.5 - 2*2**0.5)
            9*g**2 = 5/2 + phi*3/4 - phi*2**0.5 - 2**0.5

        old vectors (they just changed index, because i removed other vectors):
        vector v: 1; -a 0 -b
            vector v: 76; a 0 b
        vector v: 10; -c 0.5 d
        vector v: 67; c -0.5 -d
        vector v: 66; c 0.5 -d
            vector v: 11; -c -0.5 d

        new vectors:
        vector v: 3; -e -f g
        vector v: 74; e f -g
        vector v: 62; f g -e
        vector v: 15; -f -g e
        vector v: 32; -g -e f
        vector v: 45; g e -f

        v: 10; 17 >15 >11 ; triple: 50 67 1
        v: 11; >1 9 >10 ; triple: 66 49 1
        v: 14; >1 13 >15 ; triple: 10 27 1
        v: 1; >11 5 >14 ; triple: 66 41 10
        v: 15; >10 >14 19 ; triple: 67 1 27
        
        v: 6; >16 >13 7 ; triple: 45 3 71
        v: 13; >6 14 >20 ; triple: 3 27 15
        v: 16; >6 >19 21 ; triple: 45 74 6
        v: 17; 10 >12 >21 ; triple: 50 62 74
        v: 19; 15 >16 >18 ; triple: 27 74 15
        v: 21; 16 >17 >20 ; triple: 6 74 32
        v: 12; 0 >17 >18 ; triple: 53 62 32
        v: 18; >12 20 >19 ; triple: 32 53 15
        v: 20; >13 18 >21 ; triple: 15 53 32
        6 - 16 - 19 - 18 - 12 - 17 - 21 - 20 - 13 - 6


        UNFINISHED: if using all vectors:
            v1 = 0.907743518916014
                v1 = 1/12 * (3 + 5**0.5 + 4 * 2**0.5)
            v2 = 0.098726524541066
            v3 = 0.407743518916014
            v4 = 0.865754201881895
            v5, v6, v7 = ...

            vector v: 2; -v1 -v2 v3
            vector v: 117; v1 v2 -v3
            vector v: 37; -v3 -v1 v2
            vector v: 82; v3 v1 -v2
            vector v: 46; -v2 -v3 v1
            vector v: 73; v2 v3 -v1
            vector v: 6; -v4 -0.5 0.021671684840898341
            vector v: 113; v4 0.5 -0.021671684840898341
            vector v: 7; -v4 0.5 0.021671684840898091
            vector v: 112; v4 -0.5 -0.021671684840898091
            vector v: 21; -0.55673720750694744 0 0.83068867921584566
            vector v: 98; 0.55673720750694744 0 -0.83068867921584566


DONE: S2, compounds of icosidodecahedrons and cuboctahedrons
    yes
    finally started to see other snarks!
    20.05: g1, g4, g5
        all of them show same log:
            vector count: 36
            graph used triple count: 12
        TODO: i would assume this is not a coincidence
            and probably related to how these snarks are constructed
            e. g. from multipoles or parts of Petersen graph
            or maybe even to Petersen colouring
        TODO: same thing applies to their specific nz5 flows?
        TODO: maybe also o5cdc and o6c4c?
    22.05: g4, g11-g18
        g11, g13 have different log:
            vector count: 42
            graph used triple count: 14
        g12:
            vector count: 36
            graph used triple count: 13
    for reference: Petersen graph
        vector count: 30
        graph used triple count: 10


TODO: S2, compound of icosidodecahedron and cuboctahedron
    found a solution for Tietze’s graph
    TODO: describe it here


TODO: Hopf map S3->S2
    TODO: what happens if we map 600-cell to S2?
    do we get 54 points?


DONE: Hopf map S3->S2
    check that we lose unit vector flows

    https://math.stackexchange.com/questions/3587480/hopf-map-s3-to-s2-stereographic-projection
    𝜁1=2(𝑥1𝑥3+𝑥2𝑥4)
    𝜁2=2(𝑥2𝑥3−𝑥1𝑥4)
    𝜁3=(𝑥1)^2+(𝑥2)^2−(𝑥3)^2−(𝑥4)^2

    triple:
       phi   phi-1  0  1
      -phi -(phi-1) 0  1
        0     0     0  2
    
    Looks like (some) triples are preserved
    def s3_to_s2(p):
        return [2*(p[0]*p[2]+p[1]*p[3]), 2*(p[1]*p[2]-p[0]*p[3]), p[0]**2+p[1]**2-p[2]**2-p[3]**2]

    we get
        [0.30901699437494745, -0.8090169943749475, 0.5]
        [-0.30901699437494745, 0.8090169943749475, 0.5]
        [0.0, 0.0, -1.0]

    okay, got it
    the problem is that we map pair of opposite points in S3 to same point in S2

      phi  phi-1     0 -1
       -1 -phi+1  -phi  0
    phi-1      0  -phi -1

    here we get:
        [-0.30901699437494745, 0.8090169943749475, 0.5]
        [0.8090169943749475, 0.5000000000000001, -0.30901699437494745]
        [-0.5000000000000001, 0.30901699437494745, -0.8090169943749475]
    
    So, not even all triples are preserved



TODO: S3 unit vector flows, Tietze’s graph:
    is there a solution with 10 triples?


TODO: S3 unit vector flows, oriented Desargues configuration:
    coordinates - do we have some specific shape?

        0     0     0  2
        0  -phi phi-1  1
        0  -phi phi-1 -1
      phi    -1 phi-1  0
      phi phi-1     0  1
      phi phi-1     0 -1
    phi-1  -phi    -1  0
    phi-1     0  -phi  1
    phi-1     0  -phi -1
        1 phi-1   phi  0

    https://en.wikipedia.org/wiki/600-cell
    https://fgmarcelis.wordpress.com/pg32/pg32-%C2%A7-5-generalized-quadrangle/


TODO: S3 unit vector flows
    what is the smallest amount of triples we need?
    upto 18.05: at least 7


DONE: S3 unit vector flows, oriented Desargues configuration:
    from backlog:
        проверил S3
        конкретно - вершины 600-cell
        прокатило! до 28.05 включительно работает
        а вроде и меньшее число вершин прокатывает
        более того - есть 20 векторов (включая противоположные - то есть 10 пар)
        которых хватает на все графы (проверил до 28.05 включительно)
        что это за набор?
        это какой-то гиперграф (3-uniform), где у каждой вершины степень 3, и у каждого ребра степень 3
        скорее всего это будет типа bipartite double cover of desargues configuration,
            что бы это ни значило
            так и есть!

        ops: 0 1
        ops: 2 3
        ops: 4 7
        ops: 5 6
        ops: 8 9
        ops: 10 11
        ops: 12 15
        ops: 13 14
        ops: 16 19
        ops: 17 18
        вот равномерно пошафленные тройки (хочу нарисовать их на плоскости)
        triples:  0  7  5     -4  3  1
        triples:  1  4  6
        triples: 13  0 15      2 -4  2
        triples: 14  1 12
        triples: 17 19  0      3  1 -4
        triples: 18 16  1
        triples:  2  6 17
        triples:  3  5 18
        triples:  7  2 16
        triples:  4  3 19
        triples:  9 11  2
        triples:  8 10  3
        triples: 15  9  4
        triples: 12  8  7
        triples:  5 14  9
        triples:  6 13  8
        triples: 10 17 14
        triples: 11 18 13
        triples: 16 15 10
        triples: 19 12 11

        0: -4
        1: 4
        2: -2
        3: 2
        4: -3
        5: 1
        6: -1
        7: 3
        8: -1
        9: 1
        10: -1
        11: 1
        12: -2
        13: 2
        14: -2
        15: 2
        16: -1
        17: 3
        18: -3
        19: 1

        это 20 вершин вида:
         . 12 13 14 15
        21  . 23 24 25
        31 32  . 34 35
        41 42 43  . 45
        51 52 53  . 54
        а каждая тройка - это циклического вида набор ab bc ca
        а значение в вершине ab - это разность b-a
        so this is exactly specifying o5cdc solution


TODO: find universal o5cdc snark for S2 flow
    - idea is that we want to find "oriented Desargues" configuration (?)
    we have 5 oriented cycles, with weights 0,1,2,3,4
    for each edge we have wi-wj, so 10 pairs of possibilities
    (10 pairs of opposite points on sphere)
    but we also need to fulfill
    all 10 possibilities of 3 cycles meeting together in a vertex
    which is not true for Petersen 96555 solution
    we don't have 655 vertices
    Tietze’s graph also doesn't immediately help here
        if we expand the vertex
        then we can get all 655 vertices, but we will lose 555 vertex
        TODO: but maybe it has an alternative o5cdc solution
    - checked S3 unit vector flow for Blanusa snarks, they have solutions,
        which use all 10 triples

TODO: nz4-flow, K4, S2 cuboctahedron:
    1+1=2, 2=1+1, 1+2=3, 3=1+2
    we have 4 vertices, with all 4 options, will all possible transitions
    so, I think, nz4-flow is same as S2 cuboctahedron flow
    and the coordinates are just
        (±1,±1,0)
        (±1,0,±1)
        (0,±1,±1)
    so there should be a simple correspondence


TODO: Tietze's graph
    do we need to use cuboctahedron for it?


DONE: finish proof for new triples
    All of them follow from following equality:
        y**2+x**2=4*phi
        x**2*(phi+2)=4*phi
        x**2 = 4 / 5**0.5 (this is known)
        x**2=4*phi/(phi+2)
        so we need to prove that
        phi/(phi+2) = 1/5**0.5
        phi*5**0.5 = phi+2
        phi*5**0.5 = (1+5**0.5)/2 * 5**0.5 = (5**0.5+5)/2 =
        (5**0.5+1)/2 + 2 = phi+2
        qed

    [2.1640890861976425, 1.3374806099528438, 2]
    y, x, 2
    y**2+x**2+4=4*phi+4 [= 4 * phi**2 = (2*phi)**2]
    y**2+x**2=4*phi
    qed

    [1.1640890861976427, 2.9555145987027394, 0.618033988749895]
    y-1, x+phi, phi-1
    (y-1)**2+(x+phi)**2+(phi-1)**2=4*phi+4
    y**2-2*y+2+x**2+2*x*phi+2*phi**2-2*phi=
    y**2-2*y+2+x**2+2*y+2*phi+2-2*phi=4*phi+4
    y**2+x**2=4*phi
    qed

    [3.1640890861976425, 0.28055337879705067, 0.6180339887498948]
    y+1, phi-x, phi-1
    (y+1)**2 + (phi-x)**2 + (phi-1)**2 = 4*phi+4
    y**2+2y+1+phi**2-2*phi*x+x**2 + phi**2 - 2*phi + 1 = 4*phi+4
    use 2y=2*phi*x, and phi**2=phi+1
    y**2+x**2=4*phi
    qed

    [2.7821230749475383, 0.337480609952844, 1.6180339887498953]
    y+1/phi, x-1, phi
    (y+1/phi)**2 + (x-1)**2 + phi**2 = 4*phi+4
    y**2+x**2 + 2*y/phi + 1/phi**2 - 2*x + 1 + phi + 1 = 4*phi+4
    use y**2+x**2=4*phi, y=x*phi, 2*y/phi = 2*x
    1/phi**2 + phi + 2 = 4
    1/phi**2 + phi = 2
    1/phi + phi + 1 = 2 * phi
    1/phi + 1 = phi
    1 + phi = phi**2
    qed

    [1.546055097447748, 2.337480609952844, 1.6180339887498953]
    y-1/phi, x+1, phi
    (y-1/phi)**2 + (x+1)**2 + phi**2 = 4*phi+4
    it's actually the same equality as above, we just switch signs between -2*x and 2*y/phi
    qed

    

WONTDO: use same vectors for unit vector flows for 18.05 snarks
    probably this won't work
    new vectors assume a graph with girth 4


DONE: what is the structure of the counterexample?
    - old triples form a Petersen graph G(5, 2)
    - they have common edges with new triples
    - these edges are a PM in Petersen graph
    - new triples also form a cubic graph, G(5, 1)
    - common edges are still a PM in the new graph


DONE: S2 nz5 counterexample, triples as flows
    a,b,c; a+b=c
    old triples (Petersen graph / icosidodecahedron / nz5 flow)
        (28, 29, 4) ['phi+1', '1', 'phi'], ['-(phi+1)', '-1', 'phi'], ['0', '0', '2*phi']
        (3, 4, 5) ['phi+1', '-1', '-phi'], ['0', '0', '2*phi'], ['phi+1', '-1', 'phi']
        (26, 25, 3) ['phi', '-(phi+1)', '1'], ['1', 'phi', '-(phi+1)'], ['phi+1', '-1', '-phi']
        (6, 30, 29) ['-phi', '-(phi+1)', '-1'], ['-1', 'phi', 'phi+1'], ['-(phi+1)', '-1', 'phi']
        (2, 26, 14) ['phi', 'phi+1', '-1'], ['phi', '-(phi+1)', '1'], ['2*phi', '0', '0']
        (2, 27, 28) ['phi', 'phi+1', '-1'], ['1', '-phi', 'phi+1'], ['phi+1', '1', 'phi']
        (27, 36, 16) ['1', '-phi', 'phi+1'], ['0', '2*phi', '0'], ['1', 'phi', 'phi+1']
        (13, 16, 5) ['phi', '-(phi+1)', '-1'], ['1', 'phi', 'phi+1'], ['phi+1', '-1', 'phi']
        (14, 6, 13) ['2*phi', '0', '0'], ['-phi', '-(phi+1)', '-1'], ['phi', '-(phi+1)', '-1']
        (30, 25, 36) ['-1', 'phi', 'phi+1'], ['1', 'phi', '-(phi+1)'], ['0', '2*phi', '0']
        points/edges: 2,3,4,5,6,13,14,16,25,26,27,28,29,30,36
            each appears 2 times

    new triples
        (42, 25, 8) ['y', '-x', '2'],  ['1', 'phi', '-(phi+1)'], ['y+1', 'phi-x', '-(phi-1)']
        (0, 4, 18) ['y+phi-1', '-(x-1)', '-phi'], ['0', '0', '2*phi'], ['y+phi-1', '-(x-1)', 'phi']
        (25, 34, 22) ['1', 'phi', '-(phi+1)'], ['-y', 'x', '2'], ['-(y-1)', 'x+phi', '-(phi-1)']
        (1, 2, 0) ['y-1', '-(x+phi)', '-(phi-1)'], ['phi', 'phi+1', '-1'], ['y+phi-1', '-(x-1)', '-phi']    
        (2, 9, 33) ['phi', 'phi+1', '-1'], ['y-phi+1', '-(x+1)', 'phi'], ['y+1', 'phi-x', 'phi-1']
        (7, 4, 9) ['y-phi+1', '-(x+1)', '-phi'], ['0', '0', '2*phi'], ['y-phi+1', '-(x+1)', 'phi']
        (16, 1, 42) ['1', 'phi', 'phi+1'], ['y-1', '-(x+phi)', '-(phi-1)'], ['y', '-x', '2']
        (8, 6, 7) ['y+1', 'phi-x', '-(phi-1)'], ['-phi', '-(phi+1)', '-1'], ['y-phi+1', '-(x+1)', '-phi']
        (33, 34, 16) ['y+1', 'phi-x', 'phi-1'], ['-y', 'x', '2'], ['1', 'phi', 'phi+1']
        (18, 22, 6) ['y+phi-1', '-(x-1)', 'phi'], ['-(y-1)', 'x+phi', '-(phi-1)'], ['-phi', '-(phi+1)', '-1']
        new points: 0,1,7,8,9,18,22,33,34,42
        old points: 2,4,6,16,25
        each triple has 2 new points and 1 old point
        each point appears 2 times
        2,4,6,16,25 is a PM in Petersen graph


DONE: S2 nz5 counterexample, triples sum up to 0
    old triples
        (49, 40, 19)     ['phi+1', '1', 'phi'], ['-(phi+1)', '-1', 'phi'], ['0', '0', '-2*phi']
        (28, 29, 4) ['-(phi+1)', '-1', '-phi'],    ['phi+1', '1', '-phi'],  ['0', '0', '2*phi']

        (48, 37, 24) [['phi', '-(phi+1)', '1'], ['1', 'phi', '-(phi+1)'], ['-(phi+1)', '1', 'phi']]
        (3, 25, 26) [['phi+1', '-1', '-phi'], ['-1', '-phi', 'phi+1'], ['-phi', 'phi+1', '-1']]

        (6, 39, 40) [['phi', 'phi+1', '1'], ['1', '-phi', '-(phi+1)'], ['-(phi+1)', '-1', 'phi']]
        (29, 30, 31) [['phi+1', '1', '-phi'], ['-1', 'phi', 'phi+1'], ['-phi', '-(phi+1)', '-1']]

        (35, 38, 47) [['1', 'phi', 'phi+1'], ['0', '-2*phi', '0'], ['-1', 'phi', '-(phi+1)']]
        (27, 36, 16) [['1', '-phi', 'phi+1'], ['0', '2*phi', '0'], ['-1', '-phi', '-(phi+1)']]

        (32, 26, 2) [['2*phi', '0', '0'], ['-phi', 'phi+1', '-1'], ['-phi', '-(phi+1)', '1']]
        (10, 48, 14) [['phi', 'phi+1', '-1'], ['phi', '-(phi+1)', '1'], ['-2*phi', '0', '0']]

        (10, 27, 28) [['phi', 'phi+1', '-1'], ['1', '-phi', 'phi+1'], ['-(phi+1)', '-1', '-phi']]
        (49, 47, 2) [['phi+1', '1', 'phi'], ['-1', 'phi', '-(phi+1)'], ['-phi', '-(phi+1)', '1']]

        (15, 16, 17) [['phi+1', '-1', 'phi'], ['-1', '-phi', '-(phi+1)'], ['-phi', 'phi+1', '1']]
        (13, 35, 5) [['phi', '-(phi+1)', '-1'], ['1', 'phi', 'phi+1'], ['-(phi+1)', '1', '-phi']]

        (6, 13, 14) [['phi', 'phi+1', '1'], ['phi', '-(phi+1)', '-1'], ['-2*phi', '0', '0']]
        (32, 17, 31) [['2*phi', '0', '0'], ['-phi', 'phi+1', '1'], ['-phi', '-(phi+1)', '-1']]

        (37, 38, 30) [['1', 'phi', '-(phi+1)'], ['0', '-2*phi', '0'], ['-1', 'phi', 'phi+1']]
        (39, 36, 25) [['1', '-phi', '-(phi+1)'], ['0', '2*phi', '0'], ['-1', '-phi', 'phi+1']]

        (15, 19, 24) [['phi+1', '-1', 'phi'], ['0', '0', '-2*phi'], ['-(phi+1)', '1', 'phi']]
        (3, 4, 5) [['phi+1', '-1', '-phi'], ['0', '0', '2*phi'], ['-(phi+1)', '1', '-phi']]

    new triples
        (41, 25, 42) [['y+1', 'phi-x', '-(phi-1)'], ['-1', '-phi', 'phi+1'], ['-y', 'x', '-2']]
        (45, 37, 8) [['y', '-x', '2'], ['1', 'phi', '-(phi+1)'], ['-(y+1)', '-(phi-x)', 'phi-1']]

        (18, 19, 12) [['y+phi-1', '-(x-1)', 'phi'], ['0', '0', '-2*phi'], ['-(y+phi-1)', 'x-1', 'phi']]
        (0, 4, 23) [['y+phi-1', '-(x-1)', '-phi'], ['0', '0', '2*phi'], ['-(y+phi-1)', 'x-1', '-phi']]

        (22, 37, 34) [['y-1', '-(x+phi)', 'phi-1'], ['1', 'phi', '-(phi+1)'], ['-y', 'x', '2']]
        (46, 25, 44) [['y', '-x', '-2'], ['-1', '-phi', 'phi+1'], ['-(y-1)', 'x+phi', '-(phi-1)']]

        (10, 11, 12) [['phi', 'phi+1', '-1'], ['y-1', '-(x+phi)', '-(phi-1)'], ['-(y+phi-1)', 'x-1', 'phi']]
        (0, 1, 2) [['y+phi-1', '-(x-1)', '-phi'], ['-(y-1)', 'x+phi', 'phi-1'], ['-phi', '-(phi+1)', '1']]

        (33, 9, 2) [['y+1', 'phi-x', 'phi-1'], ['-(y-phi+1)', 'x+1', '-phi'], ['-phi', '-(phi+1)', '1']]
        (10, 20, 43) [['phi', 'phi+1', '-1'], ['y-phi+1', '-(x+1)', 'phi'], ['-(y+1)', '-(phi-x)', '-(phi-1)']]

        (20, 19, 21) [['y-phi+1', '-(x+1)', 'phi'], ['0', '0', '-2*phi'], ['-(y-phi+1)', 'x+1', 'phi']]
        (7, 4, 9) [['y-phi+1', '-(x+1)', '-phi'], ['0', '0', '2*phi'], ['-(y-phi+1)', 'x+1', '-phi']]

        (11, 35, 42) [['y-1', '-(x+phi)', '-(phi-1)'], ['1', 'phi', 'phi+1'], ['-y', 'x', '-2']]
        (45, 16, 1) [['y', '-x', '2'], ['-1', '-phi', '-(phi+1)'], ['-(y-1)', 'x+phi', 'phi-1']]

        (6, 7, 8) [['phi', 'phi+1', '1'], ['y-phi+1', '-(x+1)', '-phi'], ['-(y+1)', '-(phi-x)', 'phi-1']]
        (41, 21, 31) [['y+1', 'phi-x', '-(phi-1)'], ['-(y-phi+1)', 'x+1', 'phi'], ['-phi', '-(phi+1)', '-1']]

        (33, 16, 34) [['y+1', 'phi-x', 'phi-1'], ['-1', '-phi', '-(phi+1)'], ['-y', 'x', '2']]
        (46, 35, 43) [['y', '-x', '-2'], ['1', 'phi', 'phi+1'], ['-(y+1)', '-(phi-x)', '-(phi-1)']]

        (6, 22, 23) [['phi', 'phi+1', '1'], ['y-1', '-(x+phi)', 'phi-1'], ['-(y+phi-1)', 'x-1', '-phi']]
        (18, 44, 31) [['y+phi-1', '-(x-1)', 'phi'], ['-(y-1)', 'x+phi', '-(phi-1)'], ['-phi', '-(phi+1)', '-1']]


DONE: S2 nz5 counterexample, coordinates
    # phi-1 = 0.618033988749895
    # phi = 1.6180339887498953
    # phi+1 = 2.6180339887498953
    # 2*phi = 3.23606797749979
    # 0
    # 1
    # 2

    # x = 2/(5**0.25)
    # x-1 = 0.337480609952844
    # x = 1.3374806099528438
    # x+1 = 2.337480609952844
    # x+phi = 2.9555145987027394
    # phi-x = 0.28055337879705067

    # y = x*phi
    # y-1 = 1.1640890861976427
    # y = 2.1640890861976425
    # y+1 = 3.1640890861976425
    # y-(phi-1) = 1.546055097447748
    # y+(phi-1) = 2.7821230749475383


DONE: Tietze's graph
    expand vertex in Petersen graph (123 are Petersen colours):
    a1a2a3 -> a1b2b3,b1a2b3,b1b2a3
        a2+a3=a1
        a1:       0, 0,2*phi
        a2:  phi**2, 1,  phi
        a3: -phi**2,-1,  phi

        a1+b2=b3
        a1: 0,0,2*phi
        b2: phi**2,1,-phi
        b3: phi**2,1,phi

        b1+a2=b3
        b1: 0,0,0
        a2: phi**2,1,phi
        b3: phi**2,1,phi

        so, we can't do it
        problem in parity: a2=b3, so b1=0


WONTDO: Tietze's graph, use new vectors
    # 5**0.5 = 2*phi-1 = (phi+2)/phi
    x = 2/(5**0.25)
    y = x*phi

    [1.1640890861976427, 2.9555145987027394, 0.618033988749895]
    y-1, x+phi, phi-1

    [3.1640890861976425, 0.28055337879705067, 0.6180339887498948]
    y+1, phi-x, phi-1

    [2.7821230749475383, 0.337480609952844, 1.6180339887498953]
    y+(phi-1), x-1, phi

    [1.546055097447748, 2.337480609952844, 1.6180339887498953]
    y-(phi-1), x+1, phi

    [2.1640890861976425, 1.3374806099528438, 2]
    y, x, 2


    a1a2a3 -> a1b2b3,b1a2b3,b1b2a3
    a2+a3=a1
    a1:       0, 0,2*phi
    a2:  phi**2, 1,  phi
    a3: -phi**2,-1,  phi

    (0, 4, 23)
        [2.7821230749475383, -0.337480609952844, -1.6180339887498953]
        [0.0, 0.0, 3.23606797749979]
        [-2.7821230749475383, 0.337480609952844, -1.6180339887498953]
    (29, 4, 28)
        [2.6180339887498953, 1, -1.618033988749895]
        [0.0, 0.0, 3.23606797749979]
        [-2.6180339887498953, -1, -1.618033988749895]

    a1+b2=b3
    a1:             0,   0,2*phi
    b2:                   ,x-phi
    b3:                   ,x+phi

    b1+a2=b3
    b1: 
    a2:       phi**2,   1,phi
    b3: -(y+(phi-1)),-x+1,phi

    FAIL:
        a1+b2=b3
        a1:         0,  0,2*phi
        b2: y+(phi-1),x-1, -phi
        b3: y+(phi-1),x-1,  phi

        b1+a2=b3
        b1:       y-2,x-2,  0
        a2:    phi**2,  1,phi
        b3: y+(phi-1),x-1,phi

    probably this approach won't work, because new vectors assume a graph with girth 4










{-1.0, -9.030971600656904e-18, 9.549708297316796e-17},
{-0.9687598666735441, 1.8036648461847414e-17, -0.24800064661741741},
// {-0.9077435189160142, -0.09872652454106681, 0.4077435189160141},
// {-0.9077435189160142, -0.09872652454106676, -0.407743518916014},
// {-0.9077435189160142, 0.09872652454106672, -0.4077435189160141},
// {-0.9077435189160142, 0.09872652454106676, 0.407743518916014},
// {-0.865754201881895, -0.5, 0.02167168484089834},
// {-0.865754201881895, 0.4999999999999999, 0.02167168484089809},
{-0.8440825170409966, -0.5350655226660493, -0.03506552266604854},
{-0.8440825170409966, -0.5350655226660493, 0.03506552266604854},
{-0.8440825170409966, 0.5350655226660493, -0.03506552266604854},
{-0.8440825170409966, 0.5350655226660493, 0.03506552266604854},
{-0.8306886792158457, 0.5567372075069474, -6.223285321735374e-19},
{-0.8090169943749471, 0.3090169943749477, -0.5000000000000006},
{-0.8090169943749471, 0.3090169943749477, 0.5000000000000006},
{-0.8090169943749468, -0.3090169943749473, -0.5000000000000011},
{-0.8090169943749468, -0.3090169943749473, 0.5000000000000011},
{-0.6597428722985966, 0.5, 0.5610163477575298},
{-0.6597428722985965, -0.49999999999999983, 0.5610163477575301},
{-0.56101634775753, 0.6597428722985966, -0.5},
{-0.56101634775753, 0.6597428722985966, 0.49999999999999994},
{-0.5567372075069474, 6.223285321735375e-19, 0.8306886792158457},
{-0.5350655226660491, -0.035065522666048496, -0.8440825170409967},
{-0.5350655226660491, -0.035065522666048496, 0.8440825170409967},
{-0.5350655226660491, 0.035065522666048496, -0.8440825170409967},
{-0.5350655226660491, 0.035065522666048496, 0.8440825170409967},
// {-0.5000000000000001, -0.021671684840898278, 0.8657542018818948},
// {-0.5000000000000001, 0.021671684840898264, -0.8657542018818948},
{-0.5, -0.56101634775753, 0.6597428722985965},
{-0.5, 0.56101634775753, -0.6597428722985966},
{-0.4999999999999999, -0.8090169943749478, 0.30901699437494734},
{-0.4999999999999999, -0.56101634775753, -0.6597428722985966},
{-0.49999999999999983, 0.56101634775753, 0.6597428722985966},
{-0.4999999999999998, -0.8090169943749476, -0.3090169943749473},
{-0.49999999999999933, 0.8090169943749478, 0.30901699437494756},
{-0.499999999999999, 0.8090169943749479, -0.3090169943749478},
// {-0.4077435189160141, -0.9077435189160142, -0.09872652454106666},
// {-0.4077435189160141, -0.9077435189160142, 0.09872652454106666},
// {-0.4077435189160141, 0.9077435189160142, -0.09872652454106666},
// {-0.4077435189160141, 0.9077435189160142, 0.09872652454106666},
{-0.309016994374947, -0.4999999999999998, 0.8090169943749479},
{-0.30901699437494695, -0.49999999999999967, -0.8090169943749477},
{-0.30901699437494695, 0.49999999999999967, -0.8090169943749477},
{-0.30901699437494695, 0.49999999999999967, 0.8090169943749477},
{-0.24800064661741753, -0.9687598666735441, 7.912695146636231e-17},
// {-0.0987265245410667, -0.4077435189160143, -0.9077435189160141},
// {-0.0987265245410667, -0.4077435189160143, 0.9077435189160141},
// {-0.0987265245410667, 0.4077435189160143, -0.9077435189160141},
// {-0.0987265245410667, 0.4077435189160143, 0.9077435189160141},
{-0.03506552266604833, -0.844082517040997, -0.5350655226660488},
{-0.03506552266604833, -0.844082517040997, 0.5350655226660488},
{-0.03506552266604833, 0.844082517040997, -0.5350655226660488},
{-0.03506552266604833, 0.844082517040997, 0.5350655226660488},
// {-0.02167168484089829, 0.8657542018818949, 0.5},
// {-0.02167168484089828, 0.8657542018818949, -0.5},
{-2.444157480957888e-16, 0.2480006466174177, -0.9687598666735441},
{-2.361580023510447e-17, -0.8306886792158458, 0.5567372075069474},
{-2.2259851428115202e-17, 1.0, -9.030971600656901e-18},
{-2.1836291966026995e-18, 1.7344678888130534e-17, 1.0},
{-6.223285321735376e-19, -0.24800064661741755, -0.9687598666735441},
{6.223285321735376e-19, 0.24800064661741755, 0.9687598666735441},
{2.1836291966026995e-18, -1.7344678888130534e-17, -1.0},
{2.2259851428115202e-17, -1.0, 9.030971600656901e-18},
{2.361580023510447e-17, 0.8306886792158458, -0.5567372075069474},
{2.444157480957888e-16, -0.2480006466174177, 0.9687598666735441},
// {0.02167168484089828, -0.8657542018818949, 0.5},
// {0.02167168484089829, -0.8657542018818949, -0.5},
{0.03506552266604833, -0.844082517040997, -0.5350655226660488},
{0.03506552266604833, -0.844082517040997, 0.5350655226660488},
{0.03506552266604833, 0.844082517040997, -0.5350655226660488},
{0.03506552266604833, 0.844082517040997, 0.5350655226660488},
// {0.0987265245410667, -0.4077435189160143, -0.9077435189160141},
// {0.0987265245410667, -0.4077435189160143, 0.9077435189160141},
// {0.0987265245410667, 0.4077435189160143, -0.9077435189160141},
// {0.0987265245410667, 0.4077435189160143, 0.9077435189160141},
{0.24800064661741753, 0.9687598666735441, -7.912695146636231e-17},
{0.30901699437494695, -0.49999999999999967, -0.8090169943749477},
{0.30901699437494695, -0.49999999999999967, 0.8090169943749477},
{0.30901699437494695, 0.49999999999999967, 0.8090169943749477},
{0.309016994374947, 0.4999999999999998, -0.8090169943749479},
// {0.4077435189160141, -0.9077435189160142, -0.09872652454106666},
// {0.4077435189160141, -0.9077435189160142, 0.09872652454106666},
// {0.4077435189160141, 0.9077435189160142, -0.09872652454106666},
// {0.4077435189160141, 0.9077435189160142, 0.09872652454106666},
{0.499999999999999, -0.8090169943749479, 0.3090169943749478},
{0.49999999999999933, -0.8090169943749478, -0.30901699437494756},
{0.4999999999999998, 0.8090169943749476, 0.3090169943749473},
{0.49999999999999983, -0.56101634775753, -0.6597428722985966},
{0.4999999999999999, 0.56101634775753, 0.6597428722985966},
{0.4999999999999999, 0.8090169943749478, -0.30901699437494734},
{0.5, -0.56101634775753, 0.6597428722985966},
{0.5, 0.56101634775753, -0.6597428722985965},
// {0.5000000000000001, -0.021671684840898264, 0.8657542018818948},
// {0.5000000000000001, 0.021671684840898278, -0.8657542018818948},
{0.5350655226660491, -0.035065522666048496, -0.8440825170409967},
{0.5350655226660491, -0.035065522666048496, 0.8440825170409967},
{0.5350655226660491, 0.035065522666048496, -0.8440825170409967},
{0.5350655226660491, 0.035065522666048496, 0.8440825170409967},
{0.5567372075069474, -6.223285321735375e-19, -0.8306886792158457},
{0.56101634775753, -0.6597428722985966, -0.49999999999999994},
{0.56101634775753, -0.6597428722985966, 0.5},
{0.6597428722985965, 0.49999999999999983, -0.5610163477575301},
{0.6597428722985966, -0.5, -0.5610163477575298},
{0.8090169943749468, 0.3090169943749473, -0.5000000000000011},
{0.8090169943749468, 0.3090169943749473, 0.5000000000000011},
{0.8090169943749471, -0.3090169943749477, -0.5000000000000006},
{0.8090169943749471, -0.3090169943749477, 0.5000000000000006},
{0.8306886792158457, -0.5567372075069474, 6.223285321735374e-19},
{0.8440825170409966, -0.5350655226660493, -0.03506552266604854},
{0.8440825170409966, -0.5350655226660493, 0.03506552266604854},
{0.8440825170409966, 0.5350655226660493, -0.03506552266604854},
{0.8440825170409966, 0.5350655226660493, 0.03506552266604854},
// {0.865754201881895, -0.4999999999999999, -0.02167168484089809},
// {0.865754201881895, 0.5, -0.02167168484089834},
// {0.9077435189160142, -0.09872652454106676, -0.407743518916014},
// {0.9077435189160142, -0.09872652454106672, 0.4077435189160141},
// {0.9077435189160142, 0.09872652454106676, 0.407743518916014},
// {0.9077435189160142, 0.09872652454106681, -0.4077435189160141},
{0.9687598666735441, -1.8036648461847414e-17, 0.24800064661741741},
{1.0, 9.030971600656904e-18, -9.549708297316796e-17}