[1] (2001) Jana Maxova, Jaroslav Nesetril - On oriented path double covers
[2] (2004) Jana Maxova, Jaroslav Nesetril - On covers of graphs
[6] (1980) Timothy W. Tillson, A Hamiltonian decomposition of K∗_2m, 2m >= 8
[3] (2009) Chi-Tsung Hsieh - Covering Graphs with Directed Paths
[4] (2012) Behrooz Bagheri Gh., Behnaz Omoomi - On the oriented perfect path double cover conjecture
[5] (2012) Behrooz Bagheri Gh., Behnaz Omoomi - Small oriented cycle double cover of graphs


TODO: ppdc-like conjectures (even without exceptions)
    rppdc (Bondy)
        http://www.mathe2.uni-bayreuth.de/markus/reggraphs.html
        http://www.maths.gla.ac.uk/~es/srgraphs.php
        http://math.ihringer.org/srgs.php
    ? parallel ppdc (me)
    ? TODO: are there any other conjectures, except mine?


TODO: ppdc-like theorems
    ppdc (Li)
    path decomposition theorem (Lovász)
    path covers of weighted graphs (Fan)
    faithful path decomposition of multigraphs (Cai)
    ? Paths in Weighted Digraphs (Bollobas and Scott)
    +
    generalization of Gallai's path decomposition conjecture

TODO: anti-oppdc / appdc
    - 1 counterexample (planar)
        TODO: did i have a restriction here on path lengths?
        degrees: 3 2 3 3 3
        0 1
        1 4
        2 0
        3 2
        4 3
        2 4
        3 0
    ...


TODO: parallel ppdc (we have freedom to choose orientation for edges; cover each edge twice in same direction)


TODO: Find (inductive) constructions for:
    planar graphs
        - https://houseofgraphs.org/meta-directory/planar
        - TODO: can we (always) group paths into pairs, to get smth similar to union of trees?
        ...
    ...


TODO: understand constructions for:
    - [6] K_n, n odd
        - [1] K7:
            1234567
            2741635
            3175264
            4762513
            5736142
            6543721
            7153246

            - TODO: can we (always) group paths into pairs, to get smth similar to union of trees?
                1234567
                2741635

                3175264
                6543721

                4762513
                5736142

                7153246

          - TODO: is this some kind of matrix?
        
        - construction for odd n
            - first we create row-complete latin square for even n
            n = 2m
            L(1,c) =        c/2 (mod n), c even
            L(1,c) = -((c-1)/2) (mod n), c odd
                (so, L(1,c) is basically a graceful labeling)
            L(r,c) = r-1+L(1,c) (mod n), 1<=c, 2<=r<=n
            - then we have an idea of inductive construction
            - then we have some mod 4 analysis ([6], proposition 2)
            - but this only works for n=2m+1, where 2m=0 (mod 4), 2m>=8
            - we need additional construction for 2m=2 (mod 4)
            - that's [6] proposition 4: 2m => 4m-2
        - [6] K9:
            017263548
            140576823
            ...
            803162475

    - [1] union of two arbitrary trees
        - why it fails for K3: because of induction
        - TODO: can we extend this?
    - [1] all 2-connected graphs on n vertices with at most 2n−1 edges have an OPPDC
        - TODO: can we extend this?
    

[1]:
    - K3 and K5 have no OPPDC
    - all K2n admit an OPPDC
    - Using computers we have also found an OPPDC for K2n+1 for small n
    - Structure of the minimal counterexample (i.e., with minimal number of edges):
        - G has no vertices of degree 1, 2 or 3.
    - If G is a graph with all vertices of odd degree, then G has a decomposition into n/2 paths.   
        - The symmetric orientation of these paths forms an OPPDC of the graph G.
    - Let G be a graph with an OPPDC and let G′ arise from G by dividing one edge of G. Then G′also has an OPPDC.
    - Let G1, G2 be two graphs which have an OPPDC. Suppose that G1 ∩ G2 = {v}. Then the union G1 ∪ G2 has an OPPDC.
    - Let G be a simple graph; G  != K3; and v ∈ V (G) a vertex of degree 2. If G\v has an OPPDC then G has also an OPPDC.
    - Let G = (V,E) be a graph; v ∈ V(G) a vertex of degree 3, N(v) = {x,y,z} induce K3 in G. If G\v has an OPPDC then G has also an OPPDC.
    - Let G = (V,E) be a graph; v ∈ V(G) a vertex of degree 3, N(v) = {x,y,z}, (x,z)  ̸∈ E(G). If (G\v) ∪ {(x,z)} has an OPPDC then G also has an OPPDC.
    - (except for K3) Union of two arbitrary trees has an OPPDC
    - (except for K3) all 2-connected graphs on n vertices with at most 2n−1 edges have an OPPDC.
    - Let G be a (vertex) 2-connected graph; G  != K3, that arises from a tree on n vertices by adding k <= n edges.Then G has an OPPDC.
    - The n-dimensional hypercube has an OPPDC for each n >= 1.


[2]:
    [6]: all K_{2n+1} have an OPPDC, n >= 3
    arrow construction preserves OPPDC:
        ...
    ...

[3]:
    - if G has no components which are isomorphic to K3 and G is a 3-degenerate graph, then G has an OPPDC.
    - We also construct an OPPDC for complete bipartite graph Kn,n and multipartite graph Km(n)(n is odd and m  != 3, 5), respectively.
    ...

[4]:
    If G and H have an OPPDC, then G□H also has an OPPDC.
    ...
    Every Kn,m has an OPPDC.

[5]:
    Theorem 1.4 [1, 4] Let G != K3 be a graph. In each of the following cases, G has an OPPDC.
        [1] (i) G is a union of two arbitrary trees.
        [1] (ii) G is an odd graph.
        [1] (iii) G has no adjacent vertices of degree greater than two.
            TODO: where is it in [1]?
            it's not in [1]
        [1] (iv) G is a 2-connected graph of order n and |E(G)| ≤ 2n − 1.

        (v) G = L(T), for some tree T.
        (vi) G = L(H), where the degree of no adjacent vertices in H have the same parity.
        (vii) G is a graph with ∆(G) ≤ 4 and δ(G) ≤ 3.
        (viii) G is a separable 4-regular graph. (separable: a graph that contains a cut vertex.)
    ...



1234567
2741635
3175264
4762513
5736142
6543721
7153246


[6, 0, 3, 4, 5]
[0, 5, 3, 6, 7, 1]
+
[6, 5, 1, 0, 4, 3, 7, 2]
[7, 0, 6, 1, 3]
+
[4, 5, 0, 1, 6, 7, 2]
[4, 2, 6, 3, 7, 5, 1]
+
[3, 5, 7, 0]
[7, 1, 3, 0, 4, 2, 6, 5]



[1, 0, 3]
[0, 2, 1]
[3, 1, 0, 2]
[0, 3, 1, 2]
can't split


[3, 1, 2, 0]
[1, 0, 3, 2]
+
[2, 1, 0, 3]
[0, 2, 3, 1]


[1, 2, 0, 3]
[2, 1, 0]
[3, 2, 0]
[1, 0, 3, 2]
can't split



graph failed at 1
tree
[0, 7, 3, 4, 1]
[1, 4]
[4, 3]
[3, 7]
[7, 0, 2, 6, 5, 8]
[8, 5]
[5, 6]
[6, 2]
[2, 0]
added edges
(1, 6)
(6, 7)
seed=8363186
9 10 0.9 1 28


n = 7
seed=997616
graph failed at 1
tree
[0, 5, 6]
[6, 5, 1]
[1, 5]
[5, 0, 3, 2, 4]
[4, 2]
[2, 3]
[3, 0]
added edges
(2, 6)
(5, 2)



n=6
good_starts=defaultdict(<class 'int'>, {((3, 2), (1, 2)): 18, ((3, 2), (2, 1)): 8, ((2, 3), (1, 2)): 27, ((2, 3), (2, 1)): 17})
failed_starts=defaultdict(<class 'int'>, {((2, 3), (2, 1)): 16, ((3, 2), (2, 1)): 14})
failed_spectacularly_starts=defaultdict(<class 'int'>, {((2, 3), (2, 1)): 16, ((3, 2), (2, 1)): 14})


[0, 1, 4]
[4, 1, 3]
[3, 1]
[1, 0, 2, 5]
[5, 2]
[2, 0]

failed:
    2,3 (+ 2,1)
        [0, 1, 4]
        [4, 1, 3, 2]
        [3, 1]
        [1, 0, 2, 5]
        [5, 2]
        [0, 2, 3]
worked:
    2,3 (+ 2,1)
        [0, 1, 4]
        [4, 1, 3]
        [1, 3, 2]
        [1, 0, 2, 5]
        [5, 2, 3]
        [2, 0]
    2,3 + 2,1
        [0, 1, 4]
        [4, 1, 3, 2]
        [2, 1, 3]
        [1, 0, 2, 5]
        [5, 2, 3]
        [0, 2, 1]


3,2
worked:
    [0, 1, 4]
    [4, 1, 3]
    [1, 3, 2]
    [1, 0, 2, 5]
    [5, 2, 3]
    [2, 0]
failed:
    [0, 1, 4]
    [4, 1, 3, 2]
    [3, 1]
    [1, 0, 2, 5]
    [5, 2]
    [0, 2, 3]

2,3
worked:
    [0, 1, 4]
    [4, 1, 3]
    [1, 3, 2]
    [1, 0, 2, 5]
    [5, 2, 3]
    [2, 0]
failed:
    [0, 1, 4]
    [4, 1, 3, 2]
    [3, 1]
    [1, 0, 2, 5]
    [5, 2]
    [0, 2, 3]




n=7
good_starts=defaultdict(<class 'int'>, {((6, 2), (2, 5)): 15, ((6, 2), (5, 2)): 14, ((2, 6), (2, 5)): 9, ((2, 6), (5, 2)): 9})
failed_starts=defaultdict(<class 'int'>, {((2, 6), (5, 2)): 12, ((6, 2), (2, 5)): 9, ((2, 6), (2, 5)): 17, ((6, 2), (5, 2)): 15})
failed_spectacularly_starts=defaultdict(<class 'int'>, {((2, 6), (5, 2)): 12, ((6, 2), (2, 5)): 9, ((2, 6), (2, 5)): 17, ((6, 2), (5, 2)): 15})

n=8
good_starts=defaultdict(<class 'int'>, {((5, 7), (5, 6)): 28, ((7, 5), (6, 5)): 11, ((7, 5), (5, 6)): 23, ((5, 7), (6, 5)): 13})
failed_starts=defaultdict(<class 'int'>, {((7, 5), (6, 5)): 16, ((5, 7), (6, 5)): 9})
failed_spectacularly_starts=defaultdict(<class 'int'>, {((7, 5), (6, 5)): 16, ((5, 7), (6, 5)): 9})

n=9
good_starts=defaultdict(<class 'int'>, {((7, 1), (1, 6)): 11, ((1, 7), (6, 1)): 15, ((1, 7), (1, 6)): 13, ((7, 1), (6, 1)): 13})
failed_starts=defaultdict(<class 'int'>, {((7, 1), (1, 6)): 9, ((7, 1), (6, 1)): 18, ((1, 7), (1, 6)): 8, ((1, 7), (6, 1)): 13})
failed_spectacularly_starts=defaultdict(<class 'int'>, {((7, 1), (1, 6)): 9, ((7, 1), (6, 1)): 18, ((1, 7), (1, 6)): 8, ((1, 7), (6, 1)): 13})


какая сейчас мысль?
- можно словить проблему на втором ребре, на конкретной ориентации, при условии что мы для первого ребра выбрали определённые удлинения (причём ориентация первого ребра не важна, важно удлинения)
- то есть надо взять определённое решение после первого ребра
- и дальше всё всегда ломается, но только на определённом направлении второго ребра
    - TODO: может быть другое направление сломается чуть позже?


seed=2212498
fail on adding (3, 1)
edge_idx=5 vs 15
[0, 5, 6, 3, 4]
[0, 3, 4, 2, 1]
[5, 4, 2, 3]
[4, 5, 3, 6]
[6, 5, 3]
[5, 0, 1, 2]
[1, 0, 3, 2]
0-4-6-3-5-2-1-0
 4/3/2/3/3/3/4
  1 1 1     1

didn't fail
edge_idx=5 vs 15
[0, 5, 3, 4]
[0, 3, 4, 2, 1]
[5, 4, 2, 3]
[4, 5, 6]
[5, 6, 3, 2]
[1, 0, 5, 3]
[6, 3, 0, 1, 2]

0-4-6-2-5-3-1-0
 3/2/4/3/3/3/4
  1 2 1     1