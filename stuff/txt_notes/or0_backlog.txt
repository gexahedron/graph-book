o6c4c landscape:
- has 2cdcs
- or=0 (+ or=2 when s2=3)
- or=2
- or_type_count=1
- onlyrich
- rich_type_count around 12
    - что это: читай код, это непростая конструкция, но красивая
    рёбер много, а таплов оказывается очень мало (правда есть и ограничение сверху)
- strong Petersen colouring
    - o244-flow triple count: 9, 10 (with fix in parity!)
- s1s0diff <= 0 (28.05) или -1 (30.05)
- fixes in parity
    - no t4 chords
    - t2=0
    - s0=12
    - has nz-mod5 flow, but no nz-mod5 flow or no nz-mod-both flow
    - o244-flows triple count: 9, 10
    - big count of oriented vertices
    - small s1s0diff
    - any_chords_frequency[1] = 0
    - solutions with multiple reorientations
- SEAL:
    s1 <= 18
    t1 + t3 <= 8
    ((t1 + t3 <= or * 2 + 2) || (t1 + t3 == 9)) && ((s2 == 0) || (s2 == 3))
more subtle:
- even number of or vertices
    - odd or count behaves differently from even or count
- non-zero nz5 or-sums
- any_chords_frequency[2] = 0
- o2: 0 0 + o2: 3 3


TODO: restore 333-flows and other constructions

TODO: Fan-Raspaud triples

TODO: построить nz5 по o6c4c (через libarmadillo)
TODO: check weights
?
- просто o6c4c:
    всякие вариации с весом 1/6:
    (1/6, -1/6, -5/6, -1/6, -3/2, 5/2); sum=0
        +1/6:
        (1/3, 0, -2/3, 0, -4/3, 8/3)
    (5/6, 5/6, 1/6, -1/2, -11/6, 1/2)
    (7/6, -5/6, -13/6, 1/2, 5/6, 1/2)
? пускай c = f, d = e + 1, b = a + 2


TODO: t1,t2,t3,t4 -244_odd_counts


TODO: triples_without_ors
    it's a bit different from what I wanted, but still interesting


TODO: triples, where oriented vertices split, as if they are unoriented
    count them


TODO: reorientations
    there seems to be some difference between solutions with small amount of orientations
    and big amount of them
    have some results for 26.05
    TODO: check 28.05


WONTDO: 6c4c parity formula
    - looks like formula depends only on unoriented stats:
        - s0 - number of circuits
        - s1 - number of rich edges
        - s2 - depends on rich edges in PMs
        - r244_odd_count - depends on rich edges in all possible 244-even-cycles
    - even though the formula is easier to approach in various oriented subcases
        - and even has influence on or_sum % 5

    - so, idea is that there's still 1 more missing unoriented stat

    DONE: check formula for u6c4c, has_2cdcs
        TODO: it will definitely break on s0 odd
        is it "fixable"?
        looks like it's not fixable

    DONE: check formula for u6c4c, some other known cases from o6c4c
        e. g. "no chords"
        which of them will break?
        "no chords" also break

    I think I won't do unoriented 6c4c, because it looks wild, without any logic
    probably even though the formula doesn't depend on orientable parameters,
    it heavily depends on the existence of o6c4c solution itself


TODO: 6c4c
    found 3 interesting things to explore
    - s0=12 - looks like case of "fixable" formula
    - r244odd is never 2 or 8
    - has 2cdcs => r244odd=0
    checked upto 22.05
    TODO: check on 24.05 and more


TODO: there's some deep connection between (or_sum % 5) and par=1
    and also sometimes with "broken" par=0 (which we probably can fix)

    26.05, fix in parity cases
        t2=0
            or_sum: nope, 15, 20, 25, 30
            r244_odd_count vs parity
            0 1
            4 1
            6 0

        s0=12
            or_sum: nope, 6, 9, 10, 12, 13, 15, 16, 20, 22, 25, 30
            0; 1;
            4; 1;
            6; 0;
            10; 0;

        mismatch=1
            0  1
            4  1
            6  0
            10 0

        no t4 chords, t4(* 0 0)
            or_sum: nope, 10, 15, 20, 25, 30
            0  1
            4  1
            6  0
            10 0

        - big or count
            or: 11,12,13
            or_sum: nope, 20, 25, 30, 35
            0  1
            4  1
            6  0
            10 0
        
        - any_chords_frequency[1] = 0
            or_sum: nope, 10, 15, 20, 25, 30
            0 1
            4 1
            6 0
        
        - high reors
            for 26.05: reors >= 6
            or_sum: nope, 5, 10, 15, 20, 25, 30
            0 1
            4 1
            6 0

        - TODO: small s1s0diff

        - TODO: small s1 (SEALed: s1 <= 18)
            s1<=22
                0 1
                4 1
                6 0

        - TODO: small s0    
        - TODO: small t2
        - TODO: small t1+t3 (SEALed: t1 + t3 <= 8)

    TODO: 28.05


TODO: some curiously occurring pattern in fix parity cases
    r244_odd_count vs parity
    0; 1
    4; 0/1
    6; 0/1
    10; 1

    26.05:
        - or=3
            ?CONJ: or_sum: nope, 5, 10 and 3,6,9,12
        - or_type_count=2
        - no t3 chords
        - rich_type_count <= 19 (but slightly arbitrary number)
        - small s1
            s1 <= 25
            or_sum: 3,5,6,9,10,12,14,...
        - any_chords_frequency[2] = 0
            or_sum: 15, 20, 25, 30
            0 1
            4 0/1
            6 0/1
        - or=0
            0  1
                o2: 0 0
            10 1
                o2: 0 3
        - or_type_count<=1 + SEALed less=1
            or_sum: nope, 0, 5, 10
            0  1
            4  1
            6  1
            10 1
        - or_type_count<=1
            r244_odd_count vs parity vs o2[1]
            0; 1; 0;
            0; 1; 2;
            10; 1; 1;
            10; 1; 3;
            4; 1; 0;
            4; 1; 2;
            6; 1; 1;
            6; 1; 3;
        - SEALed less=1
            r244_odd_count vs parity vs o2[1]
            a bit weirder:
            0; 1; 0;
            0; 1; 1;                                                                                                                                           0; 1; 2;
            10; 1; 1;
            10; 1; 2;
            10; 1; 3;
            4; 1; 0;
            4; 1; 2;
            6; 1; 1;
            6; 1; 3;

    TODO: 28.05


- or=2, or_type_count=1 + SEALed less=1:
    r244_odd_count vs parity
     0  1
     4  1
     6  1
     10 1

    - SEALed less=1
        26.05
            or: 0, 2, 4, 6, 11
            reors <= 5

        TODO: 28.05

    - TODO: can we refix these cases back?


TODO: another curious pattern, for or_sum % 5 != 0:
    26.05
        r244_odd_count vs parity
        0; 1
            only 2 cases, for or_sum: 14,17
        4; 0/1
        6; 0/1
        10; 0
            only 3 cases, for or_sum: 13,22

    TODO: 28.05


TODO: or=3
    26.05
        or_sum: nope, 5, 10 and 3,6,9,12
        let's check cases one-by-one

        or_sum: 5, 10
            par: 1
            r244_odd_count: 0, 4

        or_sum: 3,6,9,12
            par: 0, 1
            r244_odd_count: 4, 6
            so it's already hard to understand what goes on here
            (even though it's 85 rows)

            s1: 24..32
            s2: 1, 2

        or_sum: nope
            TODO

        for reference
            s0: 12..20
            s1: 17..37
            s2: 0,1,2,3
            t1: 0, t1+t3: 09
                so or vertices are never neighbours

    TODO: 28.05

TODO: even or
    26.05
        or: 0, 2, 4, 6, 8, 10, 12
        or_sum: nope, 5, 10, 15, 20, 25, 30, 35
        but "r244_odd_count vs parity" can be anything

    TODO: 28.05


TODO: o2: 0 0 + o2: 3 3
    26.05
        or_sum: nope, 0, 5, 10, 15, 20, 25, 30
        r244_odd_count: 0
        parity: 0, 1 (only 1 for o2: 3 3; but here are only 3 rows)

    TODO: 28.05

    + o2: 1 1
        26.05, or_sum: nope, 0, 5, 10, 15, 20, 25, 30, 35
    
    o2: 2 2
        this is worse
        26.05, or_sum: nope, 5, 8, 10, 11, 13, 14, 15, 16, 17, ...


TODO: rich_type_count
    - TODO: what's the upper bound for rich_type_count?
    - TODO: we could also try to introduce an oriented version


TODO: onlyrich, rich_type_count
    26.05
        21, 27, 30, 31
        


TODO: max or value
    18.05: 8
    20.05: 11 (all parity=1)
    22.05: 11 (just 2 rows, both parity=0)
    24.05: 11 (just 2 rows, both parity=1)
    26.05: 13 (just 2 rows, both parity=0)
    28.05: 19 (TODO: how many rows? and which parity?)
    TODO: is there any structure to these solutions, or to the distribution of vertices?


TODO: or_counts includes 0
    26.05
        or_type_decomp:;
        or_type_decomp:_1_1_1_2_2_3;
        or_type_decomp:_1_1_1_5;
        or_type_decomp:_1_1_3_3;
        or_type_decomp:_2_2_2;


TODO: parity=0, r244_odd_count=0
    26.05
    - s0: odd; 13,15,17
    - rov[0]=0
    - rrn[0]=0
    - prn[0]=0
    - has_nz5=0, mismatch=0, has_nzmod5=0, has_nzmodb=0
        - probably because positive cases are in parity=1
    - has_nzmod6: 0, 1
    
    parity=1, r244_odd_count=10:
    26.05
    - s0: odd; 13,15,17
    - rov[0]=0
    - rrn[0]: not only 0
    - prn[0]: not only 0


TODO: fix parity in o244count >= 5
    that's a harder one, i think
    (even though it seems to have or_sum % 5 = 0)



TODO: deeper study of or_type_count
    - ? or вершины либо идут парами, либо тройками, либо пятёрками («тут 5 вершин одного типа, с сигнатурой (-, +, +, +, +)»)
    - DONE: check that we never have 4 or vertices from same type
        - or maybe that we don't get nz-mod5 / nz5 flow in these cases
        - that's not true:
        g194: new o6c4c: or: 04; t1+t3: 09; s0: 13; s1: 29; s2: 1; s2uu: 1; PAR: 1; or_type_count: 1; or_type_decomp:_4; rich_type_count: 20; less: 1; or_counts:_4; rich244:_19_8_15_12_7_10_7_9_14_15; r244odd: 6; reors: 1; em: 3 1; o2: 2 1; t1: 3; t2: 7; t3: 6; t4: 23; u_comps: 7 1; u_morecomps_undiv: 2 6 0 6; rov: 0 2 2 0; ruv: 0 1 12 9; dup_oon: 0 2 2 0; uon: 16 6 0 0; rrn: 0 1 10 11 7; prn: 0 0 1 4 5; has_nz5: 1; mismatch: 0; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 1; flow5: u113_u113_u244_u244_u122_u334_o244_o113_u244_u122_o113_u334_u113_u244_o244_u113_u334_u244_u122_u334_u244_u113_u244_u113_u122_u113_; or_sum: 10; or0: sames: rrn024: 17; evens: s1s0diff: 16; col: 12; rrn13: 12; ruv13: 10; ruv02: 12; chord_info: (16 17 6) t1(0 3 0) t2(4 2 1) t3(2 2 2) t4(10 10 3); chord_layers: (2 0 0) (2 4 1) (2 6 4) (2 6 6) (2 8 4) (3 5 1); no_2cdcs;
    - TODO: how should we understand first statement then?

    or_type_count=1
        26.05:
            CONJ: par=1
            CONJ: or_sum % 5 = 0
            ?CONJ: or: 2, 4, 6
            CONJ: less=1 (but not all of them SEALed, yet)
            ?CONJ: em: 3 *
            ?CONJ: o2: 0 * or o2: 2 *
            ?CONJ: t3: 4,6,8,10
            ?CONJ: mismatch: 0
            CONJ: no_2cdcs
            ?CONJ: reors <= 4

    26.05:
        par=1
            - or_type_count=1
            - 08; 2; or_type_decomp:_4_4; 1; (4 snarks, 5 examples)
    
        rich_type_count=12
            04; 2; or_type_decomp:_2_2; 1;
            04; 4; or_type_decomp:_1_1_1_1; 1;
            06; 3; or_type_decomp:_2_2_2; 1;
            06; 5; or_type_decomp:_1_1_1_1_2; 1;                                                                                                                08; 3; or_type_decomp:_2_2_4; 1;
            08; 5; or_type_decomp:_1_1_1_1_4; 1;

        s1s0diff < 0
            03; 3; or_type_decomp:_1_1_1; 1;
            05; 3; or_type_decomp:_1_1_3; 1;
            05; 4; or_type_decomp:_1_1_1_2; 1;


TODO: or vs or_type_count
    26.05
        or  or_type_count
         0  0
         1  -
         2  1
         3      3
         4  1,2,  4
         5      3,4,5
         6  1,2,3,4,5,6
         7      3,4,5,6,7
         8    2,3,4,5,6,7,8
         9      3,4,5,6,7,8,9
        10    2,3,4,5,6,7,8
        11      3,4,5,6,7,8,9
        12          5,6
        13            6
    CONJ: or % 2 = 1 => or_type_count >= 3


TODO: fix in parity for onlyrich
    fix 30.05g14094
        but how?

    - 22.05g1: o244=9

    - 26.05: o244 values
        g172: 8,9
        g173: 3,4
        g226: 8
        g243: 2
        g253: 8
        g254: 6
        g255: 4
        g257: 3
        g280: 4

    - 30.05: g307, g4099, g4541, g10117, g13042, g13252, g13796, g14094, g22848, g22915, g22916, g24295, g24381, g26256, g26257, g27826



DONE: r244odd: 0 or 10
    22.05:
        if r244odd: 0
            or_sum: % 5 = 0
            par: 1 (upto 22.05)
        if r244odd: 10:
            or_sum: % 5 = 0 (upto 24.05, breaks on 26.05)
            par: 0,1 (but only 1, if upto 20.05)

    24.05:
        if r244odd: 0
            or_sum: 3, 5, 6, 9, 11, ...
            par: 0, 1

    26.05:
        for s1s0diff < 0:
            r244odd: 0 or 4


TODO (kind of done): r244odd - never 2 or 8?
    upto 26.05 that's true

    TODO: check 28.05s
    TODO: check 6c4c, not o6c4c

    DONE: is it obvious that r244odd is always an even number?
        probably yes, because every edge is contributing even number of times
            (4 times)


DONE: snarks without o333-flows
    CONJ: looks interesting (check stats for 24 vertices below)
        o244-triple count <= 7 for these snarks
    - check their maximum value of o244-flow triple count
    - idea is that we definitely don't have strong Petersen colouring for this graphs
    - so we never have o244-flow count = 10
    - but maybe it's even less than that?

    - 20 vertices: g1, g6
        ...
    - 22 vertices: g3, g7, g11, g12, g14, g19, g20
        ...
    - 24 vertices: g1, g3, g16, g17, g21, g24, g25, g27, g28, g30, g31, g35, g36, g37
            g1: 1-7
            g3: 0-7
            g16: 0-5
            g17: 0-6
            g21: 0-7
            g24: 0-6
            g25: 0-6
            g27: 0-6
            g28: 0-2, 6
            g30: 0-4
            g31: 1-5
            g35: 1-7
            g36: 0-4
            g37: 2-4
        vs
            g2: 0-9
            g4: 1-7
            g5: 1-5
            g6: 1-4
            g7: 0-7
            g8: 0-9
            g9: 0-7
            g10: 0-5, 8
            g11: 1-4
            g12: 1-9
            g13: 1-5, 7-9
            g14: 1-8
            g15: 1-4
            g18: 0-7
            g19: 0-7
            g20: 1-7
            g22: 1-8
            g23: 0-4, 6
            g26: 0-8
            g29: 1-8
            g32: 1-7
            g33: 0-7
            g34: 1-7
            g38: 0-9


DONE(?): or=3, par=0 vs par=1
    check rich244
    don't notice anything helpful
    i know the reason why, kind of
    or_sum % 5 != 0, e. g. 6, 12
    there's some disturbance which i don't understand, and which  we don't catch with r244odd


TODO (kind of done!): strong Petersen coloring, par=0
    - how can we fix this?
    - r244even=1 => par=1
    - that was a good observation, for 26.05 and 28.05 we have
        these values for parity vs r244_odd_count:
            1 0
            1 4
            0 6
    - this also works for o244=9!
        - so, already for 35+589+82+875 rows (1581 rows)


TODO (kind of done!): o244=9
    seems that we have some similar conjectures as in o244=10:
        - s0 even
        - we can fix the parity
        - em: 0 * or em: 3 *


TODO: o244-flows
    - o244-triple count
        - CONJ: 26.05 upto g74: if o244count >= 5, then or_sum % 5 = 0
            - nope, 10, 15, 20, 25, 30, 35
        - CONJ: o244count = 10 <=> strong Petersen colouring
            - although very small amount of solutions checked
        - o244count = 10
            - 26.05, g255 and g280:
                - or: 7, 9
                - or_counts:_7_9
                - s0: 20, 22
                - s1: 31, 35, 37
                - s2: 0, 1
                    -! parity: 0, 1
                - s2uu: 2, 3
                    - actually s2uu = 3 - s2
                - s1s0diff: 11, 13, 15
                - col: 12, 20
                - or_type_count: 3, 5, 7
                - rich_type_count: 15, 25
                - mismatch: 0, 1
                    has_nz5: 0; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0;
                    has_nz5: 1; mismatch: 0; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 1;
                    has_nz5: 1; mismatch: 1; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 0;
                - no_2cdcs, has_2cdcs
                - chord_info: (35 4 0), (39 0 0)
                    - actually, col=20 => chord_info: (39 0 0)
                        - and col=12 can have both possibilities
                    - more details:
                    chord_info: (35 4 0) t1(0 2 0) t2(4 2 0) t3(17 0 0) t4(14 0 0);
                    chord_info: (35 4 0) t1(2 0 0) t2(2 4 0) t3(17 0 0) t4(14 0 0);
                    chord_info: (35 4 0) t1(2 1 0) t2(2 3 0) t3(21 0 0) t4(10 0 0);
                    chord_info: (39 0 0) t1(0 0 0) t2(2 0 0) t3(21 0 0) t4(16 0 0);
                    chord_info: (39 0 0) t1(0 0 0) t2(2 0 0) t3(27 0 0) t4(10 0 0);
                    chord_info: (39 0 0) t1(0 0 0) t2(4 0 0) t3(21 0 0) t4(14 0 0);
                    chord_info: (39 0 0) t1(1 0 0) t2(1 0 0) t3(19 0 0) t4(18 0 0);
                    chord_info: (39 0 0) t1(1 0 0) t2(1 0 0) t3(25 0 0) t4(12 0 0);
                    chord_info: (39 0 0) t1(2 0 0) t2(0 0 0) t3(23 0 0) t4(14 0 0);
                    chord_info: (39 0 0) t1(2 0 0) t2(2 0 0) t3(17 0 0) t4(18 0 0);
                    chord_info: (39 0 0) t1(2 0 0) t2(2 0 0) t3(23 0 0) t4(12 0 0);
                    - so at least 11 possibilities!
                - also, there are no rich chords
                - rov: 0 0 even odd
                    - more details:
                    rov: 0 0 0 7;
                    rov: 0 0 0 9;
                    rov: 0 0 2 5;
                    rov: 0 0 2 7;
                    rov: 0 0 4 3;
                    rov: 0 0 4 5;
                    rov: 0 0 6 3;
                - ruv: 0 0 even odd
                    ruv: 0 0 0 17;
                    ruv: 0 0 10c 7;
                    ruv: 0 0 12 7;
                    ruv: 0 0 2 15;
                    ruv: 0 0 2 17;
                    ruv: 0 0 4 13;
                    ruv: 0 0 4 15;
                    ruv: 0 0 8 11;
                - reors: 14, 16, 22
                - em: 0 2; or em: 0 3
                - o2: 5 variations
                    0 0;
                    0 1;
                    1 0;
                    1 1;
                    2 2;
                - u_comps: 2 1, 4 2, 8 3
                    - more details:
                    u_comps: 2 1; u_morecomps_undiv: 2 6 2 6
                    u_comps: 4 2; u_morecomps_undiv: 0 0 0 0
                    u_comps: 8 3; u_morecomps_undiv: 0 6 0 6
                - TODO: r244even, r244odd

        - 28.05, o244 = 10:
            strong petersen colouring для 28.05:
            g287    rich: 0 (123) -> 10 (145); poor: 0 (123) -> 12 (123); poor: 0 (123) -> 8 (123); poor: 1 (123) -> 13 (123); poor: 1 (123) -> 5 (123); rich: 1 (123) -> 16 (345); rich: 2 (345) -> 24 (125); rich: 2 (345) -> 4 (123); rich: 2 (345) -> 26 (124); poor: 3 (123) -> 8 (123); poor: 3 (123) -> 5 (123); rich: 3 (123) -> 7 (245); poor: 4 (123) -> 12 (123); poor: 4 (123) -> 5 (123); rich: 6 (135) -> 18 (234); rich: 6 (135) -> 20 (124); rich: 6 (135) -> 7 (245); rich: 7 (245) -> 22 (134); poor: 8 (123) -> 9 (123); poor: 9 (123) -> 13 (123); rich: 9 (123) -> 23 (145); rich: 10 (145) -> 18 (234); rich: 10 (145) -> 21 (235); rich: 11 (135) -> 26 (124); rich: 11 (135) -> 25 (234); rich: 11 (135) -> 14 (245); poor: 12 (123) -> 15 (123); poor: 13 (123) -> 15 (123); rich: 14 (245) -> 17 (134); rich: 14 (245) -> 15 (123); rich: 16 (345) -> 20 (124); rich: 16 (345) -> 19 (125); rich: 17 (134) -> 21 (235); rich: 17 (134) -> 19 (125); rich: 18 (234) -> 19 (125); rich: 20 (124) -> 21 (235); rich: 22 (134) -> 24 (125); rich: 22 (134) -> 27 (235); rich: 23 (145) -> 25 (234); rich: 23 (145) -> 27 (235); rich: 24 (125) -> 25 (234); rich: 26 (124) -> 27 (235); has strong coloring
            g2078   rich: 0 (123) -> 12 (145); rich: 0 (123) -> 4 (245); rich: 0 (123) -> 8 (345); poor: 1 (125) -> 11 (125); rich: 1 (125) -> 5 (134); poor: 1 (125) -> 14 (125); rich: 2 (234) -> 7 (145); rich: 2 (234) -> 26 (135); rich: 2 (234) -> 9 (125); rich: 3 (235) -> 27 (124); rich: 3 (235) -> 5 (134); rich: 3 (235) -> 7 (145); rich: 4 (245) -> 26 (135); rich: 4 (245) -> 5 (134); rich: 6 (145) -> 15 (235); rich: 6 (145) -> 13 (234); poor: 6 (145) -> 7 (145); rich: 8 (345) -> 27 (124); rich: 8 (345) -> 9 (125); poor: 9 (125) -> 11 (125); rich: 10 (234) -> 12 (145); rich: 10 (234) -> 22 (135); rich: 10 (234) -> 24 (125); poor: 11 (125) -> 24 (125); rich: 12 (145) -> 21 (235); rich: 13 (234) -> 14 (125); rich: 13 (234) -> 19 (135); rich: 14 (125) -> 17 (134); rich: 15 (235) -> 18 (124); rich: 15 (235) -> 17 (134); poor: 16 (245) -> 23 (245); rich: 16 (245) -> 19 (135); rich: 16 (245) -> 17 (134); poor: 18 (124) -> 20 (124); rich: 18 (124) -> 19 (135); rich: 20 (124) -> 22 (135); rich: 20 (124) -> 21 (235); rich: 21 (235) -> 25 (134); rich: 22 (135) -> 23 (245); rich: 23 (245) -> 25 (134); rich: 24 (125) -> 25 (134); rich: 26 (135) -> 27 (124); has strong coloring
            g2503   rich: 0 (123) -> 12 (145); rich: 0 (123) -> 14 (245); poor: 0 (123) -> 3 (123); rich: 1 (234) -> 9 (125); poor: 1 (234) -> 20 (234); rich: 1 (234) -> 6 (135); poor: 2 (134) -> 19 (134); rich: 2 (134) -> 4 (235); rich: 2 (134) -> 9 (125); rich: 3 (123) -> 5 (145); rich: 3 (123) -> 7 (245); poor: 4 (235) -> 13 (235); rich: 4 (235) -> 5 (145); poor: 5 (145) -> 16 (145); poor: 6 (135) -> 15 (135); rich: 6 (135) -> 7 (245); rich: 7 (245) -> 17 (134); rich: 8 (234) -> 12 (145); rich: 8 (234) -> 15 (135); rich: 8 (234) -> 11 (125); poor: 9 (125) -> 11 (125); rich: 10 (134) -> 14 (245); rich: 10 (134) -> 13 (235); rich: 10 (134) -> 11 (125); rich: 12 (145) -> 13 (235); rich: 14 (245) -> 15 (135); rich: 16 (145) -> 22 (123); rich: 16 (145) -> 21 (235); poor: 17 (134) -> 19 (134); poor: 17 (134) -> 23 (134); rich: 18 (125) -> 20 (234); rich: 18 (125) -> 26 (345); rich: 18 (125) -> 19 (134); rich: 20 (234) -> 24 (135); rich: 21 (235) -> 23 (134); rich: 21 (235) -> 27 (124); rich: 22 (123) -> 26 (345); rich: 22 (123) -> 25 (245); rich: 23 (134) -> 25 (245); rich: 24 (135) -> 27 (124); rich: 24 (135) -> 25 (245); rich: 26 (345) -> 27 (124); has strong coloring
            g2725   rich: 0 (123) -> 14 (145); rich: 0 (123) -> 10 (245); poor: 0 (123) -> 3 (123); rich: 1 (134) -> 9 (125); rich: 1 (134) -> 5 (245); rich: 1 (134) -> 6 (235); rich: 2 (234) -> 7 (145); rich: 2 (234) -> 4 (135); rich: 2 (234) -> 9 (125); rich: 3 (123) -> 5 (245); rich: 3 (123) -> 7 (145); poor: 4 (135) -> 13 (135); rich: 4 (135) -> 5 (245); poor: 6 (235) -> 20 (235); rich: 6 (235) -> 7 (145); poor: 8 (125) -> 16 (125); poor: 8 (125) -> 22 (125); poor: 8 (125) -> 11 (125); poor: 9 (125) -> 11 (125); rich: 10 (245) -> 13 (135); rich: 10 (245) -> 17 (134); rich: 11 (125) -> 21 (134); rich: 12 (234) -> 14 (145); rich: 12 (234) -> 16 (125); rich: 12 (234) -> 13 (135); rich: 14 (145) -> 15 (235); rich: 15 (235) -> 17 (134); rich: 15 (235) -> 19 (124); rich: 16 (125) -> 17 (134); rich: 18 (345) -> 26 (123); rich: 18 (345) -> 22 (125); rich: 18 (345) -> 19 (124); rich: 19 (124) -> 23 (135); rich: 20 (235) -> 24 (145); rich: 20 (235) -> 21 (134); rich: 21 (134) -> 27 (245); rich: 22 (125) -> 25 (234); rich: 23 (135) -> 27 (245); rich: 23 (135) -> 25 (234); rich: 24 (145) -> 26 (123); rich: 24 (145) -> 25 (234); rich: 26 (123) -> 27 (245); has strong coloring
            g2726   rich: 0 (123) -> 14 (145); rich: 0 (123) -> 10 (245); poor: 0 (123) -> 3 (123); rich: 1 (134) -> 9 (125); rich: 1 (134) -> 5 (245); rich: 1 (134) -> 6 (235); rich: 2 (234) -> 7 (145); rich: 2 (234) -> 4 (135); rich: 2 (234) -> 9 (125); rich: 3 (123) -> 5 (245); rich: 3 (123) -> 7 (145); poor: 4 (135) -> 13 (135); rich: 4 (135) -> 5 (245); poor: 6 (235) -> 20 (235); rich: 6 (235) -> 7 (145); rich: 8 (345) -> 16 (125); rich: 8 (345) -> 22 (123); poor: 8 (345) -> 11 (345); rich: 9 (125) -> 11 (345); rich: 10 (245) -> 13 (135); rich: 10 (245) -> 17 (134); poor: 11 (345) -> 21 (345); rich: 12 (234) -> 14 (145); rich: 12 (234) -> 16 (125); rich: 12 (234) -> 13 (135); rich: 14 (145) -> 15 (235); rich: 15 (235) -> 17 (134); rich: 15 (235) -> 19 (124); rich: 16 (125) -> 17 (134); rich: 18 (145) -> 20 (235); rich: 18 (145) -> 22 (123); rich: 18 (145) -> 26 (234); rich: 19 (124) -> 21 (345); rich: 19 (124) -> 24 (135); rich: 20 (235) -> 23 (134); rich: 21 (345) -> 27 (125); rich: 22 (123) -> 25 (245); rich: 23 (134) -> 27 (125); rich: 23 (134) -> 25 (245); rich: 24 (135) -> 26 (234); rich: 24 (135) -> 25 (245); rich: 26 (234) -> 27 (125); has strong coloring
            для 28.05 - это всё
            875 rows
                743 PAR 1, 132 PAR 0
                - or: 6, 7, 9, 10, 11, 13, 14
                CONJ? - or_counts:
                    or_counts:_6_10;
                    or_counts:_6_14;
                    or_counts:_7_13;
                    or_counts:_7_9;
                    or_counts:_7_9_11;
                    or_counts:_7_9_13;
                CONJ: - s0: 18, 20, 22, 24
                - s1: 30, 33, 34, 35, 36, 37, 38
                    - s1s0diff: 10,11,12,13,14,15,16,17,18
                CONJ?: - s2, s2uu:
                    0; 3;
                    1; 2;
                    2; 1;
                    3; 3;
                - or_type_count: 3,4,5,6,7,8
                - rich_type_count: 15,18,21,23,24,25,27,28
                - r244even: 0, 1
                - r244odd: 0
                - reors: 7,9,11,13,15,16,17,19,21,22,24,28,30
                CONJ?: - em:
                    0 1;
                    0 2;
                    0 3;
                    3 3;
                - o2: probably almost anything possible (10 variations)
                - u_comps:
                    1 1;
                    2 1;
                    3 1;
                    4 1;
                    4 2;
                    5 2;
                    6 2;
                    7 3;
                - rov: anything
                - ruv: anything
                CONJ?: - rrn[0]: 0
                - rrn[1]: 0, 4
                - rrn[3]: 0, 4, 8, 12, 16, 18
                - u_morecomps_undiv[1] and u_morecomps_undiv[3]: 0 or 6
                CONJ?: - prn[0]: 0
                - flows:
                    has_nz5: 0; mismatch: 0; has_nzmod5: 0; has_nzmod6: 0; has_nzmodb: 0;
                    has_nz5: 0; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0;
                    has_nz5: 1; mismatch: 0; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 1;
                    has_nz5: 1; mismatch: 1; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 0;
                - col: 12,14,16,18,20
                CONJ?: - chords: only t4[2]: 0
                    everything else can be anything
                - when has_2cdcs - taken: 10 10, 11 11, 11 13
                CONJ: or_sum: nope, 10, 15, 20, 25, 30, 35, 40


TODO: smallest par=0 example
    18.05, compare these two solutions:
    g2: new o6c4c: or: 03; t1+t3: 09; s0: 13; s1: 23; s2: 1; s2uu: 2; PAR: 1 (1); npar: 1; or_type_count: 3; rich_type_count: 21; less: 0; or_counts:_3; rich244:_8_8_11_7_10_13_11_9_7_8; r244even: 0; r244odd: 0; reors: 1; em: 0 2; o2: 0 1; t1: 0; t2: 4; t3: 9; t4: 14; u_comps: 3 1; u_morecomps_undiv: 4 6 2 6; rov: 0 0 0 3; ruv: 0 1 6 8; dup_oon: 3 0 0 0; uon: 8 6 0 1; rrn: 0 0 3 8 12; prn: 0 0 0 2 2; has_nz5: 0; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 15; evens: s1s0diff: 10; col: 12; rrn13: 8; ruv13: 9; ruv02: 6; chord_info: (13 11 3) t1(0 0 0) t2(3 1 0) t3(6 3 0) t4(4 7 3); chord_layers: (2 0 0) (2 4 1) (2 4 3) (2 4 4) (2 4 4) (3 1 1); no_2cdcs;
    g2: new o6c4c: or: 03; t1+t3: 09; s0: 13; s1: 24; s2: 1; s2uu: 2; PAR: 0 (0); npar: 0; or_type_count: 3; rich_type_count: 21; less: 0; or_counts:_3; rich244:_11_10_8_7_14_8_11_11_8_8; r244even: 0; r244odd: 0; reors: 1; em: 0 2; o2: 0 2; t1: 0; t2: 3; t3: 9; t4: 15; u_comps: 3 1; u_morecomps_undiv: 4 6 2 6; rov: 0 0 0 3; ruv: 0 0 6 9; dup_oon: 3 0 0 0; uon: 8 6 0 1; rrn: 0 0 2 8 14; prn: 0 0 0 0 3; has_nz5: 0; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 16; evens: s1s0diff: 11; col: 12; rrn13: 8; ruv13: 9; ruv02: 6; chord_info: (13 11 3) t1(0 0 0) t2(2 1 0) t3(6 3 0) t4(5 7 3); chord_layers: (2 0 0) (2 4 1) (2 4 3) (2 4 4) (2 4 4) (3 1 1); no_2cdcs;


TODO: or_type_count
    CONJ: or=2 => or_type_count=1


TODO: o5555-f4c, o222222-f4c
    - what if we have 5 subgraphs?
    - TODO: same question, but for non-oriented covers


TODO: has_nz5=0 => has_nzmodb=0
    - 20.05
        - has_nz5: 0; mismatch: 0; has_nzmod5: 0; has_nzmod6: 0; has_nzmodb: 0;
        - has_nz5: 0; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0;
        - has_nz5: 0; mismatch: 1; has_nzmod5: 1; has_nzmod6: 0; has_nzmodb: 0;
        - has_nz5: 0; mismatch: 1; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 0;
        - has_nz5: 1; mismatch: 0; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 1;
        - has_nz5: 1; mismatch: 1; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 0;
    so, we can have nz5, but still nzmodb=0

    TODO: how much vertices i checked here?


TODO: r244even=1:
    26.05:
        - o2: 0 0, 1 1, 2 2, 3 3
        - em: 0 0, 0 3, 3 0, 0 3
        - s2: 0, 3
        - s1 >= 17
        - or_sum: nope, 0, 10, 14, 15, 17, 20, 25, 30, 35
            - ? 14, 17 - just 2 solutions, 1 for each value


TODO: all t4_chord_count_by_layer: 0 (same as t4(* 0 0))
    - par=0 and par=1, but:
        - r244even=1 => par=1
            - 26.05: yes
                - 9119 cases
                - 7884 SEAL, 6226 has_2cdcs, 1658 have or=3, t1+t3=9, s2=0
                - so, 1235 non-seal cases
    - 26.05: 12915 cases
    - or_sum: nope, 10, 15, 20, 25, 30
    - col: 12, 16, 20
        - we saw this in any_chords_frequency[1] = 0
    - or: 3..11, >= 3
    - s0: 12, 14, 16, 18, 20, 22
    - TODO: is there connection to any_chords_frequency[1]?
        - or maybe some generalization of both cases
        - all t4_chord_count_by_layer: 0 means we don't have t4 chords
        - any_chords_frequency[1] = 0 means
            any_chords_frequency[chord_count]
            that we don't have pm edges which are a chord exactly once
            - here it's enough actually to check t3 and t4
        - so almost got a generalization:
            either t4(* 0 0)
            or t3(* 0 *) t4(* 0 *)
        - if we conside only t4(* 0 *), then there's 1 counterexample with 2 reors:
            or_sum: 21
            26.05g46: new o6c4c: or: 09; t1+t3: 24; s0: 16; s1: 31; s2: 1; s2uu: 2; 
                PAR: 0 (0); npar: 0; rich_type_count: 20; less: 0; or_counts:_7_9; 
                rich244:_11_17_17_12_12_10_11_8_9_17; r244even: 0; r244odd: 0; 
                reors: 2; em: 0 2; o2: 1 2; t1: 3; t2: 5; t3: 21; t4: 10; 
                u_comps: 5 1; u_morecomps_undiv: 4 6 2 6; rov: 0 1 4 4; 
                ruv: 1 0 7 9; dup_oon: 4 4 1 0; uon: 4 6 6 1; rrn: 0 0 6 12 13; 
                prn: 0 0 3 2 3; mismatch: 0; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 1; 
                flow5: u122_u244_u113_o334_o244_u122_o113_u122_u113_u113_u244_o244_u113_u334_o113_o122_u113_u334_o244_o244_o244_u113_u244_u334_u334_u122_; 
                or_sum: 21; or0: sames: rrn024: 19; evens: s1s0diff: 15; col: 12; rrn13: 12; 
                ruv13: 9; ruv02: 8; 
                chord_info: (21 12 6) t1(1 2 0) t2(2 2 1) t3(11 8 2) t4(7 0 3); 
                chord_layers: (2 8 3) (2 8 3) (3 1 0) (3 1 0) (3 3 0) (3 3 0); no_2cdcs;
            26.05g46: new o6c4c: or: 09; t1+t3: 24; s0: 16; s1: 31; s2: 1; s2uu: 2; 
                PAR: 0 (0); npar: 0; rich_type_count: 20; less: 0; or_counts:_7_9; 
                rich244:_11_12_8_11_9_17_12_10_17_17; r244even: 0; r244odd: 0; 
                reors: 2; em: 0 2; o2: 1 2; t1: 3; t2: 5; t3: 21; t4: 10; 
                u_comps: 5 1; u_morecomps_undiv: 4 6 2 6; rov: 0 1 4 4; 
                ruv: 1 0 7 9; dup_oon: 4 4 1 0; uon: 4 6 6 1; rrn: 0 0 6 12 13; 
                prn: 0 0 3 2 3; mismatch: 0; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 1; 
                flow5: u113_u334_u122_o244_o334_u122_o244_u113_u122_u244_u113_o113_u113_u244_o122_o113_o244_o244_u334_u113_u113_o244_u244_u334_u122_u334_; 
                or_sum: 21; or0: sames: rrn024: 19; evens: s1s0diff: 15; col: 12; rrn13: 12; 
                ruv13: 9; ruv02: 8; 
                chord_info: (21 12 6) t1(1 2 0) t2(2 2 1) t3(11 8 2) t4(7 0 3); 
                chord_layers: (2 8 3) (2 8 3) (3 1 0) (3 1 0) (3 3 0) (3 3 0); no_2cdcs;

TODO: t3(* 0 0) or t4(* 0 0):
    - 26.05: 15172 cases
        - or_sum: nope, 0, 10, 15, 20, 25, 30

TODO: t3(* 0 0):
    - col: 12, 14, 16, 20
        - col=14 rarely comes up, when t3(* 0 0)
    - s0=15, s0=17:
        - t1: 0, 2
            - (s0=15, s0=17)
                - t1=2 only 3 cases
                    - chords: t1(0 1 1) for s0=15, t1(1 1 0) for s0=17
                    - <=> t1+t3: 13
        - t1+t3: 0, 9, 13
    - (?conj, TODO) t1=1, 3, 4, 5 (so, t1!=0 and t1!=2) =>
        - s0: 12, 14, 16, 18, 20, 22
        - col: 12, 16, 20
    - or:
        // t3 is forbidden (== or (mod 2))
        or  t3
        0  0
        2  4
        3  9
        4  12
        5  11,13,15
        6  16,18
        7  13,15,17,19,21
        8  14,18,20,22
        9  19,21,23,25,27

        
TODO: has_2cdcs, or_counts:_4_6
    28.05
    - есть ещё rich_type_count = 20
    - 2 more solutions, with 5 reors
    - TODO: compare 28.05g926 and 28.05g987


TODO: rich_type_count = 12
    TODO: check 6c4c solutions

    - 26.05: all of them has_2cdcs!
        g36, g59, g62, g67, g141, g143, g164, g246
        - or_counts:_4_6; and or_counts:_4_6_8;
        - or: 4,6,8
        - s0: 18, 20
        - s1: 24, 26
            - s1s0diff: 4,6,8
        - s2: 3, s2uu: 3
        - em: 3 3
        - o2: 0 0 and o2: 2 2
        - taken: 9 9 and taken: 10 10
        - t3: 12,14,16,18
        - t4: 8,10,12,14
        - col: 12
        - chords: t3(* 0 0) + t4(* 0 0)
            - so, no rich chords
        - mismatch 0 => no flow (has_nzmodb=0)
        - (has_2cdcs) mismatch 1 => has_nzmod5=1, has_nzmod6=0
  
    - 24.05: g8
        TODO

    - 28.05
        g126, g575, g733, g746, g850, g880, g902, g1047, g1067, g1164,
        g1330, g1507, g1530, g1633, g1634, g1640, g1644, g1647, g1650,
        g1685, g1760, g1829, g1843, g1857, g1879, g2063, g2140, g2261,
        g2264, g2652
        - conj: all of them has_2cdcs
        - conj: or_counts:_4_6; and or_counts:_4_6_8;
        - conj: no rich chords
        - or: 4,6,8
        - s0: 18, 20, 22
        - s1: 24, 26
            - s1s0diff: 2,4,6,8
        - s2: 3, s2uu: 3
        - em: 3 3
        - o2: 0 0, 1 1, 2 2
        - taken: 9 9, 9 11, 10 10, 11 11
        - t3: 12,14,16,18
        - t4: 8,10,12,14
        - col: 12
        - mismatch 0 => no flow (has_nzmodb=0)
        - (has_2cdcs) mismatch 1 => has_nzmod5=1, has_nzmod6=0


TODO: ? has_2cdcs, s1 != 18
    - check both 6c4c, and o6c4c


TODO: or=0, col=12 always?


TODO: or=0 + s0 even (+or=2, s2=3, s0 even?), vs has_2cdcs
    - these 2 cases are very similar, right?
    - what is similar:
        - both have
            - s2uu=3
            - r244even=1
            - t4 even
            - or_sum % 5
    - some differences:
        - has_2cdcs makes sense for 6c4c, but or=0 probably doesn't
        - has_2cdcs has or >= 3
        - s1 is even for or=0, could be anything for has_2cdcs
        - s1 >= 22 for or=0, s1 >= 17 for has_2cdcs
        - mismatch=0 for or=0, could be anything for has_2cdcs
        - ? em: 0 3 and em: 3 3 for has_2cdcs, but em: 3 3 for or=0
        - o2: 0 0 for or=0, but o2: 0 0, o2: 1 1 and o2: 2 2 for has_2cdcs



TODO: or=0, s1
    20.05: 22
    22.05: 24,26,28
    24.05: 24,25,27,28,29,31
    26.05: 22,24,26,28,29,30,31,32,33
    28.05: 22,24,26,27,28,29,30,31,32,33,34,35,36,37,38
    ? conj: s1 >= 22?
    - idea is that all of them are related to 20.05g5 actually
    s1 <= 30-8, 33-5, 36-5, 39-6, 42-4, ...?


TODO: what about small number of poor edges?
    - it's possible to have 1 poor edge (prn: 0 0 0 0 1)


TODO: strong Petersen colouring
    - or = ?
    - s0 = 12?
    - s1 = ?
    - s2 = ?


TODO: r244even: 1;
    26.05:
        almost all are par=1
        where par=0 we have
            small reors, \in [1, 2]
            везде rov[0]=0
            rrn[0]=0
            prn[0]=0
            mismatch=0
            has_nzmod5: 0
            has_nzmod6: 1
            has_nzmodb: 0
            - and all this stuff still doesn't give us only par=0 solutions


TODO: check 244-flows for each piece of landscape
    - TODO: o6c4c in general - maybe there's some restriction here already?
    - TODO: or=0
        r244even: 1 or r244odd: 1
        depends on s0 or s1 oddness
    - TODO: has_2cdcs
        r244even: 1
    - TODO: or=2
        s2=3 behaves same as or=0 case
        s2=1 and s2=2 both have "r244even: 0; r244odd: 0"


- TODO: s2uu=3
    - parity=0 is around 1-2% here


- TODO: or=0, s2=3:
    - 3 crucial ingredients: having 6c4c, having orientation, being a rich edge

    - look at rich edges in each PM
    - we have it twice as PM-edge
    - check it's neighbour edges
    - we know that orientations switch between 2 layers, where this rich edge is PM-edge
    - actually, for has_2cdcs s2uu=3 always, so this line of reasoning seems promising
    - although orientation also switches for poor PM-edges, so we need something more
    - we need richness


- TODO: or=0, circuits:
    - TODO: circuits with length 5 - how many rich edges they have?


TODO: "s1s0diff <= 0", maybe we need to check "s1-s0-or <= k"?


TODO: has_2cdcs, "or-s1+s0":
    - 26.05
    or  s1s0diff
     3  -3,-1,1,3,  5,  7,  9,   11
     4            4,  6,  8
     5  -3,-1,1,3,  5,  7,  9,   11,   13,   15
     6            4,  6,  8,  10,   12,   14
     7          3,  5,  7,  9,   11,   13,   15,   17,19
     8            4,  6,      10,   12,   14,   16
     9                           11,   13,   15,   17

    or-s1+s0: 8,6,4,2,0,-2,-4,-6,-8,-10,-12
    most popular: -2, -4
    extreme cases:
        or: 7, s1s0diff: 19, or-s1+s0=-12
            g277
            g277: new o6c4c: or: 07; t1+t3: 19; s0: 12; s1: 31; s2: 0; s2uu: 3; PAR: 1 (1); npar: 1; or_counts:_7; reors: 1; em: 0 3; o2: 2 2; t1: 2; t2: 6; t3: 17; t4: 14; u_comps: 8 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 4 3; ruv: 0 0 12 7; oon: 3 4 0 0; uon: 4 14 0 1; rrn: 0 0 8 16 7; prn: 0 0 0 0 8; mismatch: 0; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 1; flow5: u244_u244_o334_u334_u122_u113_u334_o122_u122_u122_u334_u334_o122_o334_o113_o334_u244_u122_o113_u122_u244_u334_u113_u113_u122_u244_; or_sum: 20; or0: sames: rrn024: 15; evens: s1s0diff: 19; col: 12; rrn13: 16; ruv13: 7; ruv02: 12; chord_info: (17 0 22) t1(0 0 2) t2(4 0 2) t3(9 0 8) t4(4 0 10); chord_layers: (2 6 2) (2 6 2) (2 8 2) (2 8 4) (2 8 5) (2 8 5); has_2cdcs; taken: 6 6; t5: 4 2; SEAL;
        or: 5, s1s0diff: -3, or-s1+s0=8
            g168
            g168: new o6c4c: or: 05; t1+t3: 13; s0: 20; s1: 17; s2: 0; s2uu: 3; PAR: 1 (1); npar: 1; or_counts:_3_5; reors: 56; em: 0 3; o2: 2 2; t1: 2; t2: 20; t3: 11; t4: 6; u_comps: 2 2; u_morecomps_undiv: 0 2 2 4; rov: 0 1 2 2; ruv: 10 5 0 6; oon: 2 2 1 0; uon: 10 11 0 0; rrn: 1 2 2 2 10; prn: 10 10 0 2 0; mismatch: 1; has_nzmod5: 1; has_nzmod6: 0; has_nzmodb: 0; flow5: u244_o334_u122_u244_u334_u113_u244_u113_u113_u244_u244_o122_u113_u334_o334_u113_o334_u113_u122_u113_u244_u122_u122_u244_o244_u113_; or_sum: 15; or0: sames: rrn024: 13; evens: s1s0diff: -3; col: 12; rrn13: 4; ruv13: 11; ruv02: 10; chord_info: (34 0 5) t1(1 0 1) t2(16 0 4) t3(11 0 0) t4(6 0 0); chord_layers: (3 1 0) (3 1 0) (3 4 0) (3 4 0) (4 0 0) (4 0 0); has_2cdcs; taken: 10 10; t5: 12 8; SEAL;

        conj: ruv[0]: 2,4,6,8,10,12,14
            number of unoriented vertices,
            with all its edges being poor


DONE: "or-s1+s0":
    - Petersen graph:
        3-15+12=0
    - 26.05
    or  s1s0diff
     0                           8,  10,   12,   14,   16,   18
     .
     2                           8,9,10,11,12,13,14,15,16,17,18,19,20,21
     3  -3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,   23
     4                   4,  6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
     5  -3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
     6                 3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,   24
     7                 3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
     8                   4,  6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
     9                       6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    10                                  11,12,13,14,15,16,17,18,19,20,21,22
    11                             9,10,11,12,13,14,15,16,17,18,19,20,21
    12                                     12,13,14,15,16,17,18,19
    13                                     12
        -20<=or-s1+s0<=8

    - 28.05
        -22<=or-s1+s0<=14
    or  s1s0diff
     0   6,8,10,12,14,16,18,20,22
     .
     2   6..23
     3  -5..24
     4   2..24
     5  -5..26
     6   1..26
     7  -1..28
     8   2,4..26
     9  -1..26
    10   6..26
    11  -1,1..25
    12   6,8..24
    13  -1..1,3..24
    14   10,13..20
    15   5,7,8,9,11,12,15,16
    16   10,12,14,16,18,20
     .
     .
    19   7,11,15



TODO: or=2, formula:
    - 26.05
    s2  s1s0diff
     3      10,   12,   14,   16,   18,   20
     2    9,   11,   13,   15,   17,   19,   21
     1  8,  10,   12,   14,   16,   18,   20


TODO: search snarks, where or_sum is always divisible by 5
    - e. g. 28.05g712


TODO: 28.05g712
    - it's definitely highly symmetric
    - TODO: is it a flower snark?
    28.05: or: 19 - maximum number, only 1 such snark
    - 556 o6c4c solutions with such number of oriented vertices
    - or_sum: nope; 15; 20; 25; 30; 35; 40; 45; 50; 55;


TODO: maximum number of oriented vertices
    - 26.05: 13
    - 28.05: 19; that's super interesting
        only 1 snark:
        g712 - 556 o6c4c solutions with such number of oriented vertices
        it's definitely highly symmetric
        or_sum: 40,45,50,55


TODO: write out pairs of snarks, which I think could be related to each other
    - 26.05:
        - g155, g277
            - they both have maximum s1s0diff = 18 when or=0
        - g13, g43
            - they both have minimum s1s0diff = 8 when or=0
    - 28.08:
        - 28.05g926, 28.05g987
            - they both have has_2cdcs, or_counts:_4_6; rich_type_count != 12
            - rich_type_count = 20


or=0 => s2=3:
    - то есть в любом perfect matching'е
        чётное число rich рёбер
    - в графе Петерсена это не так, там всегда нечётное число
        - но там есть 3 oriented вершины
    - 26.05, s1s0diff: between 8 and 18
    - 

    s0 s1
    12    24,26,28
    13      25,27,29,31,33
    14 22,24,26,28,30,32,34
    15      25,27,29,31,33,35
    16 22,24,26,28,30,32,34,36,38
    17         27,29,31,33,35
    18             30,32,34,36

    - DONE: how does formula work in o5cdc case?
        - v-e+f=2-2g
        v - vertices
        e - edges
        f - faces
        h - genus/handles
        96555
        v=10
        e=15
        f=5
        h=1: 10-15+5=0
        so, we actually have an inequality for snarks:
        v-e+f<=0 (because we can't embed on a plane/sphere)


цели:
    - как альтернативно посчитать величину (s1-s0)/2
        s0 — number of circuits (circuit is a connected cycle; there are 12 in the solution for Petersen graph)
        s1 — number of rich edges (15 for Petersen graph)
    - понять почему s2 = 3
        s2 — half of the number of perfect matchings with even number of rich edges (so in general it’s equal to 0, 1, 2 or 3) (0 for Petersen graph)
    - почему or != 1


important stuff:
    t1 = 0
    t3 = 0
    остаются только t2 и t4
    t1 — number of poor edges which connect oriented with oriented vertex
    t2 — number of poor edges which connect non-oriented with non-oriented vertex
    t3 — number of rich edges which connect oriented with non-oriented vertex
    t4 — number of rich edges which connect non-oriented with non-oriented vertex

    - rules for creating new parity:
        - i can use or, s0, s1, s2, t1, ..., t5, ...
        - following are forbidden:
            - t3 is (kinda) forbidden (== or (mod 2))
                - or = t1 + (t3-t1)/3
                - 3*or = 3t1 + t3 - t1 = 2*t1 + t3
            - t4 is forbidden, t4 = s1 - t3
            - t2 is forbidden, t2 = e - t1 - t3 - t4
            - circuits_even_poor is forbidden (== s0 (mod 2))
            - and probably other circuits_even/odd_poor/rich counts also
            - (even_t3_matchings + or) % 2 == 1

    - rov - это oon наоборот


awk 'BEGIN {OFS=FS=" "} {print $54}'


done:
    - удивительно; хотя на самом деле это самая сложная штука в анализе or0 в o6c4c
        - на 26.05 any_chords_frequency[0] >= s0
        - на 28.05 это далеко не так
        - по-хорошему надо всё тестить на 28.05

    - сколько бывает t2 t2 t2 вершин?
        - изредка бывают
            - 22.05: g13
            g13: new o6c4c: or: 00; t1+t3: 00; s0: 14; s1: 26; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 7; t3: 0; t4: 26; comps: 0 6 0 6 0 6 0 6; rov: 0 0 0 0; orverts: ; or0: sum: 0; (2 7) (2 5) (2 5) (2 7) (3 11) (3 11) ; vertices descriptions: u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t2 t2 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4

    - обязательно ли существует слой, где все рёбра в perfect matching - rich?
        - нет, необязательно - в 20.05g5-48 такого слоя нет

    - есть ощущение, что решения ходят парами, или иногда четвёрками
        - хотя для 22.05 есть только одно решение, где есть вершина t2 t2 t2
        - но до 24.05 включительно вроде всё так
        - но вроде на 26.05 это не так - у g13 всего 1 решение
            g13: new o6c4c: or: 00; t1+t3: 00; s0: 14; s1: 22; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 17; t3: 0; t4: 22; comps: 0 6 0 2 0 4 0 4; rov: 0 0 0 0; orverts: ; or0: sum: -8; (2 5) (3 10) (2 5) (3 12) (2 9) (2 9) ; vertices descriptions: u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t2 t2 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t2 t2 ; u t2 t2 t2 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t2 t2 ; u t4 t4 t4 ; u t4 t4 t4

    - у каких графов есть or=0 решения?
        20.05: g5
        22.05: g13, g15, g16
        24.05: g14, g24, g25, g26, g29, g33
        26.05: g13, g30, g38, g39, g43, g79, g82, g131, g149, g150, g151, g154, g155, g157, g162, g164, g169, g204, g211, g277
        28.05: g13, g23, g53, g54, g81, g86, g116, g118, g124, g125, g126, g133, g134, g136, g137, g138, g145, g147, g158, g171, g175, g185, g186, g189, g191, g206, g210, g223, g225, g233, g238, g239, g265, g266, g281, g285, g344, g351, g382, g388, g400, g401, g404, g437, g442, g443, g450, g453, g459, g465, g488, g494, g495, g502, g523, g524, g525, g526, g536, g539, g540, g591, g601, g623, g635, g639, g640, g650, g661, g680, g692, g697, g734, g738, g748, g755, g756, g760, g812, g843, g857, g871, g879, g922, g972, g989, g1007, g1008, g1016, g1032, g1044, g1052, g1058, g1064, g1068, g1092, g1103, g1160, g1164, g1181, g1187, g1194, g1198, g1205, g1236, g1271, g1272, g1317, g1349, g1351, g1352, g1353, g1379, g1383, g1384, g1418, g1426, g1439, g1472, g1489, g1501, g1507, g1541, g1542, g1618, g1668, g1683, g1685, g1691, g1711, g1712, g1718, g1720, g1721, g1722, g1729, g1780, g1787, g1798, g1803, g1810, g1820, g1829, g1833, g1843, g1846, g1860, g1869, g1871, g1872, g1874, g1876, g1877, g1879, g1916, g1918, g1948, g1949, g1956, g1957, g1968, g1973, g1980, g1987, g1989, g2002, g2003, g2037, g2038, g2042, g2043, g2045, g2051, g2117, g2121, g2137, g2140, g2146, g2148, g2150, g2168, g2171, g2210, g2211, g2216, g2221, g2233, g2248, g2250, g2251, g2268, g2271, g2279, g2281, g2283, g2289, g2299, g2300, g2303, g2305, g2313, g2323, g2331, g2336, g2351, g2360, g2361, g2371, g2372, g2391, g2394, g2398, g2414, g2470, g2516, g2533, g2569, g2570, g2571, g2572, g2573, g2576, g2577, g2582, g2584, g2635, g2664, g2665, g2670, g2671, g2705, g2711, g2712, g2713, g2714, g2724, g2736, g2743, g2770, g2774, g2782, g2788, g2799, g2811, g2812, g2821, g2839, g2840

    - odd_t2_2_factors или 0, или 3
        - просто зависит от чётности s1

    - chords counts
        - any_chords_frequency
        - poor_chords_frequency
        - rich_chords_frequency
        - t1_, t2_, t3_, t4_

    - попробовать уменьшить s1, с сохранением чётности
        - s1 — number of rich edges (15 for Petersen graph)
        - s1 = t4
        - надо поискать что-то odd
        - хорды/антихорды не помогают пока что
        - что если посмотреть - что оно соединяет? это ещё 4 ребра
            - посчитать число poor или rich соседей
            - тогда каждое соседнее ребро учтём 3 раза

    - любопытная штука:
        28.05:
            s0: 12; cel: 0;
            s0: 13; cel: 1;
            s0: 14; cel: 2;
            s0: 15; cel: 3;
            s0: 16; cel: 2 или 4
            s0: 17; cel: 3 или 5
            s0: 18; cel: 6;
        26.05:
            s0: 13; cel: 1;
            s0: 14; cel: 2;
            s0: 15; cel: 3;
            s0: 16; cel: 4;
            s0: 17; cel: 3 или 5
        ну хотя это соответствует тому, что col либо 12, либо (изредка?) 14

    - по-моему когда в слое 2 circuit'а - antichord count в слое обязательно нечётный
        - но наверно это более-менее очевидно
        - если бы их было чётное число - тогда мы можем найти в графе чётный цикл, по всему графу
        - что для снарков вроде неверно

    - кажется неплохая идея посчитать s1-s0-ruv[3]
        - на 26.05 это число >= 0, и относительно маленькое
        - что ещё приятно:
            - ruv[3] про вершины
            - s1 про рёбра
            - s0 про "грани"
            - есть чередование знаков: -ruv[3]+s1-s0
        - это число всё ещё не ноль (а ещё бывает нечётным)
            - чего-то не достаёт, либо остаток надо как-то интерпретировать дополнительно, как "эйлерову" характеристику
            - может это curvature? как в теореме Gauss-Bonnet
        - если глянуть (ruv[1]+ruv[3])-s1+s0 на 26.05, то получим числа
            -6, -4, -2, 0, 2, 4
        - genus = 1 - ((ruv[1]+ruv[3]) - s1 + s0)/2
            genus:
                20.05: 1
                22.05: 0, 1, 2
                24.05: 0, 1, 2, 3
                26.05: -1, 0, 1, 2, 3, 4
                28.05: -4, -2, -1, 0, 1, 2, 3, 4, 5
        - можно ещё попробовать заменить s0 на circuits_even_rich
            - тогда все переменные зависят от rich
            - g2 = 1 - ((ruv[1]+ruv[3]) - s1 + circuits_even_rich)/2
                - 20.05: 6
                - 22.05: 4,6,7,8
                - 24.05: 3,4,6,7,8
                - 26.05: 3,4,5,6,7,8,9
                - 28.05: -4,2,3,4,5,6,7,8,9,10,11
            - g3 = 1 - ((ruv[1]+ruv[3]) - s1 + circuits_even_poor)/2
                - 20.05: 4
                - 22.05: 0,2,3,4,6
                - 24.05: 3,4,5,6
                - 26.05: 0,1,2,3,4,5,6,7
                - 28.05: -1,0,1,2,3,4,5,6,7,8,9
        - кажется продуктивным также глянуть сам perfect matching
            - по крайней мере, скажем, пары рёбер, которые встречаются вместе
            - чем меньше genus, тем больше таких пар
        - ещё возможно интересные числа:
            - s0 % 2 или s1 % 2:
                - rrn024
                - cel
            - evens:
                - rrn13
                - ruv13/ruv02
        - s1 = (ruv[1] + 2*ruv[2] + 3*ruv[3])/2

    - вероятно нерелевантные числа
        - cep/cer:
            22.05
            g16: new o6c4c: or: 00; s0: 12; s1: 24; s2: 3; em: 3 3; o2: 0 0; t2: 9; ruv: 0 5 8 9; or0: genus: 0; cer: 4; cep: 8; cel: 0; rrn024: 12; evens: s1s0diff: 12; rrn13: 12; ruv13: 14; ruv02: 8; chord_info: (14 10 9) (4 4 1) (10 6 8) (2 5) (2 9) (2 5) (2 9) (2 5) (2 5) ; rrn: 0 2 5 10 7; SEAL;
            g16: new o6c4c: or: 00; s0: 12; s1: 24; s2: 3; em: 3 3; o2: 0 0; t2: 9; ruv: 0 5 8 9; or0: genus: 0; cer: 0; cep: 12; cel: 0; rrn024: 12; evens: s1s0diff: 12; rrn13: 12; ruv13: 14; ruv02: 8; chord_info: (14 10 9) (4 4 1) (10 6 8) (2 5) (2 5) (2 9) (2 5) (2 5) (2 9) ; rrn: 0 4 3 8 9; SEAL;
            - кажется у меня с тех пор появились более интересные примеры
        - cep/cop
            28.05
            g1668: new o6c4c: or: 00; s0: 18; s1: 32; s2: 3; t2: 10; u_comps: 7 1; u_morecomps_undiv: 2 6 2 6; ruv: 0 3 14 11; rrn: 0 2 6 16 8; prn: 0 0 1 4 5; or0: genus: 1; sames: cep: 12; cel: 6; rrn024: 14; evens: s1s0diff: 14; cop: 6; col: 12; rrn13: 18; ruv13: 14; ruv02: 14; chord_info: (24 17 1) (7 3 0) (17 14 1); chord_layers: (3 8) (3 10) (3 11) (3 11) (3 12) (3 13) ; SEAL;
            g1668: new o6c4c: or: 00; s0: 18; s1: 32; s2: 3; t2: 10; u_comps: 7 1; u_morecomps_undiv: 4 6 2 6; ruv: 0 3 14 11; rrn: 0 2 6 16 8; prn: 0 0 1 4 5; or0: genus: 1; sames: cep: 10; cel: 6; rrn024: 14; evens: s1s0diff: 14; cop: 8; col: 12; rrn13: 18; ruv13: 14; ruv02: 14; chord_info: (24 17 1) (7 3 0) (17 14 1); chord_layers: (3 8) (3 10) (3 11) (3 11) (3 12) (3 13) ; SEAL;

    - чекнуть total_poor_comps
        - до 26.05: 3, 5, 6, 7, 8
        - 28.05: 4, 5, 6, 7, 8, 9, 10
        - для s0 это число сходу ничего не даёт

    - odd_rich_comps_matching may have any parity
        - но в or0 он всегда чётный?
        - нет!
        28.05g2283: new o6c4c: or: 00; s0: 16; s1: 28; s2: 3; em: 3 3; o2: 0 0; t2: 14; u_comps: 9 2; u_morecomps_undiv: 4 0 2 1; ruv: 1 3 19 5; rrn: 0 3 13 9 3; prn: 0 1 2 5 6; or0: genus: 3; sames: cep: 10; cel: 4; rrn024: 16; evens: s1s0diff: 12; cop: 6; col: 12; rrn13: 12; ruv13: 8; ruv02: 20; chord_info: (23 16 3) (9 4 1) (14 12 2); chord_layers: (2 11) (2 11) (4 13) (2 7) (4 13) (2 7) ; SEAL;

    - бывает ли, что chord_info совпадает, а s1s0diff разный?
        - из chord_info можно вытащить s1, поэтому речь скорее про разный s0
        (в целом chord_info плохо ужимает - на 870 решений на 28.05 получаем 420 разных chord_info)
        - да, бывает, 28.05
            chord_info: (19 19 4) (6 3 0) (13 16 4); s0: 15;
            chord_info: (19 19 4) (6 3 0) (13 16 4); s0: 17;
            g2533: new o6c4c: or: 00; s0: 15; s1: 33; s2: 3; t2: 9; u_comps: 6 1; u_morecomps_undiv: 2 6 2 6; ruv: 0 3 12 13; rrn: 0 1 7 13 12; prn: 0 0 1 4 4; or0: genus: 2; sames: cep: 9; cel: 3; rrn024: 19; evens: s1s0diff: 18; cop: 6; col: 12; rrn13: 14; ruv13: 16; ruv02: 12; chord_info: (19 19 4) (6 3 0) (13 16 4); chord_layers: (2 5) (2 9) (2 9) (3 9) (3 12) (3 13) ; SEAL;
            g1721: new o6c4c: or: 00; s0: 17; s1: 33; s2: 3; t2: 9; u_comps: 6 1; u_morecomps_undiv: 4 6 0 6; ruv: 0 3 12 13; rrn: 0 0 7 16 10; prn: 0 0 0 6 3; or0: genus: 1; sames: cep: 11; cel: 5; rrn024: 17; evens: s1s0diff: 16; cop: 6; col: 12; rrn13: 16; ruv13: 16; ruv02: 12; chord_info: (19 19 4) (6 3 0) (13 16 4); chord_layers: (2 5) (2 5) (3 10) (3 12) (3 12) (4 13) ; SEAL;
            
            chord_info: (19 19 4) (8 3 0) (11 16 4); s0: 15;
            chord_info: (19 19 4) (8 3 0) (11 16 4); s0: 17;
            g2533: new o6c4c: or: 00; s0: 15; s1: 31; s2: 3; t2: 11; u_comps: 8 2; u_morecomps_undiv: 2 2 2 4; ruv: 0 3 16 9; rrn: 1 0 9 16 5; prn: 0 0 1 4 6; or0: genus: 3; sames: cep: 9; cel: 3; rrn024: 15; evens: s1s0diff: 16; cop: 6; col: 12; rrn13: 16; ruv13: 12; ruv02: 16; chord_info: (19 19 4) (8 3 0) (11 16 4); chord_layers: (2 5) (2 9) (2 9) (3 9) (3 12) (3 13) ; SEAL;
            g1721: new o6c4c: or: 00; s0: 17; s1: 31; s2: 3; t2: 11; u_comps: 6 2; u_morecomps_undiv: 2 0 2 0; ruv: 0 5 12 11; rrn: 0 1 10 11 9; prn: 0 0 1 8 2; or0: genus: 0; sames: cep: 11; cel: 5; rrn024: 19; evens: s1s0diff: 14; cop: 6; col: 12; rrn13: 12; ruv13: 16; ruv02: 12; chord_info: (19 19 4) (8 3 0) (11 16 4); chord_layers: (2 5) (2 5) (3 10) (3 12) (3 12) (4 13) ; SEAL;
        - если убрать из рассмотрения cop/cep/col/cel, то надо признать, что я не знаю как отличить эти решения друг от друга
        - в плане - какая статистика бы задетектила увеличение s0 на 2
        - ну если только ещё и chord_layers как-то начать учитывать, но это похоже на читерство
        s0: 15; ruv: 0 3 12 13; rrn: 0 1 7 13 12; prn: 0 0 1 4 4
        vs
        s0: 17; ruv: 0 3 12 13; rrn: 0 0 7 16 10; prn: 0 0 0 6 3

        s0: 15; ruv: 0 3 16  9; rrn: 1 0  9 16 5; prn: 0 0 1 4 6
        vs
        s0: 17; ruv: 0 5 12 11; rrn: 0 1 10 11 9; prn: 0 0 1 8 2

        - ruv[1] + ruv[2] + prn[3]?


    - s0=12; => в каждом слое 2 circuits
        - 28.05
            s1: 24; chord_layers: 5) 5) 5) 7) 9) 11) 
            s1: 24; chord_layers: 5) 5) 9) 9) 9) 9)
            s1: 24; chord_layers: 7) 7) 7) 7) 7) 7)

            s1: 26; chord_layers: 5) 5) 5) 5) 9) 9)
            s1: 26; chord_layers: 5) 5) 5) 7) 9) 11)
            s1: 26; chord_layers: 5) 5) 5) 7) 9) 13)
                - вот эти два любопытны кейса
            s1: 26; chord_layers: 5) 5) 5) 9) 9) 9)

            s1: 28; chord_layers: 5) 5) 5) 5) 7) 7)
            s1: 28; chord_layers: 5) 5) 5) 5) 9) 9)
            s1: 28; chord_layers: 5) 5) 5) 7) 9) 13)
            s1: 28; chord_layers: 5) 5) 5) 9) 9) 9)
            
            s1: 30; chord_layers: 5) 5) 5) 5) 7) 7)

            s1: 32; chord_layers: 5) 5) 5) 5) 7) 7)
        - интересно, что есть какая-то непрямая зависимость
        - интересно, что на 24.05 и 26.05 нет s0=12
            UPD: тут что-то неверно, на 26.05 есть 5425 rows с s0=12
        - на 22.05 мало примеров
            s1: 24; chord_layers: 5) 5) 5) 5) 9) 9)

    - prn: 0 0 0 0 .
        - 28.05: s0 = 15,16,17,18
            в целом бывает 12,13,14,15,16,17,18

    - or > 0:
        - глянуть зависимость col от or
        - ну так, непонятно

    - до 28.05: col либо 12, либо (изредка?) 14
        - глянуть or > 0 решения
        - на 26.05 бывает 12,14,16,18,20

    - фильтр на решения, где есть хотя бы 2 разных ориентации
        - npar = (s0 + s1 + oriented_vertices.size() + even_t4_matchings) % 2
        - 24.05: 1128 после sort|uniq; из них 1028 имеют npar=1; 91%
        - 26.05: 7359 после sort|uniq; из них 5941 имеют npar=1; 80%

    - or > 0; npar; чекнуть подграф из t3 рёбер
        - мотивация - idx30npar01.txt, 30.05, onlyrich, npar 0 vs 1, g14094 vs g13042
        - мы знаем, что подграф из t3 рёбер склеен из чётных цепей
        - единственное отличие между этими 30.05 графами, которое я так сходу вижу - это что
            - в npar=1 случае общие длины путей-кусочков тоже все чётные (3 куска)
            - в npar=0 случае - они все нечётной длины (3 куска)
        - ещё мотивация - or=0 - подграф пустой
        - ещё мотивация - or=2 - в подграфе нет циклов; потому что иначе он бы имел длину 4
        - 18.05, or = 3, npar = 0
            - ничего сходу интересного не вижу

    - показалось, что как будто бы onlyrich => o6c4c
        - но нет, на 30.05 g3269 имеет 6c4c onlyrich, но нет o6c4c

    - onlyrich, 30.05
        - глянул какие бывают rich рёбра
            в плане того - в каком слое сидит rich ребро + его соседи
            всего таких рёбер разных мб 45
            минимально надо 30 вершин
            на o6c4c: 27, 31, 33, 34, 35, 36
            даже близко не подбирается к 45
        - глянул 6c4c решения - то же самое, те же числа (но бывают не только o6c4c решения; 29 vs 16 графов)

    - or > 0, малый rich_type_count
        - оказывается rich_type_count бывает 12 (меньше не бывает)
            - который вроде бы всегда в SEAL
            - todo: видимо с чем-то совпадает
        conjectures
            - s1s0diff <= 0
                - 28.05
                    - rich_type_count: 15,16,17,18
        26.05:
            - rich_type_count <= 17 (все кейсы ломаются на rich_type_count = 18)
                - npar = 1
                - s0: 12,14,16,18,20,22
                - or_sum: nope, 5, 10, 15, 20, 25, 30
            - rich_type_count <= 14:
                - or: 4, 6, 8
                - s2: 3
                - s1: 24, 26, 28, 30, 32
                - even_t3_matchings: 3
                - even_t4_matchings: 3
                - odd_*_2_factors: 0 0, 1 1, 2 2
                - t3: 12, 14, 16, 18, 20, 22
                - t4: 8, 10, 12, 14, 16, 18
        28.05:
            - npar = 1 (rich_type_count <= 16)
            - s0: 12,14,16,18,20,22,24 (rich_type_count <= 16)
            - or_sum: nope, 0, 5, 10, 15, 20, 25, 30, 35, 40 (rich_type_count <= 17)
            - rich_type_count <= 13:
                - or: 4, 6, 8 (+10 на rich_type_count = 14)
                - s2: 3
                - s1: 24, 26
                - even_t3_matchings: 3
                - even_t4_matchings: 3
                - odd_*_2_factors: 0 0, 1 1, 2 2
                - t3: 12, 14, 16, 18
                - t4: 8, 10, 12, 14
            - rich_type_count=12:
                or_counts:_4_6;
                or_counts:_4_6_8;
            =13
                or_counts:_4_6;
            =14:
                or_counts:_10;
                or_counts:_4;
                or_counts:_4_6;
                or_counts:_4_6_8;
                or_counts:_6;
                or_counts:_6_8;
                or_counts:_6_8_10;
                or_counts:_8;
                or_counts:_8_10;
        - rich_type_count = 12:
            - 26.05
                - u_comps: 3 2; u_morecomps_undiv: 2 0 2 0;
                    u_comps: 4 2; u_morecomps_undiv: 6 0 0 0;
                    u_comps: 4 3; u_morecomps_undiv: 4 4 2 2;
            - 28.05 побогаче
                - u_comps: 3 2; u_morecomps_undiv: 2 0 2 0;
                    u_comps: 4 2; u_morecomps_undiv: 6 0 0 0;
                    u_comps: 4 3; u_morecomps_undiv: 4 4 2 2;
                    u_comps: 4 4; u_morecomps_undiv: 4 0 2 0;
                    u_comps: 4 4; u_morecomps_undiv: 4 0 4 0;
                    u_comps: 5 2; u_morecomps_undiv: 0 0 4 0;
                    u_comps: 5 3; u_morecomps_undiv: 0 4 4 2;

in progress:
    - план по доказательству s2=3:
        - как с теоремой про another hamiltonian cycle
            - Let 𝐺 be a graph in which every vertex has odd degree. Show that every edge of 𝐺 lies on an even number of Hamilton cycles.
                - Let e={u,v_0} be an edge in the graph G, whose vertices all have odd degree.
                - Let P be the set of Hamilton paths that begin [u,e,v_0, ...].
                - P will be the vertex set of a new graph H.
                - Suppose that p \in P is [u,e,v_0,e_0,v_1,...,e_{n-1},v_n].
                - If {v_n,v_k} is an edge,
                    - for some k<n-1 we can remove the edge e_k={v_k,v_{k+1}} 
                    - and add the edge e'={v_n,v_k} to get 
                    - q=[u,e,v,e_0,v_1,...,v_k,e',v_n,e_{n-1},v_{n-1},...,v_{k+1}]
                    - another path in P.
                - Note that p can be obtained from q by a similar operation.
                - If p_1,p_2 \in P, {p_1,p_2} is an edge of H iff each can be obtained from the other as q was obtained from p.
                - Fix p \in P as above.
                - Then deg_H(p) is just the number of edges {v_n,v_k} with k<n-1.
                - This accounts for every edge of G incident at v_n except e_{n-1}={v_{n-1},v_n} and possibly {v_n,u}.
                - If {v_n,u} is an edge of G, then p is part of a Hamilton cycle through e, and deg_H(p)=deg_G(v_n)-2, which is odd;
                - otherwise, p is not part of a Hamilton cycle through e,
                - and deg_H(p)=deg_G(v_n)-1, which is even.
                - H must have an even number of odd vertices, so G must have an even number of Hamilton cycles through the edge e.
        - нужно построить какой-то граф
            - идея док-ва выше в том, что
                - есть граф, и есть ребро
                - вершины - это гамильтоновы пути
                - рёбра - это "морфизмы" между путями
                - какие-то из вершин на самом деле отвечают ещё и за гамильтоновы циклы
                - на самом деле это ровно вершины нечётной степени
                - мы знаем, что их чётное число
            - значит нужны вершины и рёбра-переходы
            - в вершинах с нечётной степенью - видимо нужные мне rich рёбра (или poor рёбра)
                - видимо надо зафиксировать perfect matching
                ? глянуть локально кусок вокруг perfect matching ребра
        
        - done: кстати, мб всё гораздо проще
            - может poor рёбра в perfect matching просто ходят парами
                - а именно - p из pm, дальше двигаемся по rich ребру из какого-то circuit (+ мб сколько-то poor рёбер вдоль этого circuit), дальше снова p из pm
            - проверил на 20.05g5
            - done: а может это даёт и ориентацию на poor рёбрах из perfect matching'а?
                - вроде не даёт
            - на 24.05g26-8-genus2 это не работает
                - а именно в 6ом слое это не прокатывает
            - также число poor рёбер может быть нечётно
    
        - может rich рёбра в perfect matching ходят парами?
            - done: фиг знает
            - а заодно мб где-то рядом и док-во совпадения чётностей s0 и s1?
            - а может это что-то типа bipartizing matching?

    - есть ли circuits, где число rich рёбер <= 1 ?
        - на 24.05 таких нет
        - на 26.05 таких нет
        - а какой минимум rich рёбер бывает в одном circuit?
            - бывает 2, 26.05g149, 26.05g162 (по 2 решения у каждого, и ещё они похожи между графами)

    - было бы прикольно найти 2 похожих по статистикам графа,
        - но с разными genus, или s1s0diff
        - бывают ли одинаковые rrn и ruv, с разными s0?
        - бывают, 26.05
            ruv: 0 1 14 11; rrn: 0 0 7 16 8; prn: 0 0 0 2 6; evens: s1s0diff: 16; cop: 6; col: 12;
            ruv: 0 1 14 11; rrn: 0 0 7 16 8; prn: 0 0 0 2 6; evens: s1s0diff: 18; cop: 6; col: 12;

            ruv: 0 1 14 11; rrn: 0 0 7 16 8; s0: 13;
            ruv: 0 1 14 11; rrn: 0 0 7 16 8; s0: 15;
                g155: new o6c4c: or: 00; s0: 13; s1: 31; s2: 3; em: 3 3; o2: 0 3; t2: 8; u_comps: 7 1; u_morecomps_undiv: 4 6 6 6; ruv: 0 1 14 11; rrn: 0 0 7 16 8; or0: genus: 4; cer: 5; cep: 7; cel: 1; rrn024: 15; evens: s1s0diff: 18; rrn13: 16; ruv13: 12; ruv02: 14; chord_info:
                    (13 15 11) (4 1 3) (9 14 8)
                    (2 5) (2 5) (2 5) (2 9) (2 9) (3 8) ; SEAL;
                g82: new o6c4c: or: 00; s0: 15; s1: 31; s2: 3; em: 3 3; o2: 0 3; t2: 8; u_comps: 7 1; u_morecomps_undiv: 4 6 6 6; ruv: 0 1 14 11; rrn: 0 0 7 16 8; or0: genus: 3; cer: 5; cep: 9; cel: 3; rrn024: 15; evens: s1s0diff: 16; rrn13: 16; ruv13: 12; ruv02: 14; chord_info:
                    (17 14 8) (6 2 0) (11 12 8)
                    (2 5) (2 5) (2 9) (3 8) (3 10) (3 11) ; SEAL;

            ruv: 0 2 12 12; rrn: 0 1 6 13 11; s0: 15;
            ruv: 0 2 12 12; rrn: 0 1 6 13 11; s0: 17;
                g30: new o6c4c: or: 00; s0: 15; s1: 31; s2: 3; em: 3 3; o2: 0 3; t2: 8; u_comps: 6 1; u_morecomps_undiv: 4 6 6 6; ruv: 0 2 12 12; rrn: 0 1 6 13 11; or0: genus: 2; cer: 7; cep: 9; cel: 3; rrn024: 17; evens: s1s0diff: 16; rrn13: 14; ruv13: 14; ruv02: 12; chord_info:
                    (15 16 8) (6 2 0) (9 14 8)
                    (2 5) (2 5) (2 7) (2 7) (3 11) (4 11) ; SEAL;
                g154: new o6c4c: or: 00; s0: 17; s1: 31; s2: 3; em: 3 3; o2: 0 3; t2: 8; u_comps: 6 1; u_morecomps_undiv: 0 6 6 6; ruv: 0 2 12 12; rrn: 0 1 6 13 11; or0: genus: 1; cer: 3; cep: 11; cel: 5; rrn024: 17; evens: s1s0diff: 14; rrn13: 14; ruv13: 14; ruv02: 12; chord_info:
                    (21 14 4) (7 1 0) (14 13 4)
                    (2 5) (3 9) (3 9) (3 10) (3 11) (3 12) ; SEAL;
            
            - видно, что только cep и cel детектят увеличение s0 на 2

            - ещё, 24.05
            ruv: 0 1 12 11; rrn: 0 0 7 12 10; s0: 13;
            ruv: 0 1 12 11; rrn: 0 0 7 12 10; s0: 15;
                g14: new o6c4c: or: 00; s0: 13; s1: 29; s2: 3; em: 3 3; o2: 0 3; t2: 7; u_comps: 6 1; u_morecomps_undiv: 4 6 0 6; ruv: 0 1 12 11; rrn:g14: new o6c4c: or: 00; s0: 13; s1: 29; s2: 3; em: 3 3; o2: 0 3; t2: 7; u_comps: 6 1; u_morecomps_undiv: 4 6 0 6; ruv: 0 1 12 11; rrn: 0 0 7 12 10; or0: genus: 3; cer: 5; cep: 7; cel: 1; rrn024: 17; evens: s1s0diff: 16; rrn13: 12; ruv13: 12; ruv02: 12; chord_info: (15 12 9) (4 2 1) (11 10 8); chord_layers: (2 5) (2 9) (3 9) (2 5) (2 5) (2 9) ; SEAL;

                g26: new o6c4c: or: 00; s0: 15; s1: 29; s2: 3; em: 3 3; o2: 0 3; t2: 7; u_comps: 6 1; u_morecomps_undiv: 4 6 0 6; ruv: 0 1 12 11; rrn: 0 0 7 12 10; or0: genus: 2; cer: 5; cep: 9; cel: 3; rrn024: 17; evens: s1s0diff: 14; rrn13: 12; ruv13: 12; ruv02: 12; chord_info: (17 13 6) (6 1 0) (11 12 6); chord_layers: (3 9) (3 9) (2 9) (3 10) (2 5) (2 5) ; SEAL;

   - у 6c4c решения может быть несколько o6c4c решений
        - если есть or0 - сколько ещё может быть других ориентированний?
        - и какие or числа можно получить?
            22.05
                ors: 0
                ors: 0 6
                ors: 0 8
                ors: 0 10
            24.05: то же, только без ors: 0 10
            26.05:
                ors: 0
                ors: 0 6 8
                ors: 0 8
                ors: 0 10
            28.05
                ors: 0
                ors: 0 6
                ors: 0 6 10
                ors: 0 6 8
                ors: 0 8
                ors: 0 8 10
                ors: 0 8 12
                ors: 0 10
                ors: 0 12
        - conj: интересно, что минимум or вершин после 0 - это 6

    - чекнуть nz5, nz-mod5, nz6, nz-mod6
        - nz-mod5 - интересно
            28.05:
            s0: 16,17 (12-18)
            s1: 27-33 (22, 24, 26-38)
            s1s0diff: 10,12,14,16 (6,8,...,18,20,22)

            26.05:
            s0: 14,16 (13-17)
            s1: 26,28,30 (22,24,26,28-33)
            s1s0diff: 12,14 (8,10,12,14,16,18)

        - как будто nz-mod5 => nz-mod6
            - надо глянуть веса
            - да, веса одни и те же
            - почему-то по факту это вообще просто nz5
            - то есть получается, что nz-mod5 => nz5 => nz6, nz-mod6
            - вид весов:
                28.05
                 1 1 1 2 3 4
                 0 0 1 2 3 4
                 0 0 1 2 4 4
                -4 1 2 2 2 4
                -4 0 0 1 2 3

    - попробуем поменять ориентацию
        - подсчитать и вывести их число
        - глянуть orverts
        - пока ничего больше тут не делал

    - in progress: or > 0
        - глянуть полностью rich графы / onlyrich
            - conj: число вершин имеет вид 4k+2
            - nope: и что npar: 1
                ломается на 30.05!
                g14094: new o6c4c: or: 10; t1+t3: 30; s0: 19; s1: 45; s2: 0; s2uu: 0; npar: 0; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 26; col: 14; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (22 21 2) t2(0 0 0) t4(8 6 1);
                g24295: new o6c4c: or: 10; t1+t3: 30; s0: 19; s1: 45; s2: 0; s2uu: 0; npar: 0; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 26; col: 14; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (17 27 1) t2(0 0 0) t4(6 8 1);

                
                - а вот клёво:
                    g307: new o6c4c: or: 10; t1+t3: 30; s0: 18; s1: 45; s2: 0; s2uu: 0; npar: 1; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; oon: 10 0 0 0; uon: 1 10 7 2; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 27; col: 16; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (14 28 3) t1(0 0 0) t2(0 0 0) t3(8 20 2) t4(6 8 1);
                    g13042: new o6c4c: or: 10; t1+t3: 30; s0: 18; s1: 45; s2: 0; s2uu: 0; npar: 1; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; oon: 10 0 0 0; uon: 1 10 7 2; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 27; col: 14; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (18 22 5) t1(0 0 0) t2(0 0 0) t3(11 15 4) t4(7 7 1);
                    vs
                    g14094: new o6c4c: or: 10; t1+t3: 30; s0: 19; s1: 45; s2: 0; s2uu: 0; npar: 0; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; oon: 10 0 0 0; uon: 1 10 7 2; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 26; col: 14; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (22 21 2) t1(0 0 0) t2(0 0 0) t3(14 15 1) t4(8 6 1);
                    - тут все статистики совпадают, кроме s0 и хорд
                    - может надо подправить s2uu ещё раз, с учётом ход?

                    вот ещё сравнение для другого графа
                    g4541: new o6c4c: or: 10; t1+t3: 30; s0: 18; s1: 45; s2: 0; s2uu: 0; npar: 1; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; oon: 10 0 0 0; uon: 2 9 6 3; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 27; col: 16; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (18 21 6) t1(0 0 0) t2(0 0 0) t3(12 13 5) t4(6 8 1);
                    vs
                    g24295: new o6c4c: or: 10; t1+t3: 30; s0: 19; s1: 45; s2: 0; s2uu: 0; npar: 0; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; oon: 10 0 0 0; uon: 2 9 6 3; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 26; col: 14; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (17 27 1) t1(0 0 0) t2(0 0 0) t3(11 19 0) t4(6 8 1);

            - если or нечётно:
                - later: s2uu: 3 (должно следовать из s2 = s2uu+or)
                - obvious: t3 имеет вид 9+6k (возможно без 15)
                - obvious: t4 имеет вид 6k
            - если or чётно:
                - later: s2uu: 0 (должно следовать из s2 = s2uu+or)
                - obvious: t3 \in [30, ...] (возможно это как t4 при нечётном or)
                - obvious: t4 \in [15, ...] (возможно это как t3 при нечётном or)
            - or бывает чётным на 30.05 (до этого был всегда нечётным)

            10.05: g1
    			or: 3
                s2: 0
                s2uu: 3
                s0: 12
                t3: 9
                t4: 6
                col: 12
                g1: new o6c4c: or: 03; s0: 12; s1: 15; s2: 0; s2uu: 3; npar: 1; t1: 0; t2: 0; t3: 9; t4: 6; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; ruv: 0 0 0 7; rrn: 0 0 0 0 15; prn: 0 0 0 0 0; ors:_3; or0: sames: rrn024: 15; evens: s1s0diff: 3; col: 12; rrn13: 0; ruv13: 7; ruv02: 0; chord_info: (15 0 0) t2(0 0 0) t4(6 0 0); SEAL;
            22.05: g1
                or: 3, 7
                ors: 3_7
                s2: 0
                s2uu: 3
                s0: 12
                t3: 9, 21
                t4: 12, 24
                col: 12
                g1: new o6c4c: or: 03; s0: 18; s1: 33; s2: 0; s2uu: 3; npar: 1; t1: 0; t2: 0; t3: 9; t4: 24; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; ruv: 0 0 0 19; rrn: 0 0 0 0 33; prn: 0 0 0 0 0; ors:_3_7; or0: sames: rrn024: 33; evens: s1s0diff: 15; col: 12; rrn13: 0; ruv13: 19; ruv02: 0; chord_info: (33 0 0) t2(0 0 0) t4(24 0 0); SEAL;
                g1: new o6c4c: or: 07; s0: 18; s1: 33; s2: 0; s2uu: 3; npar: 1; t1: 0; t2: 0; t3: 21; t4: 12; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; ruv: 0 0 0 15; rrn: 0 0 0 0 33; prn: 0 0 0 0 0; ors:_3_7; or0: sames: rrn024: 33; evens: s1s0diff: 15; col: 12; rrn13: 0; ruv13: 15; ruv02: 0; chord_info: (33 0 0) t2(0 0 0) t4(12 0 0);
            26.05: g172, g173, g226, g243, g253-g255, g257, g280
                s2: 0
                s2uu: 3
                or: 7, 9
                ors: 7, 9, 7_9
                s0: 16, 18, 20, 22
                t3: 21, 27
                t4: 12, 18
                col: 12, 14, 16, 18, 20 (т. е. примерно всё что угодно)

                s0: 16; or: 09; t4: 12; col: 12; chord_info: t4(3 8 1);
                s0: 16; or: 09; t4: 12; col: 12; chord_info: t4(5 6 1);
                s0: 18; or: 09; t4: 12; col: 12; chord_info: t4(4 8 0);
                s0: 18; or: 09; t4: 12; col: 14; chord_info: t4(4 7 1);
                s0: 18; or: 09; t4: 12; col: 14; chord_info: t4(5 6 1);
                s0: 18; or: 09; t4: 12; col: 16; chord_info: t4(2 8 2);
                s0: 18; or: 09; t4: 12; col: 16; chord_info: t4(4 6 2);
                s0: 18; or: 09; t4: 12; col: 16; chord_info: t4(6 4 2);
                s0: 18; or: 09; t4: 12; col: 16; chord_info: t4(8 3 1);
                s0: 20; or: 07; t4: 18; col: 12; chord_info: t4(14 4 0);
                s0: 20; or: 07; t4: 18; col: 12; chord_info: t4(18 0 0);
                s0: 20; or: 07; t4: 18; col: 18; chord_info: t4(12 6 0);
                s0: 20; or: 09; t4: 12; col: 12; chord_info: t4(12 0 0);
                s0: 20; or: 09; t4: 12; col: 18; chord_info: t4(8 4 0);
                s0: 22; or: 07; t4: 18; col: 20; chord_info: t4(18 0 0);
                s0: 22; or: 09; t4: 12; col: 20; chord_info: t4(12 0 0);
            28.05: не перепроверял, но наверно их тут нет
            30.05: g307, g4099, g4541, g10117, g13042, g13252, g13796, g14094, g22848, g22915, g22916, g24295, g24381, g26256, g26257, g27826
                s2: 0
                s2uu: 0, 3
                or: 7, 8, 9, 10
                ors: 7, 8, 9, 10
                s0: 16, 18, 19, 20
                t3: 21, 24, 27, 30
                t4: 15, 18, 21, 24
                col: 12, 14, 16

    - case: кстати, s1s0diff бывает отрицательный!
        - 24.05: npar = 1 при s1s0diff <= 6
        - 26.05: npar = 1 при s1s0diff <= 4
        - 28.05: npar = 1 при s1s0diff <= 0
            - conjectures:
                - or_sum: nope, 10, 15, 20, 25, 30, 35
                    - на самом деле картина такая:
                        - s1s0diff <= -2 => or_sum: nope, 10, 15
                        - s1s0diff = -1 => or_sum: nope, 10, 15, 20, 25, 30, 35
                        - s1s0diff \in [0..7] => or_sum: nope, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50
                        - s1s0diff: 8 => появляются 8, 11, 14, 17
                - s0: 18, 20, 22
                    - 24.05: на самом деле при s1s0diff <= 9 => s0: 12, 14, 16, 18
                    - 28.05: на самом деле при s1s0diff <= 5 => s0: 12, 14, 16, 18, 20, 22, 24
                - s1: 17, 18, 19, 20, 21, 22
                - or: 3, 5, 7, 9, 11, 13
                - t3: 9, 11, 13, 15, 17
                    - чётный доп. кейс
                        s1s0diff: 1; t3: 12;
                - has_nzmodb: 0
                    24.05: на самом деле при s1s0diff <= 7 => has_nzmodb: 0
                    28.05: на самом деле при s1s0diff <= 4 => has_nzmodb: 0
                - t3_chords_frequency[2]: 0 (наверно это первый раз, когда что-то интересное вылезает про хорды)
                - t4_chords_frequency[2]: 0
                - col: 12
                    28.05: s1s0diff <= 5 => has_nzmodb: 0
        - 30.05, смотрю только кейсы где s1s0diff <= 0 (1 гигабайт данных!):
            - s1s0diff: -7, -6, -5, -4, -3, -2, -1, 0
            - тут бывает npar = 0 на s1s0diff = -3, -1 и 0
                - то есть граница npar = 1 снижается с увеличением числа вершин
            - s2, s2uu - какие угодно
                s1s0diff <= -3 => s2: 0, 1, 2; s2uu: 1, 2, 3
            -  s1s0diff <= -2 (374 мегабайта):
                предварительно кажется верно всё то, что было верно для 28.05 при s1s0diff <= 0,
                    кроме npar = 1 (который работает только при s1s0diff <= -4)
                - or: 3, 5, 7, 9, 11, 13, 15
                - or_sum: nope, 5, 10, 15, 20, 25, 30, 35, 40 (верно при s1s0diff <= 0)
                - s0: 20, 22, 24 (и ещё 18, верно при s1s0diff <= 0)
                - s1: 17, 18, 19, 20, 21, 22 (при s1s0diff <= 0 ещё 23 и 24)
                - t3: 9, 11, 13, 15, 17
                    чётные доп кейсы
                        s1s0diff: -1; t3: 12
                        s1s0diff: 0; t3: 12, 14, 16
                - has_nzmodb: 0 (верно при s1s0diff <= 0)
                - t3_chords_frequency[2]: 0
                - t4_chords_frequency[2]: 0
                - col: 12 (верно при s1s0diff <= 0)
                - rov[0]: всякий
                    s1s0diff <= -4 => rov[0]: 0, 6

    - любопытные графы
        - idx30npar01.txt
        30.05, onlyrich
        npar 0 vs 1
        g13042: new o6c4c: or: 10; t1+t3: 30; s0: 18; s1: 45; s2: 0; s2uu: 0; npar: 1; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; oon: 10 0 0 0; uon: 1 10 7 2; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 27; col: 14; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (18 22 5) t1(0 0 0) t2(0 0 0) t3(11 15 4) t4(7 7 1);
        vs
        g14094: new o6c4c: or: 10; t1+t3: 30; s0: 19; s1: 45; s2: 0; s2uu: 0; npar: 0; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; oon: 10 0 0 0; uon: 1 10 7 2; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 26; col: 14; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (22 21 2) t1(0 0 0) t2(0 0 0) t3(14 15 1) t4(8 6 1);
        
        - todo: нужны ещё статистики, очень подробные статистики по цепям
            - идея такая, что в g14094 условно есть какая-то лишняя цепь
            - может её можно из статистик вычислить

    - also_pet - он вообще бывает на o6c4c решениях?
        - на 26.05, 28.05 как будто нет

all_todo:
    - t1 + t3 == 9
        - todo: что это за кейсы? их нет в 26.05 или 28.05

    - ! todo: поискать кейсы, где o6c4c форсировано; в смысле, что 6c4c ориентируемо обязательно

    - todo: or > 0; было бы круто найти паттерн, где стабильно npar = 0
        - например, 26.05
            - or = 3, npar = 0 =>
                - odd_t2_2_factors: 1, 2 (при npar=1 бывают 0,1,2,3)
                - может chord_layers <=> npar?
                    нет
                    chord_layers: (2 8 6) (2 8 8) (3 2 1) (3 2 1) (3 2 1) (3 2 1); npar: 0;
                    chord_layers: (2 8 6) (2 8 8) (3 2 1) (3 2 1) (3 2 1) (3 2 1); npar: 1;
                - chord_layers + o2t2 <=> npar
                    - если or != 3, то не факт
                        chord_layers: (3 1 0) (3 2 1) (3 3 0) (3 3 2) (3 4 1) (3 4 2); o2t2: 1; or: 08; npar: 0;
                        chord_layers: (3 1 0) (3 2 1) (3 3 0) (3 3 2) (3 4 1) (3 4 2); o2t2: 1; or: 08; npar: 1;

                - вот например локальные статистики не помогают как будто
                    rrn: 0 0 1 14 20; prn: 0 0 0 0 4; npar: 0;
                    rrn: 0 0 1 14 20; prn: 0 0 0 0 4; npar: 1;
                    chord_info: (13 17 9) t2(3 6 6) t4(5 7 3); npar: 0;
                    chord_info: (13 17 9) t2(3 6 6) t4(5 7 3); npar: 1;

                    rrn13 - не помогает
                    g260: new o6c4c: or: 03; t1+t3: 09; s0: 14; s1: 31; s2: 1; s2uu: 2; PAR: 0 (0); npar: 0; or_counts:_3; reors: 1; em: 0 2; o2: 0 1; t1: 0; t2: 8; t3: 9; t4: 22; u_comps: 7 1; u_morecomps_undiv: 2 6 2 6; rov: 0 0 0 3; ruv: 0 1 14 8; oon: 3 0 0 0; uon: 16 6 0 1; rrn: 0 0 9 12 10; prn: 0 0 0 2 6; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 19; evens: s1s0diff: 17; col: 12; rrn13: 12; ruv13: 9; ruv02: 14; chord_info: (11 20 8) t1(0 0 0) t2(5 2 1) t3(3 6 0) t4(3 12 7); chord_layers: (2 4 1) (2 8 5) (2 8 6) (2 8 6) (3 3 3) (3 5 5); no_2cdcs;
                    g260: new o6c4c: or: 03; t1+t3: 09; s0: 14; s1: 31; s2: 1; s2uu: 2; PAR: 0 (0); npar: 0; or_counts:_3; reors: 1; em: 0 2; o2: 0 1; t1: 0; t2: 8; t3: 9; t4: 22; u_comps: 7 1; u_morecomps_undiv: 2 6 2 6; rov: 0 0 0 3; ruv: 0 1 14 8; oon: 3 0 0 0; uon: 16 6 0 1; rrn: 0 1 7 13 10; prn: 0 0 0 2 6; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 17; evens: s1s0diff: 17; col: 12; rrn13: 14; ruv13: 9; ruv02: 14; chord_info: (11 20 8) t1(0 0 0) t2(5 2 1) t3(3 6 0) t4(3 12 7); chord_layers: (2 4 1) (2 8 5) (2 8 6) (2 8 6) (3 3 3) (3 5 5); no_2cdcs;

                    rrn[1]  не помогает
                    chord_info: (11 20 8) t2(5 2 1) t4(3 12 7); npar: 0; rrn[1]: 0
                    chord_info: (11 20 8) t2(5 2 1) t4(3 12 7); npar: 0; rrn[1]: 1

                    - мб сработает связка chord_info + rrn?:
                        не срабатывает
                        chord_info: (19 8 12) t2(8 0 12) t4(6 4 0); rrn: 0 0 8 0 11; npar: 0;
                        chord_info: (19 8 12) t2(8 0 12) t4(6 4 0); rrn: 0 0 8 0 11; npar: 1;

                        chord_info: (24 10 5) t2(5 4 5) t4(12 4 0); rrn: 0 2 3 10 10; npar: 0;
                        chord_info: (24 10 5) t2(5 4 5) t4(12 4 0); rrn: 0 2 3 10 10; npar: 1;

    - todo: or = 3, 18g2, npar = 0
        - разобраться в минимальном графе, где npar = 0

    - todo: or > 0; чекнуть любое nz-mod5 решение, которое не nz5 решение
        - правда ли, что or_sum % 5 == 0?
        - правда ли, что на or вершинах совпадает число 1 и 4, 2 и 3?
        - правда ли, что есть сцепка в том, как именно 1 и 4, 2 и 3 появляются на or вершинах?

    - интересно было бы поймать кейс
        - что мы из какого-то набора локальных статистик
        - понимаем, например, что выполнился какой-то SEAL кейс
        - например has_2cdcs - гипотетически мы знаем кучу необходимы условий, но может они все вместе являются достаточными для has_2cdcs

    - has_2cdcs
        - ? мб col % 4 = 0?
            - работает на 26.05
            - ломается на 28.05

    - chord_info + chord_layers
        (надо правда признать, что chord_layers не с полной информацией тут
            circuit_count_by_layer
            chord_count_by_layer
            t4_chord_count_by_layer
            можно было бы ещё добавить t1_, t2_ и t3_ аналоги)
        - было любопытно понять - что можно из них вычислить
            - из очевидных вычисляемых вещей - s0, s1, or
            - todo:
                - rov/oon
                - col
            - 26.05
                - s2 нельзя вычислить, разными вариантами
                    chord_info: (28 6 5) t1(0 0 0) t2(10 0 5) t3(7 2 0) t4(11 4 0); chord_layers: (2 4 2) (3 1 0) (3 2 0) (3 2 0) (3 5 2) (4 2 0); s2: 1;
                    chord_info: (28 6 5) t1(0 0 0) t2(10 0 5) t3(7 2 0) t4(11 4 0); chord_layers: (2 4 2) (3 1 0) (3 2 0) (3 2 0) (3 5 2) (4 2 0); s2: 2;

                    chord_info: (27 6 6) t1(0 0 0) t2(12 0 6) t3(7 2 0) t4(8 4 0); chord_layers: (2 4 2) (2 4 2) (3 1 0) (3 1 0) (3 4 0) (3 4 0); s2: 0;
                    chord_info: (27 6 6) t1(0 0 0) t2(12 0 6) t3(7 2 0) t4(8 4 0); chord_layers: (2 4 2) (2 4 2) (3 1 0) (3 1 0) (3 4 0) (3 4 0); s2: 2;

                    chord_info: (23 13 3) t1(0 2 0) t2(3 1 0) t3(15 4 1) t4(5 6 2); chord_layers: (2 4 2) (2 8 3) (3 0 0) (3 1 0) (3 2 2) (3 4 3); s2: 2;
                    chord_info: (23 13 3) t1(0 2 0) t2(3 1 0) t3(15 4 1) t4(5 6 2); chord_layers: (2 4 2) (2 8 3) (3 0 0) (3 1 0) (3 2 2) (3 4 3); s2: 3;
                - or_sum (но тут надо понять, с точностью до чего - типа or_sum будут разные даже в одном решении, но у них общая природа, и например, %5 = 0, или ещё что-то), has_nzmod5, has_nzmodb, mismatch нельзя вычислить, скажем так
                    nope, 20
                    chord_info: (27 10 2) t1(1 0 1) t2(0 1 1) t3(15 5 0) t4(11 4 0); chord_layers: (3 0 0) (3 0 0) (3 3 0) (3 3 2) (3 4 0) (3 4 2);
                - has_nzmod6 нельзя вычислить
                    chord_info: (19 0 20) t1(0 0 0) t2(6 0 10) t3(7 0 2) t4(6 0 8); chord_layers: (2 4 2) (2 4 2) (2 8 2) (2 8 2) (2 8 4) (2 8 4)
                - has_2cdcs нельзя вычислить
                    chord_info: (17 0 22) t1(0 0 0) t2(2 0 12) t3(9 0 6) t4(6 0 4); chord_layers: (2 6 0) (2 6 0) (2 8 2) (2 8 2) (2 8 2) (2 8 2);

    - no chords, chord_info: (.* 0 0)
        то есть - допустим нет хорд
            conjectures
            - 26.05 (примерно 100 решений)
                - s0: 20, 22
                - s1: 31, 35, 37, 39
                - or: 7, 9
                - s2: 0, 1
                    - npar = 0 когда s2 = 1 (что логично, s0+s1+s2)
                - or_sum: nope, 15, 20, 25, 30
                - rich_type_count: 15, 23, 25, 27
            - 28.05
                - ничего нет!
            - 24.05:
                - s0: 20
                - s1: 31, 34, 35
                    - о, что-то новое
                - or: 5, 7, 9
                - s2: 0, 1, 2
                - npar: 1 всегда, внезапно
                - or_sum: nope, 15
        - todo: может можно чуть-чуть добавить хорд?

    - придумать тег для гипотезы, или важного кейса, вместо слова todo
        - и разбить на файлы

    - todo: no has-nzmod5, has-nzmod6, no has-nz6

    - глянуть or0, 32.05; или какое-нибудь подмножество

    - todo: на самом деле npar = old_par
        - наверно это несложно доказать, и это надо сделать

    - (вряд ли, но) Можно ещё попробовать сделать genus формулу константой на уровне 1 графа, а не всех графов

    - взять or0 графы,
        - и глянуть отдельно наборы orverts где or % 2 == 0, и где or % 2 == 1

    - or > 0:
        - todo: 244 цикл
            - посчитать число троек, где все or вершины лежат на этом цикле

        - глянуть or: 3 кейсы, где or_sum % 5 != 0 (например 9)
            - а также вот этот граф любопытен, тут npar = 0
            24.05g25: new o6c4c: or: 03; t1+t3: 09; s0: 13; s1: 27; s2: 2; s2uu: 1; PAR: 0 (0); npar: 0; em: 0 1; o2: 0 2; t1: 0; t2: 9; t3: 9; t4: 18; u_comps: 4 2; u_morecomps_undiv: 4 2 4 4; rov: 0 0 0 3; ruv: 0 5 8 8; oon: 3 0 0 0; uon: 14 5 2 0; rrn: 1 2 4 8 12; prn: 0 0 3 4 2; mismatch: 0; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 1; flow5: u244 u244 u244 u113 u113 u122 u122 u334 u334 u122 u244 u334 o113 u244 u113 u244 u113 u244 o113 u122 o113 u113 u334 u244 ; or_sum: 9; ors:_3; or0: sames: rrn024: 17; evens: s1s0diff: 14; col: 12; rrn13: 10; ruv13: 13; ruv02: 8; chord_info: (13 14 9) t1(0 0 0) t2(2 6 1) t3(5 1 3) t4(6 7 5); chord_layers: (2 5 4) (2 5 5) (2 7 2) (2 7 2) (2 7 3) (3 1 1); no_2cdcs;

        - s0: 12
          - conj: any_chords_frequency[1] % 2 == 0  

        - any_chords_frequency[1] = 0
            - npar бывает 0
            - 24.05:
                - or_sum: nope, 10, 15, 20
                - s0: 12, 14, 16, 18, 20
                - rov[0]/oon[3]: 0
                - col: 12, 16
                - or: 3,5,7,8,9 (or >= 3)
            - 26.05
                - or_sum: nope, 10, 15, 20, 25, 30
                - s0: 12, 14, 16, 18, 20, 22
                - col: 12, 16, 20
                - or: 3..10 (or >= 3)
            - 28.05:
                - rov[0]/oon[3]: 0, 1, 2, 6
                conjectures (это ещё пачка интересных гипотез, завязанные на хорды):
                    - or_sum: nope, 5, 10, 15, 20, 25, 30, 35, 40
                    - s0: 12, 14, 16, 18, 20, 22, 24
                        - мб это как-то очевидно?
                    - col: 12, 16, 20
                    - or: 3..11, 13, 15 (or >= 3)
            - тут тоже почти везде npar = 1 на 26.05
                там где npar = 0:
                    chord_info:
                        (39 0 0)
                        (37 0 2)
                        (28 0 11)
                        (17 0 22)
                    но в целом не вижу паттерна

        - has 2cdcs
            - conj: or_sums
                - на 24.05: nope, 10, 15
                - на 26.05: nope, 5, 10, 15, 20, 25
                - на 28.05: nope, 5, 10, 15, 20, 25, 30, 35, 40

        - SEAL
            - ? conj: or_sums
                - 28.05:
                    - nope
                    - 0, 5, 10, 15, 20, 25, 30, 35, 40, 45
                    - 3, 9, 12
                        - todo: что это за SEAL кейсы?
                    - (в целом, SEAL или не SEAL, ещё бывает много чего: 6, 8, 11, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 27, 29, 32, 50, 55)

        - even_t3_matchings
            conjecture: либо 0, либо 3

        - поизучать ещё раз хорды внимательнее
            - в графе петерсена их нет (на rich рёбрах)
            - может какой-то аналог этого найти? и глянуть npar?

        - где ещё возможно npar = 1:
            - очень мало кейсов, но uon: 0 0 . .
            - ...
        
        - oon: 0 0 . . / rov: . . 0 0
            - это обобщение or=0
                - правда на 28.05 всего 6 новых решений, маловато
                    - у всех
                        - or: 6
                        - s0: 16
                        - rov: 0 6 0 0
                        - no_2cdcs
                        - mismatch: 0
                        - or_sum: nope
                        - npar: 1
                        - odd_t1_2_factors: 0
                        - even_t4_matchings + odd_t2_2_factors: 3, там где s2 != 2
                - 26.05:
                    - or: 6
                    - s0: 14, 16
                    - rov: 0 6 0 0
                    - no_2cdcs
                    - mismatch: 0
                    - or_sum: nope
                    - npar: 1
                    - odd_t1_2_factors: 0
            - todo: найти обобщение посильнее
                - чтоб npar = 1

        - or: 2
            - todo: проверить ещё статистики всякие
            - 26.05
                - conjectures
                    - s2: 1, 2, 3
                    - even_t4_matchings: 1, 2, 3
                    - odd_t1_2_factors: 0, 2
                    - or_sum 5 или nope (26.05, 28.05)
                    s2: 1; em: 3 1; o2: 0 2;
                    s2: 1; em: 3 1; o2: 2 0;
                    s2: 1; em: 3 1; o2: 2 3;
                    s2: 2; em: 3 2; o2: 0 1;
                    s2: 2; em: 3 2; o2: 0 2;
                    s2: 2; em: 3 2; o2: 2 1;
                    s2: 2; em: 3 2; o2: 2 2;
                    s2: 3; em: 3 3; o2: 0 0;
                    s2: 3; em: 3 3; o2: 2 1;
                    s2: 3; em: 3 3; o2: 2 2;
            - 28.05:
                    s2: 1; em: 3 1; o2: 0 1;
                    s2: 1; em: 3 1; o2: 0 2;
                    s2: 1; em: 3 1; o2: 2 0;
                    s2: 1; em: 3 1; o2: 2 3;
                    s2: 2; em: 3 2; o2: 0 1;
                    s2: 2; em: 3 2; o2: 0 2;
                    s2: 2; em: 3 2; o2: 2 1;
                    s2: 2; em: 3 2; o2: 2 2;
                    s2: 3; em: 3 3; o2: 0 0;
                    s2: 3; em: 3 3; o2: 0 3;
                    s2: 3; em: 3 3; o2: 2 1;
                    s2: 3; em: 3 3; o2: 2 2;

        - nz_mod5 mismatch: 1
            тут сразу 2 кейса вместе:
                - has_nz_mod5_flow, но нет has_nz_mod6_flow
                - has_nz_mod5_flow, has_nz_mod6_flow, но нет has_nz_modb_flow
            - на самом деле можно сократить до 1 кейса:
                - has_nz_mod5_flow, но нет has_nz_modb_flow
                - скорее всего это кейс has nz-mod5, no nz5
            - было бы прикольно понять что происходит
            - почему s0 чётно
            - почему or >= 3
                - а также t3 >= 9
                    t3 — number of rich edges which connect oriented with non-oriented vertex
            - понять какие ещё статистики становятся особенными
            - было бы прикольно починить формулу для npar и сделать эти кейсы SEAL
            - or_sum
                - если б у нас был nz5: 112, 123, 134, 224, -112, -123, -134, -224
                    с доп условием что 112+112-224=0
                    знак определяется тем, куда смотрит максимум
                    (2 минимума входят, максимум выходит,
                    или наоборот)
                - тут у нас как будто нет nz5,
                    но правда есть nz-mod5
                    типы будут такие: 113, 221, 334, 442
                        считаем, что все рёбра каждый раз входящие
                        nz-mod5 vs nz5
                        113 <=> 112, 134
                        221 <=> 224, 123
                        334 <=> -224, -123
                        442 <=> -112, -134
                        - интересно что происходит с доп. условиями
                - да, правда интересно
                    or_sum % 5 = 0 на 24.05
                    or_sum: 10, 15, 20, 25, 30
                    на 26.05: 5, 10, 15, 20, 25, 30, 35
                    на 28.05: 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55
            - todo: глянуть 30.05
            - то есть получается conjecture, что
                - если or_sum % 5 != 0, то у нас на самом деле nz5 поток

        - глянуть минимальные кейсы, где npar=0:
            - s1: 19
            - prn: 0 0 0 0 2
            - t2: 0
                (по-моему это то же, что ruv: 0 0 0 .)
                (почему-то rrn: 0 0 . . . - это очевидно откуда-нибудь?)
                - 90% случаев даёт npar: 1
                26.05
                g255: new o6c4c: or: 09; s0: 22; s1: 37; s2: 1; s2uu: 2; npar: 0; t1: 2; t2: 0; t3: 23; t4: 14; u_comps: 2 1; u_morecomps_undiv: 2 6 2 6; ruv: 0 0 0 17; rrn: 0 0 0 8 29; prn: 0 0 0 0 2; ors:_7_9; or0: sames: rrn024: 29; evens: s1s0diff: 15; col: 20; rrn13: 8; ruv13: 17; ruv02: 0; chord_info: (39 0 0) (0 0 0) (14 0 0);
                    очень много нулей, любопытно
                - интересно, что если npar=0, то u_morecomps_undiv[0]: 2, 6
            - ...

        - чекнуть, что nz-mod-both, это то же самое, что nz5

        - вместо s2 уточнить число rich рёбер до тех, которые не соединяют or и unor
            - типа не учитывать в подсчёте rich рёбра, которые соединяют or и unor
            - и глянуть число, аналогичное s2
            - всегда ли оно будет 3? нет
                - но для решений, которые получаются из or=0 путём смены ориентации - вроде всегда 3
            - в коде это называется even_t4_matchings (назовём это также как s2uu)

        - при смене ориентации - меняется ли or_sum?
        - допустим s2uu = 3;
            - правда ли, что s2=0 или s2=3?
            - правда ли, что (s0+s1+or) % 2 == 0?
                - на 18.05 и 20.05 - это так
                - на 22.05 есть контрпример
                    g2: new o6c4c: or: 06; s0: 16; s1: 27; s2: 3; s2uu: 3; s0s1orsum: 1; t2: 5; u_comps: 4 1; u_morecomps_undiv: 0 6 6 6; ruv: 1 0 7 8; rrn: 0 0 5 8 14; prn: 0 0 3 0 3; orverts: 0 2 4 6 9 19 ; has_nzmod5: 0; has_nzmodb: 0; ors: 6 or0: sames: rrn024: 19; evens: s1s0diff: 11; col: 12; rrn13: 8; ruv13: 8; ruv02: 8; chord_info: (22 8 3) (3 2 0) (8 2 1);
                - интересно с чем это связано
                - если выкинуть решения, где можно сделать только 1 ориентацию, то
                    - во-первых останется всё ещё дофига решений
                    - во-вторых, контрпримеров остаётся ничтожно мало (по-крайней мере до 26.05)

    - бывают ли решения has 2 cdcs? (по коду - как будто бы бывают)
        - conj: до 28.05 включительно - таких нет

    - ещё идея - мб rich ребра разбиваются на четные циклы, надо чередовать по слоям
        - надо глянуть как по слоям рёбра из perfect matching'а раскидываются
        - возможно надо все тройки перебрать
        - 20g5-35.png
        - ну или просто интересно глянуть 244-цепи - они чётной длины - всегда ли в них чётное число poor/rich рёбер?

    - может ли быть так, что каждое 6c4c решение порождает какой-то coloring, аналогичный Petersen coloring?
        - и чтоб было соответствие по rich рёбрам, и по poor рёбрам
        - в графе Петерсена poor ребро отвечает куску графа, который красится в 3 цвета
            - какой для этого аналог у 6c4c?


    - глянуть любопытные графы
        - 22.05: u_comps: 3 1 (минимальный total_poor_comps который нашёл до 26.05)
            g15: new o6c4c: or: 00; s0: 14; s1: 28; s2: 3; em: 3 3; o2: 0 0; t2: 5; u_comps: 3 1; u_morecomps_undiv: 2 6 4 6; ruv: 0 2 6 14; or0: genus: 0; cer: 2; cep: 14; cel: 2; rrn024: 20; evens: s1s0diff: 14; rrn13: 8; ruv13: 16; ruv02: 6; chord_info: (15 14 4) (3 2 0) (12 12 4) (2 5) (2 9) (2 5) (2 5) (3 10) (3 10) ; rrn: 0 0 4 8 16; SEAL;

        - 26.05: s1s0diff: 8 (минимальный s1s0diff)
            - кстати у обоих решений совпадают абсолютно все статистики:
                s0: 14; s1: 22;
                u_comps: 6 2;
                u_morecomps_undiv: 6 2 4 4;
                ruv: 4 5 12 5
                rrn: 1 3 6 9 3
                genus: 0
                cer: 4; cep: 8; cel: 2; rrn024: 10
                evens: rrn13: 12; ruv13: 10; ruv02: 16;
                chord_info: (17 16 6) (8 4 5) (9 12 1)
                (2 5) (2 5) (2 9) (2 9) (3 10) (3 12)
                - мб у них одинаковые rich компоненты?
            g13: new o6c4c: or: 00; s0: 14; s1: 22; s2: 3; em: 3 3; o2: 0 0; t2: 17; u_comps: 6 2; u_morecomps_undiv: 6 2 4 4; ruv: 4 5 12 5; or0: genus: 0; cer: 4; cep: 8; cel: 2; rrn024: 10; evens: s1s0diff: 8; rrn13: 12; ruv13: 10; ruv02: 16; chord_info: (17 16 6) (8 4 5) (9 12 1) (2 5) (3 10) (2 5) (3 12) (2 9) (2 9) ; rrn: 1 3 6 9 3; SEAL;
            g43: new o6c4c: or: 00; s0: 14; s1: 22; s2: 3; em: 3 3; o2: 0 0; t2: 17; u_comps: 6 2; u_morecomps_undiv: 6 2 4 4; ruv: 4 5 12 5; or0: genus: 0; cer: 4; cep: 8; cel: 2; rrn024: 10; evens: s1s0diff: 8; rrn13: 12; ruv13: 10; ruv02: 16; chord_info: (17 16 6) (8 4 5) (9 12 1) (2 9) (2 5) (3 10) (2 9) (2 5) (3 12) ; rrn: 1 3 6 9 3; SEAL;

        - 26.05, s1s0diff: 18 (максимальный s1s0diff)
            - кстати оба имеют:
                u_morecomps_undiv: 4 6 6 6;
                - rrn[0], rrn[1]
            - и примерно все остальные статистики разные
            g155: new o6c4c: or: 00; s0: 13; s1: 31; s2: 3; em: 3 3; o2: 0 3; t2: 8; u_comps: 7 1; u_morecomps_undiv: 4 6 6 6; ruv: 0 1 14 11; or0: genus: 4; cer: 5; cep: 7; cel: 1; rrn024: 15; evens: s1s0diff: 18; rrn13: 16; ruv13: 12; ruv02: 14; chord_info: (13 15 11) (4 1 3) (9 14 8) (2 9) (2 5) (3 8) (2 5) (2 5) (2 9) ; rrn: 0 0 7 16 8; SEAL;
            g277: new o6c4c: or: 00; s0: 15; s1: 33; s2: 3; em: 3 3; o2: 0 3; t2: 6; u_comps: 5 1; u_morecomps_undiv: 4 6 6 6; ruv: 0 1 10 15; or0: genus: 2; cer: 5; cep: 9; cel: 3; rrn024: 19; evens: s1s0diff: 18; rrn13: 14; ruv13: 16; ruv02: 10; chord_info: (16 14 9) (5 1 0) (11 13 9) (2 7) (2 5) (3 9) (3 10) (3 10) (2 5) ; rrn: 0 0 4 14 15; SEAL;
        
        - 26.05
            ruv: 0 1 14 11; rrn: 0 0 7 16 8; prn: 0 0 0 2 6;
            в одном случае s0=13, в другом s0=15
            g155: new o6c4c: or: 00; s0: 13; s1: 31; s2: 3; em: 3 3; o2: 0 3; t2: 8; u_comps: 7 1; u_morecomps_undiv: 4 6 6 6; ruv: 0 1 14 11; rrn: 0 0 7 16 8; prn: 0 0 0 2 6; or0: genus: 4; sames: cep: 7; cel: 1; rrn024: 15; evens: s1s0diff: 18; cop: 6; col: 12; rrn13: 16; ruv13: 12; ruv02: 14; chord_info: (13 15 11) (4 1 3) (9 14 8); chord_layers: (2 5) (2 5) (2 5) (2 9) (2 9) (3 8) ; SEAL;

            g82: new o6c4c: or: 00; s0: 15; s1: 31; s2: 3; em: 3 3; o2: 0 3; t2: 8; u_comps: 7 1; u_morecomps_undiv: 4 6 6 6; ruv: 0 1 14 11; rrn: 0 0 7 16 8; prn: 0 0 0 2 6; or0: genus: 3; sames: cep: 9; cel: 3; rrn024: 15; evens: s1s0diff: 16; cop: 6; col: 12; rrn13: 16; ruv13: 12; ruv02: 14; chord_info: (17 14 8) (6 2 0) (11 12 8); chord_layers: (2 5) (2 5) (2 9) (3 8) (3 10) (3 11) ; SEAL;
            
        - odd_rich_comps_matching = 1
            28.05
            g2283: new o6c4c: or: 00; s0: 16; s1: 28; s2: 3; em: 3 3; o2: 0 0; t2: 14; u_comps: 9 2; u_morecomps_undiv: 4 0 2 1; ruv: 1 3 19 5; rrn: 0 3 13 9 3; prn: 0 1 2 5 6; or0: genus: 3; sames: cep: 10; cel: 4; rrn024: 16; evens: s1s0diff: 12; cop: 6; col: 12; rrn13: 12; ruv13: 8; ruv02: 20; chord_info: (23 16 3) (9 4 1) (14 12 2); chord_layers: (2 11) (2 11) (4 13) (2 7) (4 13) (2 7) ; SEAL;

        - 28.05, последние 3 кейса в списке
            - нужно изучить s0-cep, или s0-cel
            - возможно эти числа напрямую зависят как-то от rrn, или ruv, или обоих
            - (также стоит заметить, что они всегд чётные)
            - первое не зависит
            - второе тоже не зависит

            - любопытное
            26.05
            cop: 10; col: 14; ruv: 1 4 9 12; rrn: 0 1 6 11 11; cop: 10; col: 14; rrn13: 12; ruv13: 16; ruv02: 10;

            ruv: 0 1 12 13; rrn: 0 0 7 12 13; prn: 0 0 0 2 5; evens: cop: 2; col: 12;
            ruv: 0 1 12 13; rrn: 0 0 7 12 13; prn: 0 0 0 2 5; evens: cop: 6; col: 12;

            chord_info: (14 14 11) (2 6 1) (12 8 10); evens: cop: 0; col: 12;
            chord_info: (14 14 11) (2 6 1) (12 8 10); evens: cop: 4; col: 12;

            28.05
            ruv: 0 1 14 13; rrn: 0 0 7 16 11; cop: 0; col: 12; rrn13: 16; ruv13: 14; ruv02: 14;
            ruv: 0 1 14 13; rrn: 0 0 7 16 11; cop: 4; col: 12; rrn13: 16; ruv13: 14; ruv02: 14;

            ruv: 0 0 12 16; rrn: 0 0 4 16 16; cop: 4; col: 12; rrn13: 16; ruv13: 16; ruv02: 12;
            ruv: 0 0 12 16; rrn: 0 0 4 16 16; cop: 8; col: 12; rrn13: 16; ruv13: 16; ruv02: 12;

            ruv: 0 1 12 15; rrn: 0 1 4 15 15; cop: 6; col: 12; rrn13: 16; ruv13: 16; ruv02: 12;
            ruv: 0 1 12 15; rrn: 0 1 4 15 15; cop: 8; col: 12; rrn13: 16; ruv13: 16; ruv02: 12;

            ruv: 0 3 14 11; rrn: 0 0 10 14 8; cop: 0; col: 12; rrn13: 14; ruv13: 14; ruv02: 14;
            ruv: 0 3 14 11; rrn: 0 0 10 14 8; cop: 0; col: 14; rrn13: 14; ruv13: 14; ruv02: 14;
            ruv: 0 3 14 11; rrn: 0 0 10 14 8; cop: 4; col: 12; rrn13: 14; ruv13: 14; ruv02: 14;

            g922: new o6c4c: or: 00; s0: 16; s1: 32; s2: 3; em: 3 3; o2: 0 0; t2: 10; u_comps: 7 1; u_morecomps_undiv: 2 6 2 6; ruv: 0 3 14 11; rrn: 0 0 10 14 8; or0: genus: 2; sames: cep: 12; cel: 4; rrn024: 18; evens: s1s0diff: 16; cop: 4; col: 12; rrn13: 14; ruv13: 14; ruv02: 14; chord_info: (20 18 4) (6 3 1) (14 15 3); chord_layers: (3 13) (2 5) (3 10) (3 12) (3 9) (2 9) ; SEAL;
            g1205: new o6c4c: or: 00; s0: 14; s1: 32; s2: 3; em: 3 3; o2: 0 0; t2: 10; u_comps: 7 1; u_morecomps_undiv: 2 6 0 6; ruv: 0 3 14 11; rrn: 0 0 10 14 8; or0: genus: 3; sames: cep: 14; cel: 2; rrn024: 18; evens: s1s0diff: 18; cop: 0; col: 12; rrn13: 14; ruv13: 14; ruv02: 14; chord_info: (15 21 6) (6 3 1) (9 18 5); chord_layers: (2 5) (3 12) (2 9) (3 9) (2 9) (2 7) ; SEAL;
            g1439: new o6c4c: or: 00; s0: 14; s1: 32; s2: 3; em: 3 3; o2: 0 0; t2: 10; u_comps: 7 1; u_morecomps_undiv: 4 6 0 6; ruv: 0 3 14 11; rrn: 0 0 10 14 8; or0: genus: 3; sames: cep: 10; cel: 2; rrn024: 18; evens: s1s0diff: 18; cop: 4; col: 12; rrn13: 14; ruv13: 14; ruv02: 14; chord_info: (14 18 10) (6 3 1) (8 15 9); chord_layers: (2 5) (2 5) (3 9) (2 9) (2 5) (3 13) ; SEAL;
            g2394: new o6c4c: or: 00; s0: 16; s1: 32; s2: 3; em: 3 3; o2: 0 0; t2: 10; u_comps: 7 2; u_morecomps_undiv: 2 0 0 0; ruv: 0 3 14 11; rrn: 0 0 10 14 8; or0: genus: 2; sames: cep: 16; cel: 2; rrn024: 18; evens: s1s0diff: 16; cop: 0; col: 14; rrn13: 14; ruv13: 14; ruv02: 14; chord_info: (20 18 4) (8 2 0) (12 16 4); chord_layers: (2 9) (3 11) (2 9) (3 12) (4 12) (2 5) ; SEAL;

        - 28.05, rrn: 0 0 0 . ., всего 1 решение
            g2045: new o6c4c: or: 00; s0: 17; s1: 37; s2: 3; em: 3 3; o2: 0 3; t2: 5; u_comps: 5 1; u_morecomps_undiv: 6 6 0 6; ruv: 0 0 10 18; rrn: 0 0 0 20 17; prn: 0 0 0 0 5; or0: genus: 2; sames: cep: 11; cel: 5; rrn024: 17; evens: s1s0diff: 20; cop: 6; col: 12; rrn13: 20; ruv13: 18; ruv02: 10; chord_info: (17 19 6) (2 3 0) (15 16 6); chord_layers: (2 5) (2 5) (4 13) (4 13) (3 12) (2 5) ; SEAL;

        - 28.05, минимальный t2: 4; 1 решение
            g1418: new o6c4c: or: 00; s0: 16; s1: 38; s2: 3; t2: 4; u_comps: 4 1; u_morecomps_undiv: 0 6 0 6; ruv: 0 0 8 20; rrn: 0 0 2 12 24; prn: 0 0 0 0 4; or0: genus: 2; sames: cep: 8; cel: 4; rrn024: 26; evens: s1s0diff: 22; cop: 8; col: 12; rrn13: 12; ruv13: 20; ruv02: 8; chord_info: (17 18 7) (4 0 0) (13 18 7); chord_layers: (2 5) (2 5) (2 7) (2 7) (4 14) (4 14) ; SEAL;


    - изучить perfect matching polytope/lattice
        - может можно посчитать Euler characteristic того или другого?

    - чекнуть poor comps в целом
        - какие конфигурации бывают? прям вектором чисел, размеры компонент

    - подумать про 3-edge-colorable графы
        - у них получается poor рёбра - это дефолтное состояние?
        - глянуть K3,3

    - 4-edge-coloring
        - чем-то может помочь в анализе?
        - может poor рёбра всегда можно раскрасить в 3 цвета?

    - мб добавить визуализацию хорд/антихорд

    - можно рассмотреть o6c4c как double cover для ribbon graph'а
        - если каждую вершину удвоить
        - удвоение детерминированное
        - что можно сказать про perfect matching poor рёбра?
            или про perfect matching rich рёбра?
        
    - может я могу подобрать какой-то более релевантный dominating circuit, для визуализации?
        - например, попробовать найти dom_circ без poor рёбер
        bool has_compatible_dominating_circuit(Graph& graph) {
        }
            - но если есть путь из 3 poor рёбер, то это будет невозможно
                - а вот и граф такой - graph22g13-106




s0 — number of circuits (circuit is a connected cycle; there are 12 in the solution for Petersen graph)
s1 — number of rich edges (15 for Petersen graph)
s2 — half of the number of perfect matchings with even number of rich edges (so in general it’s equal to 0, 1, 2 or 3) (0 for Petersen graph)

- глянуть ещё раз s1, s2, s3, or=0, or!=1, or=2, or=3; может какие-то неравенства сочинить
or=0 => s0=s1 (mod 2); s2=3
    наверно s0 >= 12
s0 s1 (наверняка тут есть пропуски)
12 24,26,28
13 25,27,29,31,33
14 22,24,26,28,30,32,34
15 25,27,29,31,33,35
16 22,24,26,28,30,32,34,36,38
17 27,29,31,33,35
18 30,32,34,36

s0 s1 (наверняка тут есть пропуски, смотрю только на графы до 28.05)
12    24,26,28
13      25,27,29,31,33
14 22,24,26,28,30,32,34
15      25,27,29,31,33,35
16 22,24,26,28,30,32,34,36,38
17         27,29,31,33,35
18             30,32,34,36

s2 — half of the number of perfect matchings
with even number of rich edges
(so in general it’s equal to 0, 1, 2 or 3)
(0 for Petersen graph)

любопытное:
    s0=16,s1=22; s1-s0=6=2*3
    orsums_28_uptog610:g133: new o6c4c: or: 00; t1+t3: 00; s0: 16; s1: 22; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 20; t3: 0; t4: 22; comps: 0 4 0 6 0 2 0 6; rov: 0 0 0 0; orverts: ; or0: sum: -12; (3 9) (3 13) (3 8) (2 5) (3 11) (2 9) ; SEAL;
        s1-s0-sum=18
    orsums_28_uptog610:g133: new o6c4c: or: 00; t1+t3: 00; s0: 16; s1: 24; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 18; t3: 0; t4: 24; comps: 0 4 0 6 0 2 0 6; rov: 0 0 0 0; orverts: ; or0: sum: -8; (3 9) (3 13) (3 8) (2 5) (2 9) (3 11) ; SEAL;
    s0=16,s1=24; s1-s0=8=2*4
        s1-s0-sum=16
    prev_unsorted_logs/or28_p2:g2812: new o6c4c: or: 00; t1+t3: 00; s0: 16; s1: 22; s2: 3; PAR: 1 (1); diff:s1-s0'-or: 12; t1: 0; t2: 20; t3: 0; t4: 22; orverts: ; or0: sum: -10; (2 9) (2 9) (3 9) (2 9) (4 11) (3 12) ; SEAL;
    
    s0=16,s1=38; s1-s0=22=2*11
    tmp14:g1418: new o6c4c: or: 00; t1+t3: 00; s0: 16; s1: 38; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 4; t3: 0; t4: 38; comps: 0 0 0 6 0 0 0 6; rov: 0 0 0 0; orverts: ; or0: sum: 14; (2 7) (2 5) (2 5) (4 14) (4 14) (2 7) ; SEAL;
        s1-s0-sum=8


s0=16:
    s1=24, v=24
    or0:prev_unsorted_logs/o2em_24:g33: new o6c4c: or: 00; t1+t3: 00; s0: 16; s1: 24; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 12; t3: 0; t4: 24; a: 0 24 0 32; ruv: 0 4 16 4; rov: 0 0 0 0; orverts: ; or0: sum: -8; (2 7) (2 7) (3 11) (3 11) (3 11) (3 9) ; SEAL;

    s1=26, v=26
    or0:prev_unsorted_logs/o2em_26:g149: new o6c4c: or: 00; t1+t3: 00; s0: 16; s1: 26; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 13; t3: 0; t4: 26; a: 0 19 0 36; ruv: 1 6 11 8; rov: 0 0 0 0; orverts: ; or0: sum: -2; (3 12) (2 5) (3 9) (3 11) (3 11) (2 7) ; SEAL;
    or0:prev_unsorted_logs/o2em_26:g151: new o6c4c: or: 00; t1+t3: 00; s0: 16; s1: 26; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 13; t3: 0; t4: 26; a: 0 19 0 34; ruv: 0 7 12 7; rov: 0 0 0 0; orverts: ; or0: sum: -2; (3 11) (2 7) (2 5) (3 11) (3 9) (3 10) ; SEAL;
    
    s1=28, v=24
    or0:prev_unsorted_logs/o2em_24:g33: new o6c4c: or: 00; t1+t3: 00; s0: 16; s1: 28; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 8; t3: 0; t4: 28; a: 0 16 0 40; ruv: 0 2 12 10; rov: 0 0 0 0; orverts: ; or0: sum: 0; (2 7) (3 9) (2 7) (3 11) (3 11) (3 11) ; SEAL;
    s1=28, v=26
    or0:prev_unsorted_logs/o2em_26:g39: new o6c4c: or: 00; t1+t3: 00; s0: 16; s1: 28; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 11; t3: 0; t4: 28; a: 0 19 0 38; ruv: 1 4 11 10; rov: 0 0 0 0; orverts: ; or0: sum: 0; (2 7) (3 11) (2 7) (4 13) (2 7) (3 12) ; SEAL;
    or0:prev_unsorted_logs/o2em_26:g39: new o6c4c: or: 00; t1+t3: 00; s0: 16; s1: 28; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 11; t3: 0; t4: 28; a: 0 19 0 38; ruv: 1 3 13 9; rov: 0 0 0 0; orverts: ; or0: sum: -2; (2 7) (3 11) (2 7) (4 13) (2 7) (3 12) ; SEAL;
    or0:prev_unsorted_logs/o2em_26:g131: new o6c4c: or: 00; t1+t3: 00; s0: 16; s1: 28; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 11; t3: 0; t4: 28; a: 0 20 0 32; ruv: 0 3 16 7; rov: 0 0 0 0; orverts: ; or0: sum: -4; (3 10) (2 7) (3 9) (3 10) (3 11) (2 5) ; SEAL;




g623: new o6c4c: or: 00; t1+t3: 00; s0: 14; s1: 26; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 16; t3: 0; t4: 26; comps: 0 2 0 6 0 2 0 6; rov: 0 0 0 0; orverts: ; or0: sum: -2; (3 10) (2 5) (2 9) (3 13) (2 9) (2 5) ; vertices descriptions: u t2 t2 t2 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t2 t4 ; u t2 t2 t2 ; u t2 t2 t2 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t2 t2 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; circuits:
s1-s0=12
t4t4t4: 9
t2t2t2: 4

g2840: new o6c4c: or: 00; t1+t3: 00; s0: 16; s1: 22; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 20; t3: 0; t4: 22; comps: 0 4 0 0 0 2 0 0; rov: 0 0 0 0; orverts: ; or0: sum: -10; (3 13) (2 9) (2 13) (3 11) (2 5) (4 12) ; vertices descriptions: u t2 t2 t4 ; u t2 t2 t2 ; u t2 t2 t2 ; u t2 t2 t2 ; u t2 t2 t4 ; u t2 t2 t2 ; u t2 t2 t2 ; u t2 t2 t2 ; u t2 t2 t4 ; u t2 t2 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; circuits:
s1-s0=6
t4t4t4: 6
t2t2t2: 6



g13: new o6c4c: or: 00; t1+t3: 00; s0: 14; s1: 24; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 9; t3: 0; t4: 24; comps: 0 6 0 0 0 6 0 0; rov: 0 0 0 0; orverts: ; or0: sum: -4; (3 11) (2 7) (2 7) (2 5) (2 5) (3 11) ; vertices descriptions: u t4 t4 t4 ; u t2 t2 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; circuits:
s1-s0=24-14=10
t4t4t4: 6
t2t2t2: 0


g155: new o6c4c: or: 00; t1+t3: 00; s0: 13; s1: 31; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 3; t1: 0; t2: 8; t3: 0; t4: 31; comps: 0 4 0 6 0 6 0 6; rov: 0 0 0 0; ruv: 0 1 14 11; orverts: ; or0: sum: 7; (2 9) (2 5) (3 8) (2 5) (2 5) (2 9) ; vertices descriptions: u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; circuits:
g155: new o6c4c: or: 00; t1+t3: 00; s0: 13; s1: 31; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 3; t1: 0; t2: 8; t3: 0; t4: 31; comps: 0 4 0 6 0 6 0 6; rov: 0 0 0 0; ruv: 0 1 14 11; orverts: ; or0: sum: 7; (2 5) (2 9) (3 8) (2 5) (2 5) (2 9) ; vertices descriptions: u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; circuits:



g26: new o6c4c: or: 00; t1+t3: 00; s0: 15; s1: 27; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 3; t1: 0; t2: 9; t3: 0; t4: 27; comps: 0 2 0 2 0 2 0 4; rov: 0 0 0 0; ruv: 0 3 12 9; orverts: ; or0: genus: 1; chord_info: (17 13 6) (8 1 0) (9 12 6) (3 9) (2 9) (3 9) (2 5) (3 10) (2 5) ; vertices descriptions: u t4 t4 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t2 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; circuits:
g26: new o6c4c: or: 00; t1+t3: 00; s0: 15; s1: 29; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 3; t1: 0; t2: 7; t3: 0; t4: 29; comps: 0 4 0 6 0 0 0 6; rov: 0 0 0 0; ruv: 0 1 12 11; orverts: ; or0: genus: 2; chord_info: (17 13 6) (6 1 0) (11 12 6) (3 9) (3 9) (2 9) (3 10) (2 5) (2 5) ; vertices descriptions: u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t2 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; circuits:
g26: new o6c4c: or: 00; t1+t3: 00; s0: 15; s1: 31; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 3; t1: 0; t2: 5; t3: 0; t4: 31; comps: 0 6 0 6 0 0 0 6; rov: 0 0 0 0; ruv: 0 0 10 14; orverts: ; or0: genus: 2; chord_info: (17 13 6) (4 1 0) (13 12 6) (3 9) (3 9) (3 10) (2 5) (2 5) (2 9) ; vertices descriptions: u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; circuits:
g26: new o6c4c: or: 00; t1+t3: 00; s0: 15; s1: 29; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 3; t1: 0; t2: 7; t3: 0; t4: 29; comps: 0 4 0 6 0 0 0 6; rov: 0 0 0 0; ruv: 0 1 12 11; orverts: ; or0: genus: 2; chord_info: (17 13 6) (6 1 0) (11 12 6) (3 9) (3 9) (2 9) (2 5) (2 5) (3 10) ; vertices descriptions: u t4 t4 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; circuits:




g223: new o6c4c: or: 00; t1+t3: 00; s0: 14; s1: 28; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 14; t3: 0; t4: 28; comps: 0 6 0 6 0 6 0 6; rov: 0 0 0 0; ruv: 1 4 17 6; orverts: ; or0: genus: 3; cer: 10; g2: 5; cep: 2; g3: 9; chord_info: (20 14 8) (8 4 2) (12 10 6) (2 7) (2 9) (3 11) (2 7) (3 11) (2 9) ; vertices descriptions: u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t2 t2 ; u t2 t2 t4 ; circuits:
g223: new o6c4c: or: 00; t1+t3: 00; s0: 12; s1: 24; s2: 3; PAR: 1 (1); em: 3 3; o2: 0 0; t1: 0; t2: 18; t3: 0; t4: 24; comps: 0 6 0 0 0 0 0 0; rov: 0 0 0 0; ruv: 0 15 6 7; orverts: ; or0: genus: -4; cer: 12; g2: -4; cep: 0; g3: 2; chord_info: (12 18 12) (3 12 3) (9 6 9) (2 7) (2 7) (2 7) (2 7) (2 7) (2 7) ; vertices descriptions: u t2 t2 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; circuits:


- формула/inequality:
    - v-e+f = 2 - 2g
        - planar graphs: v-e+f=2
        - e=v-1, дерево, f=1;
        - v=e, 1 цикл; 2 = 2 грани, внутренняя и внешняя
    - betti numbers: 1 2g 1 => 2 - 2g
    - riemann-hurwitz formula
    - morse inequalities
        https://en.wikipedia.org/wiki/Morse_theory#Morse_inequalities
        https://encyclopediaofmath.org/wiki/Morse_inequalities#:~:text=The%20Morse%20inequalities%20relate%20the,%2C%20%CE%BB%3D0%E2%80%A6n.

    - наверно я бы хотел, чтобы g отвечало за oriented вершины
    - тогда для or=0 я бы ожидал одинакового инварианта от любого o6c4c решения

    - вообще g может отвечать за perfect matching

    что имеем:
        - vertices: v; ruv, ... 
        - edges: s1=t4=rich, rrn, ...
        - circuits: s0, cer, cep, cel, ...
        - perfect matchings: chords, t2/t4, ...
    - (circuits-edges) % 2 = 0
    - по идее v надо тоже иметь такой что v%2 = 0

    - что если глянуть самые маленькие примеры
    - а именно 2 решения на 20.05g5
        - они правда похожи, даже как будто одинаковые
        - статистики все полностью совпадают
    - 22.05; g13 - 2 решения, g15 - 2, g16 - 2


20.05g5:
    пути poor рёбер: 1,1,1,1,2,2
    s0: 14; t4=s1: 22; s2: 3; em: 3 3; o2: 0 0; t2: 8;
    s1s0diff: 8; rrn13: 12; ruv13: 8; ruv02: 12;
    ruv: 0 2 12 6;
    rrn: 0 2 6 10 4;
    comps: 0 4 0 6 0 0 0 6;
    genus: 1;
    cer: 4; g2: 6; cep: 8; g3: 4; cel: 2; g4: 7;
    chord_info: (17 12 1) (7 1 0) (10 11 1)
    (2 9) (2 5) (2 9) (2 5) (3 9) (3 9)


22.05, интересная пара графов:
    g13: 
        or: 00; s0: 14; s1: 24; s2: 3; em: 3 3; o2: 0 0; t2: 9; 
        ruv: 0 2 14 6; or0: genus: 2; cer: 6; cep: 6; cel: 2; rrn024: 12; 
        evens: s1s0diff: 10; rrn13: 12; ruv13: 8; ruv02: 14;
        chord_info: (17 12 4) (9 0 0) (8 12 4)
        (2 5) (2 5) (2 7) (2 7) (3 11) (3 11) ;
        rrn: 0 2 8 10 4; SEAL;
    g15: 
        or: 00; s0: 14; s1: 24; s2: 3; em: 3 3; o2: 0 0; t2: 9; 
        ruv: 0 2 14 6; or0: genus: 2; cer: 2; cep: 10; cel: 2; rrn024: 12; 
        evens: s1s0diff: 10; rrn13: 12; ruv13: 8; ruv02: 14; 
        chord_info: (15 14 4) (7 2 0) (8 12 4) 
        (2 5) (2 5) (2 5) (2 9) (3 10) (3 10) ; 
        rrn: 0 2 8 10 4; SEAL;

и ещё одна пара
    g16:
        or: 00; s0: 12; s1: 24; s2: 3; em: 3 3; o2: 0 0; t2: 9; 
        ruv: 0 5 8 9; or0: genus: 0; cer: 4; cep: 8; cel: 0; rrn024: 12; 
        evens: s1s0diff: 12; rrn13: 12; ruv13: 14; ruv02: 8; 
        chord_info: (14 10 9) (4 4 1) (10 6 8) 
        (2 5) (2 5) (2 5) (2 5) (2 9) (2 9); 
        rrn: 0 2 5 10 7; SEAL;
    g16: 
        or: 00; s0: 12; s1: 24; s2: 3; em: 3 3; o2: 0 0; t2: 9; 
        ruv: 0 5 8 9; or0: genus: 0; cer: 0; cep: 12; cel: 0; rrn024: 12; 
        evens: s1s0diff: 12; rrn13: 12; ruv13: 14; ruv02: 8; 
        chord_info: (14 10 9) (4 4 1) (10 6 8) 
        (2 5) (2 5) (2 5) (2 5) (2 9) (2 9); 
        rrn: 0 4 3 8 9; SEAL;

ещё 22.05:
    g13: new o6c4c: or: 00; s0: 14; s1: 26; s2: 3; em: 3 3; o2: 0 0; t2: 7; ruv: 0 2 10 10; or0: genus: 1; cer: 4; cep: 10; cel: 2; rrn024: 14; evens: s1s0diff: 12; rrn13: 12; ruv13: 12; ruv02: 10; chord_info: (17 12 4) (6 1 0) (11 11 4) (2 5) (2 5) (2 7) (2 7) (3 11) (3 11) ; rrn: 0 1 5 11 9; SEAL;
    g13: new o6c4c: or: 00; s0: 14; s1: 26; s2: 3; em: 3 3; o2: 0 0; t2: 7; ruv: 1 0 11 10; or0: genus: 2; cer: 2; cep: 14; cel: 2; rrn024: 12; evens: s1s0diff: 12; rrn13: 14; ruv13: 10; ruv02: 12; chord_info: (17 12 4) (5 2 0) (12 10 4) (2 5) (2 5) (2 7) (2 7) (3 11) (3 11) ; rrn: 0 0 4 14 8; SEAL;

    g15: new o6c4c: or: 00; s0: 14; s1: 26; s2: 3; em: 3 3; o2: 0 0; t2: 7; ruv: 0 1 12 9; or0: genus: 2; cer: 4; cep: 10; cel: 2; rrn024: 12; evens: s1s0diff: 12; rrn13: 14; ruv13: 10; ruv02: 12; chord_info: (15 14 4) (5 2 0) (10 12 4) (2 5) (2 5) (2 5) (2 9) (3 10) (3 10) ; rrn: 0 1 5 13 7; SEAL;
    g15: new o6c4c: or: 00; s0: 14; s1: 28; s2: 3; em: 3 3; o2: 0 0; t2: 5; ruv: 0 2 6 14; or0: genus: 0; cer: 2; cep: 14; cel: 2; rrn024: 20; evens: s1s0diff: 14; rrn13: 8; ruv13: 16; ruv02: 6; chord_info: (15 14 4) (3 2 0) (12 12 4) (2 5) (2 5) (2 5) (2 9) (3 10) (3 10) ; rrn: 0 0 4 8 16; SEAL;


до 26.05:
    u_comps:
        3 1 (1 граф)
        5 1
        6 1
        6 2
        7 2
        8 3

    u_morecomps_undiv:
        0 6 0 6
        2 0 0 0
        2 0 6 0
        2 2 2 4
        2 6 2 6
        2 6 4 6
        2 6 6 6
        4 6 0 6
        4 6 4 6
        6 0 6 0
        6 6 0 6
        6 6 6 6
        и т. д.
        примерно все вариации есть
    
    есть такое
        u_comps: 6 1; u_morecomps_undiv: 0 6 6 6; genus: 1;
        u_comps: 6 1; u_morecomps_undiv: 0 6 6 6; genus: 2;

        u_comps: 5 1; u_morecomps_undiv: 2 6 2 6; s1s0diff: 14;
        u_comps: 5 1; u_morecomps_undiv: 2 6 2 6; s1s0diff: 16;

        u_comps: 5 1; s1s0diff: 14; s0: 16; s1: 30;
        u_comps: 5 1; s1s0diff: 16; s0: 14; s1: 30;
        u_comps: 5 1; s1s0diff: 16; s0: 17; s1: 33;
        u_comps: 5 1; s1s0diff: 18; s0: 15; s1: 33;




g748: new o6c4c: or: 00; s0: 14; s1: 30; s2: 3; em: 3 3; o2: 0 0; t2: 12; u_comps: 7 2; u_morecomps_undiv: 6 0 6 0; ruv: 1 4 13 10; rrn: 0 3 6 13 8; or0: genus: 2; sames: cep: 12; cel: 2; rrn024: 14; evens: s1s0diff: 16; cop: 2; col: 12; rrn13: 16; ruv13: 14; ruv02: 14; chord_info: (13 17 12) (5 4 3) (8 13 9); chord_layers: (2 5) (3 10) (2 5) (2 5) (2 5) (3 13) ; SEAL;
g748: new o6c4c: or: 00; s0: 14; s1: 26; s2: 3; em: 3 3; o2: 0 0; t2: 16; u_comps: 8 4; u_morecomps_undiv: 4 2 4 4; ruv: 2 5 16 5; rrn: 1 3 10 9 3; or0: genus: 2; sames: cep: 10; cel: 2; rrn024: 14; evens: s1s0diff: 12; cop: 4; col: 12; rrn13: 12; ruv13: 10; ruv02: 18; chord_info: (13 17 12) (7 6 3) (6 11 9); chord_layers: (2 5) (2 5) (2 5) (3 10) (2 5) (3 13) ; SEAL;
g748: new o6c4c: or: 00; s0: 14; s1: 32; s2: 3; em: 3 3; o2: 0 0; t2: 10; u_comps: 5 1; u_morecomps_undiv: 2 6 4 6; ruv: 0 6 8 14; rrn: 0 2 6 10 14; or0: genus: 0; sames: cep: 14; cel: 2; rrn024: 20; evens: s1s0diff: 18; cop: 0; col: 12; rrn13: 12; ruv13: 20; ruv02: 8; chord_info: (13 17 12) (3 4 3) (10 13 9); chord_layers: (3 10) (2 5) (2 5) (2 5) (3 13) (2 5) ; SEAL;
g748: new o6c4c: or: 00; s0: 14; s1: 28; s2: 3; em: 3 3; o2: 0 0; t2: 14; u_comps: 7 3; u_morecomps_undiv: 4 4 2 2; ruv: 1 6 13 8; rrn: 1 2 9 10 6; or0: genus: 1; sames: cep: 10; cel: 2; rrn024: 16; evens: s1s0diff: 14; cop: 4; col: 12; rrn13: 12; ruv13: 14; ruv02: 14; chord_info: (13 17 12) (5 6 3) (8 11 9); chord_layers: (3 13) (2 5) (2 5) (2 5) (3 10) (2 5) ; SEAL;
g989: new o6c4c: or: 00; s0: 14; s1: 28; s2: 3; em: 3 3; o2: 0 0; t2: 14; u_comps: 8 1; u_morecomps_undiv: 2 6 0 6; ruv: 2 2 18 6; rrn: 0 2 12 10 4; or0: genus: 4; sames: cep: 10; cel: 2; rrn024: 16; evens: s1s0diff: 14; cop: 4; col: 12; rrn13: 12; ruv13: 8; ruv02: 20; chord_info: (13 20 9) (7 5 2) (6 15 7); chord_layers: (2 5) (3 13) (2 5) (2 5) (2 5) (3 13) ; SEAL;
g989: new o6c4c: or: 00; s0: 14; s1: 28; s2: 3; em: 3 3; o2: 0 0; t2: 14; u_comps: 8 1; u_morecomps_undiv: 2 6 0 6; ruv: 2 2 18 6; rrn: 0 2 12 10 4; or0: genus: 4; sames: cep: 10; cel: 2; rrn024: 16; evens: s1s0diff: 14; cop: 4; col: 12; rrn13: 12; ruv13: 8; ruv02: 20; chord_info: (13 20 9) (7 5 2) (6 15 7); chord_layers: (2 5) (3 13) (2 5) (2 5) (2 5) (3 13) ; SEAL;
g2251: new o6c4c: or: 00; s0: 14; s1: 26; s2: 3; em: 3 3; o2: 0 0; t2: 16; u_comps: 6 4; u_morecomps_undiv: 4 2 4 4; ruv: 0 11 10 7; rrn: 3 4 5 8 6; or0: genus: -2; sames: cep: 10; cel: 2; rrn024: 14; evens: s1s0diff: 12; cop: 4; col: 12; rrn13: 12; ruv13: 18; ruv02: 10; chord_info: (13 20 9) (7 8 1) (6 12 8); chord_layers: (2 5) (2 9) (3 9) (2 9) (2 5) (3 9) ; SEAL;
g2271: new o6c4c: or: 00; s0: 14; s1: 30; s2: 3; em: 3 3; o2: 0 0; t2: 12; u_comps: 9 3; u_morecomps_undiv: 6 6 0 6; ruv: 0 3 18 7; rrn: 0 0 15 12 3; or0: genus: 4; sames: cep: 14; cel: 2; rrn024: 18; evens: s1s0diff: 16; cop: 0; col: 12; rrn13: 12; ruv13: 10; ruv02: 18; chord_info: (13 20 9) (8 2 2) (5 18 7); chord_layers: (2 5) (3 11) (2 7) (2 7) (2 5) (3 11) ; SEAL;
g2271: new o6c4c: or: 00; s0: 14; s1: 34; s2: 3; em: 3 3; o2: 0 0; t2: 8; u_comps: 7 1; u_morecomps_undiv: 2 6 0 6; ruv: 0 1 14 13; rrn: 0 0 7 16 11; or0: genus: 4; sames: cep: 14; cel: 2; rrn024: 18; evens: s1s0diff: 20; cop: 0; col: 12; rrn13: 16; ruv13: 14; ruv02: 14; chord_info: (13 20 9) (4 2 2) (9 18 7); chord_layers: (3 11) (2 5) (2 7) (2 7) (3 11) (2 5) ; SEAL;




g13252: new o6c4c: or: 10; t1+t3: 30; s0: 20; s1: 45; s2: 0; s2uu: 0; npar: 1; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; oon: 10 0 0 0; uon: 1 11 5 3; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 25; col: 16; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (23 19 3) t1(0 0 0) t2(0 0 0) t3(15 13 2) t4(8 6 1); chord_layers: (2 10) (3 0) (3 6) (3 6) (4 3) (5 0);
g13252: new o6c4c: or: 10; t1+t3: 30; s0: 20; s1: 45; s2: 0; s2uu: 0; npar: 1; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; oon: 10 0 0 0; uon: 0 12 6 2; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 25; col: 16; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (23 19 3) t1(0 0 0) t2(0 0 0) t3(15 13 2) t4(8 6 1); chord_layers: (2 10) (3 0) (3 6) (3 6) (4 3) (5 0);
    единственное различие - uon: 1 11 5 3 = uon: 0 12 6 2



int npar = (s0 + s1 + oriented_vertices.size() + even_t4_matchings) % 2;
    oriented_vertices
        по-моему не получится изменить - локально статистики совпадают
    s1 — number of rich edges = t3+t4
        не изменить
    s0 — number of circuits
        мб можно подправить; а как?
    even_t4_matchings — half of the number of perfect matchings with even number of t4 edges (0, 1, 2 or 3)
        было бы наверно странно это менять, но мб

g13042: new o6c4c: or: 10; t1+t3: 30; s0: 18; s1: 45; s2: 0; s2uu: 0; npar: 1; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; oon: 10 0 0 0; uon: 1 10 7 2; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 27; col: 14; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (18 22 5) t1(0 0 0) t2(0 0 0) t3(11 15 4) t4(7 7 1); chord_layers: (2 10) (2 10) (3 1) (3 5) (3 6) (5 0);
g14094: new o6c4c: or: 10; t1+t3: 30; s0: 19; s1: 45; s2: 0; s2uu: 0; npar: 0; em: 3 0; o2: 0 0; t1: 0; t2: 0; t3: 30; t4: 15; u_comps: 0 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 10; ruv: 0 0 0 20; oon: 10 0 0 0; uon: 1 10 7 2; rrn: 0 0 0 0 45; prn: 0 0 0 0 0; ors:_10; or0: sames: rrn024: 45; evens: s1s0diff: 26; col: 14; rrn13: 0; ruv13: 20; ruv02: 0; chord_info: (22 21 2) t1(0 0 0) t2(0 0 0) t3(14 15 1) t4(8 6 1); chord_layers: (2 10) (3 2) (3 6) (3 6) (4 0) (4 1);


(5 1) (10 4) (20 6) (25 9)
  4      6     14     16
vs
(6 2) (8 3) (11 3) (15 5) (20 7)
  4     5      8     10     13


(5 1) (5 1) (5 1) 
(10 4) (12 4) 
(20 6) (20 6) 
(25 9)
+
(5 2) (5 2) (5 2) (5 2) (5 2) (5 2) (5 2) (5 2) 
(13 4) 
(25 8) 
= 8+(10/2)


(5 1) (5 1) 
(6 2) 
(8 3) 
(11 3) 
(12 4) 
(15 5) 
(20 6) 
+
(5 2) (5 2) (5 2) (5 2) (5 2) (5 2) (5 2) (5 2) 
(13 4) 
(20 7) 
(25 8)
= 8+(11/2)


flow5: u244 u244 o122 u334 o113 u122 u113 u244 u113 o244 u122 o334 u244 u113 u122 o122 o334 u334 u334 u122 u334 o122 o334 u113

flow5: o122 o113 o244 o334 o122 o334 o122 o334
    1 3 2 4 1 4 1 4

u244 u244 u122 u122 u244 u334 o113 u334 o113 u113 u244 u122 u113 u334 u113 u122 u334 u244 u113 u244 u122 u334 o113 u244


24.05
or_sum: 3;
or_sum: 5;
or_sum: 6;
or_sum: 8;
or_sum: 9;
or_sum: 10;
or_sum: 11;
or_sum: 12;
or_sum: 14;
or_sum: 15;
or_sum: 17;
or_sum: 20;
or_sum: 25;
or_sum: 30;



g232: new o6c4c: or: 03; t1+t3: 09; s0: 12; s1: 19; s2: 2; s2uu: 1; PAR: 1 (1); npar: 1; or_counts:_3; reors: 1; t1: 0; t2: 20; t3: 9; t4: 10; u_comps: 2 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 3; ruv: 8 8 0 7; oon: 3 0 0 0; uon: 16 6 0 1; rrn: 0 0 8 0 11; prn: 4 16 0 0 0; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 19; evens: s1s0diff: 7; col: 12; rrn13: 0; ruv13: 15; ruv02: 8; chord_info: (19 8 12) t1(0 0 0) t2(8 0 12) t3(5 4 0) t4(6 4 0); chord_layers: (2 4 1) (2 4 1) (2 4 1) (2 4 1) (2 8 0) (2 8 0); no_2cdcs;
g276: new o6c4c: or: 03; t1+t3: 09; s0: 12; s1: 19; s2: 1; s2uu: 2; PAR: 0 (0); npar: 0; or_counts:_3; reors: 1; t1: 0; t2: 20; t3: 9; t4: 10; u_comps: 2 1; u_morecomps_undiv: 0 6 0 6; rov: 0 0 0 3; ruv: 8 8 0 7; oon: 3 0 0 0; uon: 16 6 0 1; rrn: 0 0 8 0 11; prn: 4 16 0 0 0; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 19; evens: s1s0diff: 7; col: 12; rrn13: 0; ruv13: 15; ruv02: 8; chord_info: (19 8 12) t1(0 0 0) t2(8 0 12) t3(5 4 0) t4(6 4 0); chord_layers: (2 0 0) (2 4 0) (2 4 0) (2 8 1) (2 8 1) (2 8 2); no_2cdcs;

chord_layers: (2 4 1) (2 4 1) (2 4 1) (2 4 1) (2 8 0) (2 8 0);
vs
chord_layers: (2 0 0) (2 4 0) (2 4 0) (2 8 1) (2 8 1) (2 8 2);

u122_o113_u244_o113_o334_u244_u334_u334_o244_u113_u122_u122_o113_o244_o113_u122_o244_o244_u122_u244_o113_u334_o113_u334_u122_u334_
u244_o113_u122_o334_o113_u244_u122_u122_o122_u113_u334_o113_o113_o244_o334_u334_o244_o122_o334_u244_u244_u122_u334_u122_u334_u113_
u334_u122_u122_u122_o113_u334_o334_o113_u334_u122_o122_u122_u122_u334_u122_o244_u334_u334_u122_u334_u244_o334_u334_o113_u244_u122_




g13: new o6c4c: or: 00; t1+t3: 00; s0: 14; s1: 22; s2: 3; s2uu: 3; PAR: 1 (1); npar: 1; or_counts:_0_6_8; reors: 3; em: 3 3; o2: 0 0; t1: 0; t2: 17; t3: 0; t4: 22; u_comps: 6 2; u_morecomps_undiv: 6 2 4 4; rov: 0 0 0 0; ruv: 4 5 12 5; oon: 0 0 0 0; uon: 26 0 0 0; rrn: 1 3 6 9 3; prn: 3 4 3 4 3; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 10; evens: s1s0diff: 8; col: 12; rrn13: 12; ruv13: 10; ruv02: 16; chord_info: (17 16 6) t1(0 0 0) t2(8 4 5) t3(0 0 0) t4(9 12 1); chord_layers: (2 4 1) (2 4 2) (2 8 4) (2 8 5) (3 1 1) (3 3 1); no_2cdcs; SEAL;
g43: new o6c4c: or: 00; t1+t3: 00; s0: 14; s1: 22; s2: 3; s2uu: 3; PAR: 1 (1); npar: 1; or_counts:_0_6_8; reors: 3; em: 3 3; o2: 0 0; t1: 0; t2: 17; t3: 0; t4: 22; u_comps: 6 2; u_morecomps_undiv: 6 2 4 4; rov: 0 0 0 0; ruv: 4 5 12 5; oon: 0 0 0 0; uon: 26 0 0 0; rrn: 1 3 6 9 3; prn: 2 6 2 4 3; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 10; evens: s1s0diff: 8; col: 12; rrn13: 12; ruv13: 10; ruv02: 16; chord_info: (17 16 6) t1(0 0 0) t2(8 4 5) t3(0 0 0) t4(9 12 1); chord_layers: (2 4 1) (2 4 2) (2 8 4) (2 8 5) (3 1 1) (3 3 1); no_2cdcs; SEAL;
g43: new o6c4c: or: 00; t1+t3: 00; s0: 14; s1: 22; s2: 3; s2uu: 3; PAR: 1 (1); npar: 1; or_counts:_0_6_8; reors: 3; em: 3 3; o2: 0 0; t1: 0; t2: 17; t3: 0; t4: 22; u_comps: 6 2; u_morecomps_undiv: 6 2 4 4; rov: 0 0 0 0; ruv: 4 5 12 5; oon: 0 0 0 0; uon: 26 0 0 0; rrn: 1 3 6 9 3; prn: 2 6 2 4 3; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 10; evens: s1s0diff: 8; col: 12; rrn13: 12; ruv13: 10; ruv02: 16; chord_info: (17 16 6) t1(0 0 0) t2(8 4 5) t3(0 0 0) t4(9 12 1); chord_layers: (2 4 1) (2 4 2) (2 8 4) (2 8 5) (3 1 1) (3 3 1); no_2cdcs; SEAL;


g155: new o6c4c: or: 00; t1+t3: 00; s0: 13; s1: 31; s2: 3; s2uu: 3; PAR: 1 (1); npar: 1; or_counts:_0; reors: 1; em: 3 3; o2: 0 3; t1: 0; t2: 8; t3: 0; t4: 31; u_comps: 7 1; u_morecomps_undiv: 4 6 6 6; rov: 0 0 0 0; ruv: 0 1 14 11; oon: 0 0 0 0; uon: 26 0 0 0; rrn: 0 0 7 16 8; prn: 0 0 0 2 6; mismatch: 0; has_nzmod5: 0; has_nzmod6: 0; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 15; evens: s1s0diff: 18; col: 12; rrn13: 16; ruv13: 12; ruv02: 14; chord_info: (13 15 11) t1(0 0 0) t2(4 1 3) t3(0 0 0) t4(9 14 8); chord_layers: (2 4 2) (2 4 2) (2 8 5) (2 8 8) (2 8 8) (3 5 5); no_2cdcs; SEAL;
g155: new o6c4c: or: 00; t1+t3: 00; s0: 13; s1: 31; s2: 3; s2uu: 3; PAR: 1 (1); npar: 1; or_counts:_0; reors: 1; em: 3 3; o2: 0 3; t1: 0; t2: 8; t3: 0; t4: 31; u_comps: 7 1; u_morecomps_undiv: 4 6 6 6; rov: 0 0 0 0; ruv: 0 1 14 11; oon: 0 0 0 0; uon: 26 0 0 0; rrn: 0 0 7 16 8; prn: 0 0 0 2 6; mismatch: 0; has_nzmod5: 0; has_nzmod6: 0; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 15; evens: s1s0diff: 18; col: 12; rrn13: 16; ruv13: 12; ruv02: 14; chord_info: (13 15 11) t1(0 0 0) t2(4 1 3) t3(0 0 0) t4(9 14 8); chord_layers: (2 4 2) (2 4 2) (2 8 5) (2 8 8) (2 8 8) (3 5 5); no_2cdcs; SEAL;
g277: new o6c4c: or: 00; t1+t3: 00; s0: 15; s1: 33; s2: 3; s2uu: 3; PAR: 1 (1); npar: 1; or_counts:_0; reors: 1; em: 3 3; o2: 0 3; t1: 0; t2: 6; t3: 0; t4: 33; u_comps: 5 1; u_morecomps_undiv: 4 6 6 6; rov: 0 0 0 0; ruv: 0 1 10 15; oon: 0 0 0 0; uon: 26 0 0 0; rrn: 0 0 4 14 15; prn: 0 0 0 2 4; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 19; evens: s1s0diff: 18; col: 12; rrn13: 14; ruv13: 16; ruv02: 10; chord_info: (16 14 9) t1(0 0 0) t2(5 1 0) t3(0 0 0) t4(11 13 9); chord_layers: (2 6 6) (2 8 7) (2 8 8) (3 3 3) (3 3 3) (3 4 4); no_2cdcs; SEAL;
g277: new o6c4c: or: 00; t1+t3: 00; s0: 15; s1: 33; s2: 3; s2uu: 3; PAR: 1 (1); npar: 1; or_counts:_0; reors: 1; em: 3 3; o2: 0 3; t1: 0; t2: 6; t3: 0; t4: 33; u_comps: 5 1; u_morecomps_undiv: 4 6 6 6; rov: 0 0 0 0; ruv: 0 1 10 15; oon: 0 0 0 0; uon: 26 0 0 0; rrn: 0 0 4 14 15; prn: 0 0 0 2 4; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 19; evens: s1s0diff: 18; col: 12; rrn13: 14; ruv13: 16; ruv02: 10; chord_info: (16 14 9) t1(0 0 0) t2(5 1 0) t3(0 0 0) t4(11 13 9); chord_layers: (2 6 6) (2 8 7) (2 8 8) (3 3 3) (3 3 3) (3 4 4); no_2cdcs; SEAL;


что ещё можно глянуть
есть рёбра (rich/poor), есть цепи, есть циклы, есть вершины (которые правда все одинаковые),
есть perfect matchings, есть хорды, есть зацепления между цепями,
есть куча 244-flows (10 штук)




g14: new o6c4c: or: 03; t1+t3: 09; s0: 15; s1: 27; s2: 2; s2uu: 1; PAR: 0; o244: 3; or_type_count: 3; rich_type_count: 24; less: 0; or_counts:_3; rich244:_11_15_10_10_15_10_10_8_8_11; r244odd: 4; reors: 1; em: 0 1; o2: 0 2; t1: 0; t2: 6; t3: 9; t4: 18; u_comps: 5 1; u_morecomps_undiv: 6 6 4 6; rov: 0 0 0 3; ruv: 0 1 10 8; dup_oon: 3 0 0 0; uon: 13 3 3 0; rrn: 0 1 3 13 10; prn: 0 0 0 2 4; has_nz5: 1; mismatch: 0; has_nzmod5: 1; has_nzmod6: 1; has_nzmodb: 1; flow5: u334_u122_u122_u122_u113_u334_u122_u334_u244_u113_u122_u334_u122_o334_u244_u334_o334_u113_o334_u122_u122_u244_; or_sum: 12; or0: sames: rrn024: 13; evens: s1s0diff: 12; col: 12; rrn13: 14; ruv13: 9; ruv02: 10; chord_info: (19 12 2) t1(0 0 0) t2(4 2 0) t3(6 3 0) t4(9 7 2); chord_layers: (2 2 1) (2 4 4) (2 6 5) (3 1 0) (3 1 0) (3 2 1); no_2cdcs;

g3: new o6c4c: or: 03; t1+t3: 09; s0: 12; s1: 27; s2: 2; s2uu: 1; PAR: 1; o244: 0; or_type_count: 3; rich_type_count: 22; less: 0; or_counts:_3; rich244:_12_12_7_13_7_10_12_10_12_13; r244odd: 4; reors: 1; em: 0 1; o2: 0 2; t1: 0; t2: 6; t3: 9; t4: 18; u_comps: 4 1; u_morecomps_undiv: 4 6 4 6; rov: 0 0 0 3; ruv: 0 2 8 9; dup_oon: 3 0 0 0; uon: 12 6 0 1; rrn: 0 0 2 16 9; prn: 0 0 0 4 2; has_nz5: 0; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 11; evens: s1s0diff: 15; col: 12; rrn13: 16; ruv13: 11; ruv02: 8; chord_info: (11 16 6) t1(0 0 0) t2(0 2 4) t3(5 4 0) t4(6 10 2); chord_layers: (2 4 2) (2 4 2) (2 4 3) (2 4 3) (2 6 2) (2 6 2); no_2cdcs;


DONE: or=3, par=0 vs par=1
    check rich244
    don't notice anything helpful

    22.05
    s1,s2, par, r244odd
    17; 0;  1;  0;
    17; 2;  1;  4;
    18; 1;  1;  4;
    19; 0;  1;  0;
    20; 1;  1;  4;
    21; 0;  1;  0;
    21; 1;  0;  6;
    21; 2;  1;  4;
    22; 2;  0;  6;
        these 2 are interesting
    23; 0;  1;  0;
    24; 1;  1;  4;
    24; 3;  1;  0;
    25; 1;  1;  6;
    25; 2;  0;  4;
    25; 3;  1;  10;
    26; 1;  0;  4;
    26; 2;  1;  6;
    27; 1;  1;  6;
    27; 2;  0;  4;
    27; 2;  1;  4;
        oh, okay, here we have something broken kind of
    28; 0;  1;  10;
    28; 1;  0;  4;
    28; 2;  1;  6;
    29; 1;  1;  6;
    29; 2;  0;  4;
    30; 1;  0;  4;
    30; 2;  1;  6;
    33; 0;  1;  0;



g24: new o6c4c: or: 04; t1+t3: 12; s0: 15; s1: 29; s2: 0; s2uu: 0; PAR: 0; or_type_count: 4; rich_type_count: 24; less: 0; or_counts:_4; rich244:_14_12_12_14_8_10_10_12_10_14; r244odd: 0; reors: 1; em: 3 0; o2: 0 0; t1: 0; t2: 7; t3: 12; t4: 17; u_comps: 5 1; u_morecomps_undiv: 6 6 6 6; rov: 0 0 0 4; ruv: 1 0 11 8; dup_oon: 4 0 0 0; uon: 12 4 4 0; rrn: 0 0 3 16 10; prn: 0 0 3 0 4; has_nz5: 0; mismatch: 0; has_nzmod5: 0; has_nzmod6: 1; has_nzmodb: 0; flow5: nope; or_sum: nope; or0: sames: rrn024: 13; evens: s1s0diff: 14; col: 12; rrn13: 16; ruv13: 8; ruv02: 12; chord_info: (21 12 3) t1(0 0 0) t2(5 2 0) t3(8 4 0) t4(8 6 3); chord_layers: (2 3 2) (2 5 3) (2 5 5) (3 1 0) (3 1 1) (3 3 1); no_2cdcs;

