
2x6cdcs, o6c4c => or + s1 чётно (<=> t4 чётно)
видимо есть более тонкие локальные конструкции внутри
более тонкие чем просто отсутствие вершин
  u t3 t3 t4
  u t4 t4 t4
что бывает
o t1 t1 t1
o t1 t1 t3
o t1 t3 t3
o t3 t3 t3

u t2 t2 t2
u t2 t2 t3
u t2 t2 t4
u t2 t3 t3
u t2 t3 t4
u t2 t4 t4
u t3 t3 t3
u t3 t4 t4
что не бывает
u t3 t3 t4
u t4 t4 t4

t4 чётно
что интересно
  k1 u t2 t2 t4
  k2 u t2 t3 t4
  k3 u t2 t4 t4
  k4 u t3 t4 t4
k1+k2+2*k3+2*k4=2*#t4
(k1+k2)/2+k3+k4=#t4=2*q


todo:
  в принципе ещё можно классифицировать рёбра, а не вершины
  причём можно и все рёбра в графе, и только те, что в паросочетании, или наоборот
  а именно
  \_/
  / \
  5 рёбер, 2 вершины, 7 чисел
    и ещё надо порядок сохранить некоторый
  (а для вершин было 4)

done:
  если в графе нет вершин вида
  u t3 t3 t4
  u t4 t4 t4
  правда ли, что s0 чётно?
  на 22.05, 24.05 правда
  на 26.05 ломается:
g115: new o6c4c: or: 06; t1+t3: 18; s0: 15; s1: 30; s2: 2; PAR: 1 (1); diff:s1-s0'-or: 15; t1: 0; t2: 9; t3: 18; t4: 12; orverts: 4 11 12 21 22 25 ; vertices descriptions: u t2 t3 t4 ; u t2 t3 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; o t3 t3 t3 ; u t2 t3 t4 ; u t2 t2 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t3 t4 ; u t3 t3 t3 ; o t3 t3 t3 ; o t3 t3 t3 ; u t2 t3 t4 ; u t2 t2 t4 ; u t3 t4 t4 ; u t3 t3 t3 ; u t2 t3 t4 ; u t2 t3 t4 ; u t3 t4 t4 ; u t2 t3 t4 ; o t3 t3 t3 ; o t3 t3 t3 ; u t3 t4 t4 ; u t3 t4 t4 ; o t3 t3 t3 ;

nah or todo:
  можно ещё попробовать в довесок выкинуть решения, где больше 1 раза встречается
  вершина u t3 t3 t3
  но это уже какой-то хак

u t2 t3 t4
1 1 1 1 1 1 1 1
u t2 t2 t4
1 1 1 1
u t2 t4 t4
1 1
u t3 t4 t4
1 1 1 1
u t3 t3 t3
1 1
o t3 t3 t3
1 1 1 1 1 1

done: надо попробовать сломать этот тип вершин
в 2x6cdcs
u t3 t3 t4
сломал (все вершины получились ok, но ребро u-u стало poor)


todo
поизучать вот эти 2 решения
у них разные s2, u_op2f
зато совпадают: набор or вершин один и тот же, s0, circuits_even_poor, s1, u_comps, отсутствие разбиения в 2x6cdcs
  и набор описаний вершин вида "o t3 t3 t3" и прочих

20.05
g4: another 6c4c: profile: rrrrrprprrrrrrrprrrrrprrrrrrrr; s0= 14; s1= 26; s2= 1; par: 1 vs 0; u_op2f: 2; doubles: 0; u_comps: 4 1; u_morecomps: 2 3 2; circuit lens: l0 (5 -1 ) l1 (-1 5 ) l2 (-1 5 ) l3 (-1 5 5 ) l4 (5 6 5 ) l5 (1 5 ); no 2 cdcs;
NEW 6C4C with o6c4c
g4: new o6c4c: or: 07; t1+t3: 20; s0: 14; s1: 26; s2: 1; PAR: 1 (1); diff:s1-s0'-or: 9; t1: 1; t2: 3; t3: 19; t4: 7; orverts: 0 5 6 7 9 17 18 ; vertices descriptions:
o t3 t3 t3
u t2 t3 t4
u t2 t3 t3
u t3 t3 t4
u t2 t3 t3
o t3 t3 t3
o t1 t3 t3
o t1 t3 t3
u t3 t3 t4
o t3 t3 t3
u t3 t4 t4
u t3 t4 t4
u t2 t3 t4
u t3 t4 t4
u t2 t3 t4
u t3 t3 t3
u t2 t3 t4
o t3 t3 t3
o t3 t3 t3
u t3 t4 t4

rich edges: 0(0, 12) 1(0, 4) 2(0, 8) 3(1, 11) 4(1, 5) 6(2, 7) 8(2, 9) 9(3, 8) 10(3, 5) 11(3, 7) 12(4, 5) 13(6, 15) 14(6, 13) 16(8, 9) 17(9, 11) 18(10, 12) 19(10, 18) 20(10, 11) 22(13, 14) 23(13, 19) 24(14, 17) 25(15, 18) 26(15, 17) 27(16, 19) 28(16, 17) 29(18, 19)
poor edges: 5(1, 14) 7(2, 4) 15(6, 7) 21(12, 16)
oriented vertices: 0 5 6 7 9 17 18
allorverts: 0 5 6 7 9 17 18 ;


g4: another 6c4c: profile: rrrrrrrprrrrrrrprrrrpprrrrrrrr; s0= 14; s1= 26; s2= 2; par: 0 vs 0; u_op2f: 1; doubles: 0; u_comps: 4 1; u_morecomps: 1 3 1; circuit lens: l0 (5 7 ) l1 (-1 5 ) l2 (-1 -1 ) l3 (2 5 5 ) l4 (5 6 5 ) l5 (-1 5 ); no 2 cdcs;
NEW 6C4C with o6c4c
g4: new o6c4c: or: 07; t1+t3: 20; s0: 14; s1: 26; s2: 2; PAR: 0 (0); diff:s1-s0'-or: 9; t1: 1; t2: 3; t3: 19; t4: 7; orverts: 0 5 6 7 9 17 18 ; vertices descriptions:
o t3 t3 t3
u t3 t4 t4
u t2 t3 t3
u t3 t3 t4
u t2 t3 t3
o t3 t3 t3
o t1 t3 t3
o t1 t3 t3
u t3 t3 t4
o t3 t3 t3
u t2 t3 t4
u t2 t3 t4
u t2 t3 t4
u t3 t4 t4
u t3 t4 t4
u t3 t3 t3
u t2 t3 t4
o t3 t3 t3
o t3 t3 t3
u t3 t4 t4
SAME TYPES DIFF PARITIES

rich edges: 0(0, 12) 1(0, 4) 2(0, 8) 3(1, 11) 4(1, 5) 5(1, 14) 6(2, 7) 8(2, 9) 9(3, 8) 10(3, 5) 11(3, 7) 12(4, 5) 13(6, 15) 14(6, 13) 16(8, 9) 17(9, 11) 18(10, 12) 19(10, 18) 22(13, 14) 23(13, 19) 24(14, 17) 25(15, 18) 26(15, 17) 27(16, 19) 28(16, 17) 29(18, 19)
poor edges: 7(2, 4) 15(6, 7) 20(10, 11) 21(12, 16)
oriented vertices: 0 5 6 7 9 17 18
allorverts: 0 5 6 7 9 17 18 ;




done:
or=0
не нашёл
u t2 t2 t2
должно же быть?
есть
22.05g13
g13: new o6c4c: or: 00; t1+t3: 00; s0: 14; s1: 26; s2: 3; PAR: 1 (1); diff:s1-s0'-or: 12; t1: 0; t2: 7; t3: 0; t4: 26; t2f: 10 11 0 1; orverts: ; or0: sum: 0; (2 7) (2 5) (2 5) (2 7) (3 11) (3 11) ; vertices descriptions: u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t2 t2 t2 ; u t2 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; SEAL;

nah:
  пытаюсь каждой из 14 вершин приписать её чётность
  чтоб сошлась арифметика для чётности s0

nah:
  сокращаю количество вершин по модулю 2
  и пытаюсь предсказать чётность s0


done:
предсказываю тогда не par, а s0
тоже не прокатывает


done:
предсказываю чётность s0
до 24.05 включительно прокатило
не прокатило на 26.05

g8: another 6c4c: profile: rrrrprprrrrprrprrprrprrrrrrprrrrprrrrrr; s0= 16; s1= 31; s2= 2; par: 1 vs 1; u_op2f: 2; doubles: 0; u_comps: 6 1; u_morecomps: 2 3 2; circuit lens: l0 (1 5 ) l1 (1 0 5 ) l2 (3 -1 ) l3 (9 -1 5 ) l4 (3 -1 5 ) l5 (5 -1 5 ); no 2 cdcs;
NEW 6C4C with o6c4c
g8: new o6c4c: or: 07; t1+t3: 19; s0: 16; s1: 31; s2: 2; PAR: 1 (1); diff:s1-s0'-or: 12; t1: 2; t2: 6; t3: 17; t4: 14; orverts: 1 8 9 16 20 22 24 ; vertices descriptions: u t3 t3 t4 ; o t1 t3 t3 ; u t2 t3 t4 ; u t2 t3 t4 ; u t2 t3 t4 ; u t3 t4 t4 ; u t2 t3 t4 ; u t2 t2 t4 ; o t1 t3 t3 ; o t1 t3 t3 ; u t2 t4 t4 ; u t3 t4 t4 ; u t4 t4 t4 ; u t3 t3 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; o t1 t3 t3 ; u t3 t4 t4 ; u t3 t4 t4 ; u t2 t4 t4 ; o t3 t3 t3 ; u t3 t3 t3 ; o t3 t3 t3 ; u t2 t3 t4 ; o t3 t3 t3 ; u t3 t4 t4 ;
rich edges: 0(0, 12) 1(0, 20) 2(0, 8) 3(1, 13) 5(1, 6) 7(2, 24) 8(2, 19) 9(3, 8) 10(3, 5) 12(4, 18) 13(4, 22) 15(5, 16) 16(5, 14) 18(6, 15) 19(7, 17) 21(9, 13) 22(9, 11) 23(10, 12) 24(10, 11) 25(11, 19) 26(12, 13) 28(15, 17) 29(16, 17) 30(18, 20) 31(18, 25) 33(20, 21) 34(21, 24) 35(21, 22) 36(22, 23) 37(23, 25) 38(24, 25)
poor edges: 4(1, 16) 6(2, 7) 11(3, 7) 14(4, 14) 17(6, 10) 20(8, 9) 27(14, 15) 32(19, 23)
oriented vertices: 1 8 9 16 20 22 24
allorverts: 1 8 9 16 20 22 24 ;


g8: another 6c4c: profile: rrrrrrrrrprrrrrrprrrrrprprpprprrprrrrrr; s0= 15; s1= 31; s2= 1; par: 1 vs 1; u_op2f: 1; doubles: 0; u_comps: 6 1; u_morecomps: 2 3 1; circuit lens: l0 (8 -1 5 ) l1 (-1 -1 5 ) l2 (5 5 ) l3 (-1 -1 ) l4 (5 -1 ) l5 (-1 -1 5 ); no 2 cdcs;
NEW 6C4C with o6c4c
g8: new o6c4c: or: 07; t1+t3: 19; s0: 15; s1: 31; s2: 1; PAR: 1 (1); diff:s1-s0'-or: 17; t1: 2; t2: 6; t3: 17; t4: 14; orverts: 12 13 16 17 20 22 24 ; vertices descriptions: u t3 t3 t4 ; u t3 t3 t4 ; u t3 t4 t4 ; u t2 t4 t4 ; u t3 t4 t4 ; u t2 t3 t4 ; u t4 t4 t4 ; u t3 t4 t4 ; u t2 t4 t4 ; u t2 t3 t4 ; u t2 t3 t4 ; u t2 t2 t4 ; o t1 t3 t3 ; o t1 t3 t3 ; u t2 t2 t4 ; u t2 t3 t4 ; o t1 t3 t3 ; o t1 t3 t3 ; u t3 t4 t4 ; u t2 t4 t4 ; o t3 t3 t3 ; u t3 t3 t3 ; o t3 t3 t3 ; u t2 t3 t4 ; o t3 t3 t3 ; u t3 t4 t4 ; SAME TYPES DIFF S0 parity
rich edges: 0(0, 12) 1(0, 20) 2(0, 8) 3(1, 13) 4(1, 16) 5(1, 6) 6(2, 7) 7(2, 24) 8(2, 19) 10(3, 5) 11(3, 7) 12(4, 18) 13(4, 22) 14(4, 14) 15(5, 16) 17(6, 10) 18(6, 15) 19(7, 17) 20(8, 9) 21(9, 13) 23(10, 12) 25(11, 19) 28(15, 17) 30(18, 20) 31(18, 25) 33(20, 21) 34(21, 24) 35(21, 22) 36(22, 23) 37(23, 25) 38(24, 25)
poor edges: 9(3, 8) 16(5, 14) 22(9, 11) 24(10, 11) 26(12, 13) 27(14, 15) 29(16, 17) 32(19, 23)
oriented vertices: 12 13 16 17 20 22 24
allorverts: 12 13 16 17 20 22 24 ;



nah (выглядит тупиково):
всего возможно 14 разных вершин
u t3 t3 t4
u t4 t4 t4
допустим условно
что в решении нет вершин вот такого вида
или другого
можно ли что-то сказать про его хар-ки?
пробую выкинуть
u t3 t3 t3
18.05: todo
20.05:
  PAR - 461
  217 содержат вершину
  244 не содержат
    и тут есть графы с PAR: 0
пробую дополнительно выкинуть u t4 t4 t4
  не помогает
окей
выкину все графы с o t3 t3 t3
g2: new o6c4c: or: 04; t1+t3: 10; s0: 13; s1: 24; s2: 1; PAR: 0 (0); diff:s1-s0'-or: 13; t1: 2; t2: 4; t3: 8; t4: 16; orverts: 0 2 4 16 ; vertices descriptions: o t1 t3 t3 ; u t4 t4 t4 ; o t1 t3 t3 ; u t2 t4 t4 ; o t1 t3 t3 ; u t2 t3 t4 ; u t2 t4 t4 ; u t2 t2 t3 ; u t3 t4 t4 ; u t3 t4 t4 ; u t2 t4 t4 ; u t4 t4 t4 ; u t3 t4 t4 ; u t4 t4 t4 ; u t4 t4 t4 ; u t2 t4 t4 ; o t1 t3 t3 ; u t2 t3 t4 ; u t4 t4 t4 ; u t3 t3 t4 ;
в общем, быстрый вывод такой, что по самим вершинам я не смогу сделать вывод про parity
хм
забавно
u t3 t3 t4
u t4 t4 t4
выкинул как и хотел вот эти 2 вершины
осталось 138 решений, везде parity 1
пошли дальше
22.05:
  PAR - 2715
  осталось 769
  есть PAR: 0 (10 штук; изначально 313)
g16: new o6c4c: or: 05; t1+t3: 14; s0: 14; s1: 26; s2: 0; PAR: 0 (0); diff:s1-s0'-or: 13; t1: 1; t2: 6; t3: 13; t4: 13; orverts: 4 5 15 17 21 ; vertices descriptions: u t3 t4 t4 ; u t3 t4 t4 ; u t3 t4 t4 ; u t3 t4 t4 ; o t1 t3 t3 ; o t1 t3 t3 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t2 t4 ; u t2 t4 t4 ; u t2 t3 t4 ; u t3 t4 t4 ; u t3 t4 t4 ; o t3 t3 t3 ; u t3 t3 t3 ; o t3 t3 t3 ; u t2 t3 t4 ; u t3 t4 t4 ; u t2 t3 t4 ; o t3 t3 t3 ;


done:
сгруппируем решения по наличию или неналичию каких-то типов вершин
можно ли тогда точно вычислить parity?
  нельзя
  даже по точному совпадению по типам вершин
  (но это я сквозную штуку сделал по всем графам с одинаковым числом вершин)
  хотя в рамках одного графа то же прокатывает
или другие неочевидные параметры?





or: 0

что бывает:
u t2 t2 t2
u t2 t2 t4
u t2 t4 t4
u t4 t4 t4


u : t4 | t2 t4
u : t4 | t2 t4
u : t4 | t2 t4
u : t4 | t2 t4
u : t4 | t2 t4
u : t4 | t2 t4
u : t4 | t2 t4
u : t4 | t2 t4

u : t4 | t4 t4
u : t4 | t4 t4
u : t4 | t4 t4
u : t4 | t4 t4
u : t4 | t4 t4
u : t4 | t4 t4
u : t4 | t4 t4
u : t4 | t4 t4
u : t4 | t4 t4
u : t4 | t4 t4
u : t4 | t4 t4

u : t4 | t2 t2

u : t2 | t4 t4
u : t2 | t4 t4
u : t2 | t4 t4
u : t2 | t4 t4






done:
  бывает ли
  or = 4,
  2x6cdcs, o6c4c
  ?
  да, бывает

o t1 t1 t1
o t1 t1 t3
o t1 t3 t3
o t3 t3 t3

u t2 t2 t2
u t2 t2 t3
u t2 t2 t4
u t2 t3 t3
u t2 t3 t4
u t2 t4 t4
u t3 t3 t3
u t3 t4 t4
---

какие ещё возможны?
u t3 t3 t4
todo: надо попробовать сломать этот тип вершин
в 2x6cdcs, o6c4c невозможно:
  u t4 t4 t4



o : t3 | t3 t3
o : t3 | t3 t3
o : t3 | t3 t3
o : t3 | t3 t3

u : t2 | t3 t3
u : t2 | t3 t4
u : t4 | t3 t4
layer: 0; vertices:
u : t4 | t2 t4
u : t3 | t4 t4
u : t3 | t4 t4
u : t4 | t2 t4
u : t3 | t2 t3
u : t4 | t3 t4
u : t4 | t2 t4
layer: 0; vertices:
u : t3 | t4 t4
u : t2 | t2 t4
u : t2 | t2 t2
u : t2 | t2 t2
u : t4 | t2 t2
u : t2 | t2 t2
u : t4 | t2 t2
u : t2 | t2 t3
u : t4 | t3 t4
u : t2 | t4 t4




o : t1 | t1 t1

o : t3 | t1 t3
o : t3 | t1 t3
o : t3 | t1 t3

o : t1 | t1 t3

o : t3 | t3 t3
o : t3 | t3 t3

u : t3 | t2 t4
u : t3 | t2 t4
u : t2 | t4 t4
u : t2 | t3 t4
u : t4 | t3 t4
u : t4 | t3 t4
u : t3 | t3 t3
u : t2 | t3 t4
u : t2 | t4 t4
layer: 0; vertices:
u : t3 | t4 t4
u : t3 | t4 t4
u : t4 | t3 t4
u : t2 | t2 t3
u : t4 | t2 t2
u : t2 | t2 t4





o : t3 | t1 t3
o : t3 | t1 t3
o : t1 | t3 t3
o : t3 | t1 t3
o : t3 | t1 t3
o : t1 | t3 t3

o : t1 | t1 t3
o : t1 | t1 t3

u : t2 | t2 t2
u : t2 | t2 t2

u : t3 | t3 t3

u : t2 | t2 t3
u : t2 | t2 t3
u : t2 | t2 t3
u : t3 | t2 t2
u : t2 | t2 t3

u : t4 | t3 t4
u : t4 | t3 t4
u : t4 | t3 t4
u : t4 | t3 t4
u : t3 | t4 t4
u : t3 | t4 t4






layer: 0; vertices:
u : t4 | t3 t4
u : t4 | t3 t4
u : t3 | t4 t4
u : t3 | t4 t4
u : t4 | t3 t4
u : t4 | t3 t4

o : t3 | t1 t3
o : t3 | t1 t3

u : t2 | t4 t4

o : t3 | t3 t3
o : t3 | t3 t3
o : t3 | t3 t3

u : t4 | t2 t3
u : t4 | t2 t3
u : t3 | t2 t4

u : t2 | t2 t4
u : t4 | t2 t2
u : t4 | t2 t2

u : t3 | t2 t3
u : t3 | t2 t3


todo:
reverse engineering моих кастомных темпераций
(хотя я немного менял чисел)
то есть у меня нет чистых примеров подобранных с нуля на слух

done?:
петерсеновы o6c4c
а какое у них число or вершин бывает?
на 24.04 попадаются чётные or


можно попробовать взять 2x6cdcs, o6c4c
и посчитать не только poor рёбра в 2-факторах
но скажем
какие там вершины попадаются
точнее
как у них распределены рёбра по паросочетаниям





2x6cdcs => odd_poor_2-factors = 0


2x6cdcs, o6c4c => t4f[3] = 0
а теперь надо осознать этот факт
что приятно
кажется есть начало какого-то доказательства
непонятно пока что какого
ну типа что - если, допустим, у нас есть t4f[2] вершина, то вроде бы
  либо получу в качестве третьего соседа ориентированную вершину
  либо ребро будет poor
кажется если я смогу локально так всё проанализировать, то я смогу это всё склеить
кажется не смогу
хотя с другой стороны
беру окрестность вершины длины 3
в ней 9 рёбер, 6 в 2-факторе, 3 ребра из паросочетания всегда
если все кейсы подсчитываются с точностью до чётности, то всё ок
не, не ок
про крайние нельзя сказать, это poor или это rich ребро

очень странно
выглядит, что
2x6cdcs, o6c4c => t4f[3] = 0
мне кажется это или очевидно должно быть, или неправда, или я это проверял уже?
странно
проглядел что ли получается
а я могу это доказать?
типа что нет 3 рёбер t4, сходящихся в одной вершине

t4    -4- было: ребро rich, обе вершины unoriented
           стало: противоположности сонаправленны
интересно, до 24.05 включительно прокатывает
да, по-моему это несложно доказать, глянув глазами





граф
беру o6c4c
or = 0
локально понятно
что мне глобально надо понять это
что несёт за собой rich ребро
а что несёт poor ребро
окей
беру 6c4c
пускай оно
2x6cdcs
тогда odd_poor_2-factors = 0
пускай оно даже получается из petersen colouring'а
что я могу про odd_poor_2-factors сказать?
  я могу легко показать, что это число равно 0
  там даже сильнее
  там на каждой цепи чётное число poor рёбер
но в общем случае 2x6cdcs бывает всякое




nah:
я вроде пробовал подобное, но надо чётко зафиксировать
пытаюсь ориентировать perfect matching
в каком смысле ориентирую:
  каждое ребро будет ориентировано один раз в одну сторону, в другой раз в другую
  ориентация - это набор из 3 рёбер,
  крайние из 2-фактора, среднее из паросочетания,
  все 3 ориентированы в одну сторону,
  все рёбра из всех 6 слоёв должны быть учтены
беру любое ребро,
  перебираю для него оба направления,
  по этому направлению понимаю, какие рёбра из 2-фактора к нему приклеить,
  дальше по 2-фактору раскручиваю логику приклеивания рёбер
по идее где-то этот процесс сломается
  надо чётко выписать контрпример
ну не, это нерабочая идея
если длины циклов разные
там уже приходится что-то где-то перевернуть


poor edges: 0(0, 14) 2(0, 3) 4(1, 5) 13(6, 8) 16(8, 15) 18(10, 13) 21(11, 16) 22(12, 17)
3-0-14
1-5
6-8-15
10-13
11-16
12-17

or = 0 => s2 = 3 (aka even_rich_matchings = 6)
or = 0 => s0 has same parity as s1

layer: 0; edges: 0(0,P 14) 3(1, 9) 7(2, 4) 9(3, 5) 14(6, 7) 15(8, 12) 18(10,P 13) 20(11, 15) 28(16, 17) 29(18, 19)
layer: 1; edges: 0(0,P 14) 3(1, 9) 6(2, 7) 9(3, 5) 11(4, 13) 13(6,P 8) 19(10, 18) 21(11,P 16) 22(12,P 17) 26(15, 19)
layer: 2; edges: 1(0, 10)  5(1, 6) 8(2, 9) 10(3, 7) 12(4, 5) 16(8,P 15) 21(11,P 16) 23(12, 13) 24(14, 17) 29(18, 19)
layer: 3; edges: 2(0,P 3)  5(1, 6) 6(2, 7) 12(4, 5) 16(8,P 15) 17(9, 11) 18(10,P 13) 22(12,P 17) 25(14, 19) 27(16, 18)
layer: 4; edges: 1(0, 10)  4(1,P 5) 7(2, 4) 10(3, 7) 13(6,P 8) 17(9, 11) 23(12, 13) 24(14, 17) 26(15, 19) 27(16, 18)
layer: 5; edges: 2(0,P 3)  4(1,P 5) 8(2, 9) 11(4, 13) 14(6, 7) 15(8, 12) 19(10, 18) 20(11, 15) 25(14, 19) 28(16, 17)


layer: 0; vertices: 10 18 16 11 9 2 7 3 0 10
layer: 0; vertices: 5-1-6-8 15-19-14-17-12 13-4-5
3 0 14 17; 0 10 13 4; 10 18 19 14; 18 16 17 12; 16 11 15 19; 11 9 1 6; 9 2 4 5; 2 7 6 8; 7 3 5 1; ? 15 8 12 13

layer: 1; vertices: 10 0 3 7 6 1 5 4 2 9 11 15 8 12 13 10
layer: 1; vertices: 17 14 19 18 16 17
17 14 0 3; 14 19 15 8; 19 18 10 0; 18 16 11 15; 16 17 12 13;

layer: 2; vertices: 14 19 15 11 9 1 5 3 0 14
layer: 2; vertices: 7 6 8 12 17 16 18 10 13 4 2 7

layer: 3; vertices: 14 17 16 11 15 19 18 10 0 14
layer: 3; vertices: 9 2 4 13 12 8 6 7 3 5 1 9

layer: 4; vertices: 14 0 3 5 4 13 10 18 19 14
layer: 4; vertices: 9 1 6 7 2 9
layer: 4; vertices: 12 8 15 11 16 17 12

layer: 5; vertices: 14 0 10 13 12 17 14
layer: 5; vertices: 9 11 16 18 19 15 8 6 1 9
layer: 5; vertices: 7 2 4 5 3 7
8 6 7 2; 19 15 11 16; 12 17 16 18;




берём 6c4c
берём другое решение
пытаемся перейти от одного к другому
как?
никак пока что
я проверил идею, что возможно от набора or вершин что-нибудь зависит (помимо t1 и t3), но вроде нет
  если только сумма какая




как переходят от рёбер к цепям обычно?
типа формулы эйлера
v-e+f=2
число вершин чётно
по индукции можно доказывать



рассмотрим граф где
2x6cdcs, o6c4c, or = 0
попробуем раскрасить рёбра в 3 цвета
берём ребро
  оно или rich, или poor
  дальше
  в графе только t2 и t4 рёбра
  дальше
  t2    -2- было: ребро poor, обе вершины unoriented
           стало: совпадающие тройки разнонаправленны

  t4    -4- было: ребро rich, обе вершины unoriented
           стало: противоположности сонаправленны
  дальше
  нужно что-то вытащить из 2x6cdcs

  могу ли я по индукции избавиться от poor рёбер? с сохранением ориентированности o6c4c?
  и с сохранением or = 0?
  не, как раз t2 по индукции не выкидывается
    в отличие от t1


  \     \    /  /  \/  \/
v  |  ^  |  |  |
  /     /    \  \  /\  /\


t1    -1- было:  ребро poor, обе вершины oriented
      стало: совпадающие тройки сонаправленны
        (в том числе противоположности разнонаправленны)

t2    -2- было:  ребро poor, обе вершины unoriented
      стало: совпадающие тройки разнонаправленны
        (про противоположности ничего нельзя сказать)

t3    -3- было:  ребро rich, одна вершина oriented, одна unoriented
      стало: противоположности разнонаправленны

t4    -4- было:  ребро rich, обе вершины unoriented
      стало: противоположности сонаправленны


2x6cdcs, o6c4c
t1: рёбра будут по-разному ориентированы
t2: как повезёт
  t5: в пару попали сонаправленные poor рёбра
t3: рёбра будут по-разному ориентированы
t4: рёбра будут одинаково ориентирваны
кажется нашёл ещё зависимость между:
  t1+t3, t2-t5, taken (число цепей в любом из 6cdc) - суммарно получается нечётно
  стоит заметить что t1+t3+t2 = E - t4
  для 10.05 работает
  на 18.05 нет 2x6cdcs, o6c4c
  для 20.05 работает
  для 22.05 работает
  для 24.05 не работает!!!
    контрпримеров мало
    20 из 1738 (хотя есть тонкость, что я не все разбиение на 6cdc рассматриваю)
      скорее-всего-уникальных правда около 1083, 20 из 1083
стопудов это до чего-то более простого сокращается
t1+t3+t5 = число рёбер в 6cdc, где совпала направленность
наверно не хватает какой-то инфы про вершины



tmp22:g12: 15; 8; 3;
tmp22:g12: 15; 8; 4;
tmp22:g12: 15; 8; 5;






не
надо так
фиксируем северный полюс
кидаем в него 1
дальше ищем канонический набор из 29 точек на сфере, которые вместе с полюсом образуют граф петерсена
дальше говорим, что каждая из этих точек получается из северного полюса каким-нибудь кватернионом
дальше мы считаем, что работаем в Z5, применение кватерниона - это поворот и заодно это умножение в Z5
дальше надо как-то понять, что мы никогда так не получим противоречий, нагенерив ещё точек на сфере из полученных и применяя наши кватернионы
и вот!
  мне кажется, что получим противоречия
  ну типа
  - что такое противоположная точка на сфере? для каждой точки это какой-то свой кватернион кажется
    и это всегда умножение на -1
  хм
  а мы и не в Z5 даже, облом
  - я так понимаю, что если мы хотим рандомную точку на сфере никуда не двинуть - это каждый раз какой-то новый кватернион
    а не один и тот же
ща
не
я туплю
я ж зафиксировал полюс
и кватернионы только к нему применяю
может и прокатит
но всё равно не Z5
скорее Z9?
хм
можно и Z9 - но это будет не совсем то, что я ищу - потому что например прокатит 3+3+3, а мне это не очень ок
ну и ладно
попробуем в Z9


есть ещё мысль что а давайте полсферы будет точно положительной
  давайте не рассматривать точки на экваторе вообще для удобства, пускай их нету
  на ней только 1,2,3,4
  а на другой только -1,-2,-3,4
  тогда я могу прям точно сказать, что на целой полоске рядом с экватором не может быть числа 4 нигде
  4 рядом с полюсом


cos(theta/2) + (u_x*i+u_y*j+u_z*k)*sin(theta/2)




надо придумать систему координат
для сферы
типа говорим - северный полюс - это ноль
а дальше имеем 2 направления
