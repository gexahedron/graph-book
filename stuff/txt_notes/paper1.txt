TODO:
    - 3cdc => o4cdc:
        reformulated as "ab>cd + ef" encoding
        layer1:
            14>25 + 63
        layer2:
            41>25 + 36
        layer4:
            14>52 + 36
        layer5:
            41>52 + 63

    - analogue of "o4cdc => 3cdc":
        mention that we don't know how to reconstruct o6c4c/6c4c from o6cdc,
        partially at least because we need to decide somehow,
        which edges are rich, and which are poor

    - A duad is a pair of two distinct elements of {1, 2, 3, 4, 5, 6}.
        A syntheme is a partition of {1, 2, 3, 4, 5, 6} into three duads.


TODO:
    include link to github in the arXiv comments
    typst html markdown

- Paper1, on o6c4c and flower snarks:
    - 7c4c
    - ? o5cdc => o7c4c
        - ? o5cdc => o8c4c
    - o6c4c => nz7
    - poor/rich edges, oriented vertices
    - mention that o6c4c exists for all (graphs) snarks with 30 vertices or less
    - mention that o6c4c exists for all non-snarks
    - write out explicitly the oriented K3,3*-reduction
    - код:
        - clean up o6c4c code
        - u6c4c_edge_is_poor - replace with enum class
        - create and add experiment number, and create new entry point in main.cpp, and a new makefile
        - and do the output as csv file
        - and create analysis in python
    - nz5 from o6c4c, for Petersen graph
    - o6c4c surface + formula + some examples
    - o9c6c (let's hope the code is good):
        - TODO: visualize some solutions for safety
        - checked upto 26.05
        - checked treelike/windmill 34.05 graph
        - checked circ5 34.05 graphs
        - checked permutation 34.05 graphs
        - checked oddness4 44.05 graphs

    - btw, 15 способов сделать 001122 веса:
    001122:
        abcacb
        abcbac
        abccba

        didn't check:
            abacbc
            abaccb
            abbacc
            abbcac
            abbcca
        don't work:
            aabbcc
            aabcbc
            aabccb
            ababcc
            abcabc
            abcbca
            abccab

    or=0
        it's hard right now for me to prove s2=3
        s0 + b - s1 - 2*t1 = 2 - 2*g
        b=0, t1=0
        s0-s1 = 2-2*g
    
    has_2cdcs
        we want to prove that s0 is even
        - orientability is crucial
        - also we have 2-face-coloring
        - but again it seems that we need to use pm somehow
            - or the information that we have a cubic graph
        - also it seems we can't remove poor edges
        
        nongraph10
        taken=3,5
        IDEA!
        let's calculate genus of each 2cdc
            and connect it somehow to boundaries / oriented vertices
            or maybe not
            maybe we should create some kind of "mirror diagram"?

            oh, maybe it's related to same number of double-oriented edges
            or vs taken vs t5
            or:_05; 9 3
            or:_05; 9 4
            or:_05; 9 5
            or:_05; 9 6
            or:_05; 9 8
            no, looks like it's trickier
            but for or=3 maybe it's working, need to check 26.05

        V-E+F, is not necessarily even though
        V same, E same, F has same parity
            V=10, E=15
            F=3 or F=5

    o10c6c for Petersen graph:
        0 : 4 6 8
        1 : 5 6 9
        2 : 4 7 9
        3 : 5 7 8
        4 : 0 2 5
        5 : 1 3 4
        6 : 0 1 7
        7 : 2 3 6
        8 : 0 3 9
        9 : 1 2 8
        cycle 0 (colour 0): 0 4 2 7 3 5 1 6
        cycle 1 (colour 1): 0 4 2 7 3 5 1 9 8
        cycle 2 (colour 2): 0 4 2 7 3 8 9 1 6
        cycle 3 (colour 3): 0 4 5 1 6 7 2 9 8
        cycle 4 (colour 4): 0 4 5 3 7 6 1 9 8
        cycle 5 (colour 5): 0 4 5 3 8 9 2 7 6
        cycle 6 (colour 6): 0 6 7 3 8
        cycle 7 (colour 7): 0 6 1 9 2 4 5 3 8
        cycle 8 (colour 8): 0 6 7 2 9 1 5 3 8
        cycle 9 (colour 6): 1 5 4 2 9
        cycle 10 (colour 9): 1 5 4 2 9 8 3 7 6
        success!	cycles: 8; 9; 9; 9; 9; 9; 5+5; 9; 9; 9;
        lexicographic: 5+5;8;9;9;9;9;9;9;9;9;


    has_2cdcs, r244odd=0
        - we actually want to prove that all 2-factors have even number of poor edges
        - and this condition is obvious for "mappable", because we have 0 in each circuit
        - also, we don't need orientation

        - DONE: actually a stronger statement could be true
            - that for each partition we expect even number of poor edges in each layer
            - UPD: no, it's not true, but i also had bug in asserts
            - but visualisation helped to find the bug

        - cremona-richmond configuration optics (crc)
        - each vertex can be interpreted as line of crc
        - poor edge connects vertices, which are same lines of crc
        - rich edge connects vertices, which intersect as lines of crc
            - so rich edges actually correspond to vertices of crc
        
        - what if we pass to the dual picture?
            - because crc is self-dual
            - we would need to construct hypergraph,
            where each edge connects 3 vertices,
            and vertices have degree 2

        - what could be simplest cases to explore:
            - DONE: 2 x 3cdcs
                - here we have two 3-edge-colourings
                which should simplify everything
                - TODO: can we reformulate rich/poor edges using this colourings?
                say we have colours 1,2,3 and 4,5,6
                say selected edge has colors 1 and 4
                then we have triples:
                    2 1 2
                    3 1 3
                    5 4 5
                    6 4 6
                it's poor if we get 2 triples, it's rich if we get 4 triples
                so the colors are kind of in sync, if edge is poor
                if we traverse through poor edge,
                    vertex 14+25+36 => vertex 14+25+36
                if we traverse through rich edge,
                    vertex 14+25+36 => vertex 14+26+35
                what kinds of triples we have?
                    14/25/36 positive
                    14/26/35 negative
                    15/26/34 p
                    15/24/36 n
                    16/24/35 p
                    16/25/34 n
                so, this kind of approach works, should work
                and we actually get mappable in this case

                so:
                - 3-edge-colouring helps!
                - here we can explicitly classify vertices in each circuit as bipartite
                    (but not in whole graph, it can be non-bipartite)


            - IDEA
                - let's try to connect pm edges, in each layer
                - for Petersen graph in each layer we get K5 graphs
                - ...
            
            DONE:
                - check stronger statement about how pm edges are connected
                in each layer in has_2cdcs
                
                although how do i formulate it?

                maybe like:
                we remove all K5 graphs, and we should be left with duplicated edges

            okay, heuristically this should make sense,
            but sounds that it should be non-trivial to prove
            looks like we at least need some understanding
            how Petersen graph is embedded in snarks
            and how it reappears through has_2cdcs

            well at least i finally got some pairing of edges
            maybe we can try to understand the picture for non-snarks at least
            although i don't know how this helps


            TODO: how is this related to has_2cdcs, to the partitions, though?

            TODO: how does this look like in case of 2 x 3cdcs?
                graph8g1-5-has_2cdcs-actually-3cdcs
                layer1
                    pms:
                        0-6: 1+3
                        4-5: 1+5
                        1-2: 1+2
                        3-7: 1+3
                    rich cycle:
                        0-4-2-7 + 6-1-5-3
                        0-4 => 3/5
                        4-2 => 5/2
                        2-7 => 2/3
                        6-1 => 3/2
                        1-5 => 2/5
                        5-3 => 5/3
                i think it could be that we have duplications of edges, in both directions even
                    so each circuit traverses forwards and backwards, total winding 0
                        (projecting on K5)
            
                graph14g8-8-has_2cdcs-actually-3cdcs
                layer1:
                    pms:
                        0-12 : 1+5
                        1-6  : 1+3
                        2-7  : 1+3
                        3-13 : 1+5
                        4-5  : 1+2
                        8-9  : 1+5
                        10-11: 1+5
                    rich cycle:
                        0-4-2-11 + 9-1-5-3-7 + 6-10
                        0-4 : 5+2
                        4-2 : 2+3
                        2-11: 3+5
                        9-1 : 5+3
                        1-5 : 3+2
                        5-3 : 2+5
                        3-7 : 5+3
                        6-10: 3+5

                homological:
                    DONE: checked upto 26, all 2cdc solutions are homological
                
                DONE: check inconsistent, no2cdcs, but homological solution:

                    graph14g33-24-incon-no2cdcs-but-homological
                    layer1:
                        pms:
                            0-8  : 1+4
                            1-9  : 1+2
                            2-4  : 1+5
                            3-13 : 1+5
                            5-11 : 1+4
                            6-7  : 1+5
                            10-12: 1+6
                        rich cycle:
                            3-0-12-13-11-10-4-5-1-6-8-9-2
                            3-0  : 5+4
                            0-12 : 4+6
                            12-13: 6+5
                            13-11: 5+4
                            11-10: 4+6
                            10-4 : 6+5
                            4-5  : 5+4
                            5-1  : 4+2
                            1-6  : 2+5
                            6-8  : 5+4
                            8-9  : 4+2
                            9-2  : 2+5
                    looks homological

                DONE: ok, idea was not to backtrack during 2 rich edges, but is it possible?
                    this is obviously impossible, nice

                DONE: prove that 2 x 3cdcs is homological, and backtracks on every poor edge
                    should be easy to prove, actually
                    because if we have e. g. ...r1p1r2... edges
                    r1pm0 = 4,
                    r1pm1=p1pm0=5,
                    => p1pm1=r2pm1=5
                    r1=1, p1=2, r2=1
                    
                       14    25    14
                    v1_r1_v2_p1_v3_r2_v4
                    u1    u2    u3    u4
                    35    36    36    35
                DONE: if we proceed with this kind of thinking, why can't we have e. g. 3rich+1poor edge circuit?
                     r1_r2_r3_p1_r1
                    34 35 36 34 34
                    problem is because we'll change orientation and it will break,
                    so we need even number of poor edges, and so even number of rich edges
                
                TODO: how is this related to has_2cdcs, to the partitions?
                    it's hard to deduce, because we use 2 x 3-edge-coloring
                    for each edge we track both partitions, and in each we track the layer
                    i noticed that i order the partitions always
                    maybe it's useful for other cases, so
                    we not only track 12/34/56 encoding, but also the partitions


            - TODO: bipartite graphs
                - bipartite graph => all circuits are even
                i have an "inconsistent" example, actually
                but now we don't have 3-edge-colouring

                maybe we should use 3-edge colourings fom 244-flows?
                although they are slightly fake
                and i don't know how 244-flows would interact with 2cdcs partitions

                - maybe we could use edge-colouring coming from each of partitions?

                maybe we can glue some construction out of pm-edges somehow?
                    they are kind of connected to each other through edges of 2-factor
                
                comparing to "2 x 3cdcs", we can't follow circuits anymore
                okay, but now we can try to follow the full cycle

                TODO: prove that each layer is homologically = 0
                    at least for 14.04, 16.04 this seems to be true
                    so maybe we need at least more vertices
                
                2 x 3cdcs, all pms were "chords" in some sense, because
                    they connected edges in same partition

                graph14g17-5-bipartite-has_2cdcs_inconsistent:
                    layer1
                        pms:
                            0-10 : 1+2
                            1-6  : 1+4, chord
                            2-7  : 1+5
                            3-8  : 1+6
                            4-5  : 1+2
                            9-11 : 1+5
                            12-13: 1+6

                        rich edges:
                            partition 2
                            12-0 : 6+2
                            4-2  : 2+5
                            9-8  : 5+6
                            +
                            partition 1
                            3-5  : 6+2
                            5-1  : 2+4
                            1-11 : 4+5
                            11-10: 5+2
                            10-6 : 2+4
                            6-7  : 4+5
                            7-13 : 5+6
                        - notice that we have lost orientability of tracking the edges,
                            even within a single circuit
                        - also now pm edge can connect circuits from both partitions

                        lot's of pairs
                        2-4
                            p1: 5-1
                            p1: 10-6
                        2-5
                            p1: 11-10
                            p2: 4-2
                        2-6
                            p1: 3-5
                            p2: 12-0
                        4-5
                            p1: 1-11
                            p1: 6-7
                        5-6
                            p1: 7-13
                            p2: 9-8
                        - these pairings feel as if we slide vertices through poor pairs

                        DONE: what if we cut poor edge 2-7:
                            layer1: 3-5-1-11-10-6-9-8-12-0-4-13-3
                            problem: we don't preserve "has_2cdcs" property
            
            TODO: graph16g502-1447-has_2cdcs_inconsistent_layer_4_vs_5
                - interesting graph, and interesting case
                - 4 layers means that we have 2 layers with same partition
                - so it's almost 3cdc
                - and one of these layers is inconsistent, which is interesting
                layer 5
                    11-3: 2+4
                    3-15: 4+2
                    13-5: 2+1
                    1-6 : 1+4
                    6-7 : 4+2
                - so what goes "wrong"?
                    - part1 lives in layers 3+5+(1+2+4)
                    - so we kind of have more freedom to switch layers
                - 2-factor edges:
                    11-3 -15-13 -5 -1 -6 -7 -11
                     1+2 3  1+4 3 2+4 3 1+2 3
                - interesting that we never use layer 6, which belongs to part2

                - TODO: maybe we should track something else?
                - e. g. opposite pair for each of rich edges on 2-factor
                - they belong to same partition
                    11-3: 3
                    3-15: 1
                    13-5: 4
                    1-6 : 2
                    6-7 : 3
                    +
                    14-0: 1
                    8-9 : 2
                    9-2 : 3
                    10-4: 3
                    4-12: 4
                poor edges:
                    15-13: 3
                    5-1  : 3
                    7-11 : 2
                    +
                    12-14: 3
                    0-8  : 3
                    2-10 : 2

        
        TODO: what other homological stuff we have in cdc theory?
            - 3cdc from 4cdc
            - some stuff about faithful covers
            - 7c4c
            - 10c6c
            - nz3 => o3cdc
                - in the sense that nz3 implies cover by 2 directed cycles
                - and third cycle is C1+C2 mod 2
                - and we can have nice orientations
            - we can build cycle space using mod 2 sums


        TODO: what do i want? what is left to do, except for writing the paper?
        
        DONE! ribbon graph construction
            assume or=0
            then the unor-component is connected, and it is the whole graph
            we know how to orient vertices relatively to each other
            is it always consistent? if so, why?
            DONE: code this construction
                looks like so, checked for non-snarks upto 14.04 and for snarks upto 26.05
            DONE: why this works?
            because we have nice 12>34>56 encoding

        TODO: or=0; is it ocdc, or it can be a ribbon?
            DONE: if we trust the code, then for or=0 it's always an ocdc!
            TODO: WHY?!
                5-3:   00+--+
                3-0:   +-+0-0
                0-10:  +-0-0+
                10-18: +0--+0
                18-16: ++-00-
                16-11: +00+--
                11-15: 0+-+-0
                15-8:  -+00-+


0-p-3-r-5-p-1:
0: 12>46>53
3: 21>46>35
5: 12>34>56
1: 21>43>56
nice
UPD: we actually don’t need ‘>’ order
but we need order inside pairs
we are left with 60 possibilities
- now we need to understand how to distribute them to ocdc layers
i have 2 guesses:
1. we have 6 layers (at most)
2. we have 10 layers

->
3-0-10-18-16-11-15-8-6-1-5-(3)


0: 14+52+36
1: 41+25+36
2: 41+25+36
3: 14+52+36
4: 41+52+63
5: 41+52+63

L1: 0-3-2-1-(0)
    14+52+36
    14+52+36
    41+25+36
    41+25+36
    36
    should be -(f1+f2+f3)/2
    what has weight 0:
        0-5
            14+52+36
            41+52+63
            means that we have 5-0 in layer1, and 0-5 in layer 3
            so, where we have same value, "52", there we don't have edge

L2: 5-1-2-4-(5)
    5: 41+52+63
    1: 41+25+36
    2: 41+25+36
    4: 41+52+63
    41
    should be (f1-f2+f3)/2

L3: 0-1-5-(0) + 2-3-4-(2)
    14+52+36
    41+25+36
    41+52+63
    +
    41+25+36
    14+52+36
    41+52+63
    ???
    should be (f1+f2-f3)/2

    what edges we don't have:
        0-3
            0: 14+52+36
            3: 14+52+36
            means that we have 3-0 in layer2 and layer3
        1-2
        5-4

L4: 52
    lazy
    should be (-f1+f2+f3)/2


okay, it seems we lose information with this 60encoding

0: 14>52>36
1: 41>25>36
2: 41>36>25
3: 14>36>52
4: 41>63>52
5: 41>52>63

this one also looks not informative enough, lol

okay, let's simulate circuits:
    1->0->3->2->1
     3  1  3  2
     36>14>36>25

    0: L3->L1 36>14 (52)
    1: L2->L3 25>36 (41)
    2: L3->L2 36>25 (41)
    3: L1->L3 14>36 (52)

    okay, so maybe we ask for 14,25 and 36 in this circuit





0-p-3-r-5-p-1:
0: 12>46>53
3: 21>46>35
5: 12>34>56
1: 21>43>56
nice
UPD: we actually don’t need ‘>’ order
but we need order inside pairs
we are left with 60 possibilities
- now we need to understand how to distribute them to ocdc layers
- we have 6 layers (at most)!


layers, rules:
    all in same layer
        rule 1:
        61>52 + 34
        52>61 + 34

        rule 2:
        46>35 + 21
        12>46 + 53
        35>12 + 64

    different layers:
        rule 3:
        34>52 + 61
        vs
        52>61 + 34

        rule 4:
        35>21 + 46
        vs
        53>12 + 46

        rule 5:
        46>53 + 12
        vs
        46>35 + 21




->
1->5->3->0->10->18->16->11->15->8->6->(1)
 56>12 46>53  62>>45  32>>61  34>52 43>>>56
    21>46 35>>26  54>>32  16>>34 52>34

1:  21>43>56
5:  12>34>56
3:  21>46>35
0:  12>46>53
10: 14>35>26
18: 13>62>45
16: 16>54>32
11: 61>45>32
15: 16>34>25
8:  61>34>52
6:  61>52>34


    46>53 + 12
    21>46 + 35

    43>56 + 21
    56>12 + 34

    62>45 + 13

    35>26 + 14
    
    32>61 + 45

    34>52 + 61
    52>34 + 61
    16>34 + 25

    54>32 + 16


0-> 3-> 7-> 6-> 8->12->17->14->(0)
 46>>35  61>>52  61>>42  35>>12
     53>>16  52>>61  42>>53  12>>46

3:  21>46>35
7:  16>24>53
6:  61>52>34
8:  61>34>52
12: 16>42>35
17: 61>42>53
14: 12>64>35
0:  12>46>53

    46>35 + 21
    12>46 + 53
    35>12 + 64

    53>16 + 24

    61>52 + 34
    52>61 + 34

    16>42 + 35
    42>53 + 61

0->14->19->15->11-> 9-> 2-> 4->13->10->(0)
 12>>64  25>>16  54>>63  15>>26  14>>35
     46>>52  61>>45  36>>51  62>>14  53>>12

0:  12>46>53
14: 12>64>35
19: 31>46>52
15: 16>34>25
11: 61>45>32
9:  12>54>63
2:  51>42>36
4:  15>26>43
13: 14>53>62
10: 14>35>26

    54>63 + 12

    53>12 + 46
    12>64 + 35
    
    46>52 + 31
    
    14>35 + 26
    62>14 + 53

    15>26 + 43

    36>51 + 42
    
    25>16 + 34
    
    61>45 + 32


16->17->12->13-> 4-> 5-> 1-> 9->11->(16)
    16: 16>54>32
    17: 61>42>53
    12: 16>42>35
    13: 14>53>62
    4:  15>26>43
    5:  12>34>56
    1:  21>43>56
    9:  12>54>63
    11: 61>45>32

    61>42 + 53
    42>35 + 16
    53>62 + 14
    26>43 + 15
    34>56 + 12
    56>21 + 43
    12>54 + 63
    45>32 + 61
    32>16 + 54


together
    16->18->19->14->17->(16)
        16: 16>54>32
        18: 13>62>45
        19: 31>46>52
        14: 12>64>35
        17: 61>42>53

        45>13 + 62
        31>46 + 52
        64>35 + 12
        53>61 + 42
        16>54 + 32
    
    2-> 7-> 3-> 5-> 4->(2)
        2:  51>42>36
        7:  16>24>53
        3:  21>46>35
        5:  12>34>56
        4:  15>26>43
        
        24>53 + 16
        35>21 + 46
        12>34 + 56
        43>15 + 26
        51>42 + 36


together
    2-> 9-> 1-> 6-> 7->(2)
        2:  51>42>36
        9:  12>54>63
        1:  21>43>56
        6:  61>52>34
        7:  16>24>53

        63>12 + 54
        21>43 + 56
        34>61 + 52
        16>24 + 53
        42>36 + 51

    19->18->10->13->12-> 8->15->(19)
        19: 31>46>52
        18: 13>62>45
        10: 14>35>26
        13: 14>53>62
        12: 16>42>35
        8:  61>34>52
        15: 16>34>25

        13>62 + 45
        26>14 + 35
        14>53 + 62
        35>16 + 42
        61>34 + 52
        34>25 + 16
        52>31 + 46

0:  12>46>53
1:  21>43>56
2:  51>42>36
3:  21>46>35
4:  15>26>43
5:  12>34>56
6:  61>52>34
7:  16>24>53
8:  61>34>52
9:  12>54>63
10: 14>35>26
11: 61>45>32
12: 16>42>35
13: 14>53>62
14: 12>64>35
15: 16>34>25
16: 16>54>32
17: 61>42>53
18: 13>62>45
19: 31>46>52

rich pm edges:
    layer1:
        let's check types of edges
            type1: 1a>bc>de => a1>ce>bd
            type2: 1a>bc>de => a1>db>ec

        type1:
            9:  12>54>63
            1:  21>43>56

            5:  12>34>56
            3:  21>46>35

            15: 16>34>25
            11: 61>45>32

            16: 16>54>32
            17: 61>42>53

        type2:
            4:  15>26>43
            2:  51>42>36

            7:  16>24>53
            6:  61>52>34

            12: 16>42>35
            8:  61>34>52

            18: 13>62>45
            19: 31>46>52

        how they distribute in ocdc:
            L1: 15-11, 2-4
            L2: 3-5, 4-2 + 17-16, 18-19
            L3: 9-1, 6-7 + 12-8, 19-18
            L4: 5-3, 11-15
            L5: 1-9, 16-17
            L6: 7-6, 8-12
        
        DONE: can we make subselection of circuits, to cover pm edges once?
            no we can't:
                try1 fail
                    L1: 15-11, 2-4
                    L2: 17-16, 18-19
                    L3: 9-1, 6-7 + 12-8, 19-18
                    L4: none
                    L5: 1-9, 16-17
                    L6: 7-6, 8-12
                    and we lost 3-5 edge
                try2 fail
                    L1: none
                    L2: 3-5, 4-2 + 17-16, 18-19
                    L3: 9-1, 6-7 + 12-8, 19-18
                    L4: none
                    L5: 1-9, 16-17
                    L6: 7-6, 8-12
                    and we lost 15-11 edge

    layer2:
        type1: 2a>bc>de => a2>ce>bd
            7:  24>53>16
            2:  42>36>51

            10: 26>14>35
            18: 62>45>13

        type2: 2a>bc>de => a2>db>ec
            1:  21>43>56
            9:  12>54>63

            3:  21>46>35
            5:  12>34>56

            4:  26>43>15
            13: 62>14>53

            15: 25>16>34
            19: 52>31>46

        how they distribute in ocdc:
            L1: 4-13, 19-15
            L2: 2-7, 3-5
            L3: 7-2, 9-1 + 18-10, 15-19
            L4: 10-18, 5-3
            L5: 1-9, 13-4
            L6: none

    layer4:
        type1: 4a>bc>de => a4>ce>bd
            1:  43>56>21
            6:  34>61>52

            4:  43>15>26
            5:  34>56>12

            18: 45>13>62
            16: 54>32>16

        type2: 4a>bc>de => a4>db>ec
            2:  42>36>51
            7:  24>53>16

            11: 45>32>61
            9:  54>63>12

            19: 46>52>31
            14: 64>35>12
        
        how they distribute in ocdc:
            L1: 14-19, 11-9
            L2: 5-4, 2-7 + 16-18, 19-14
            L3: 7-2, 1-6
            L4: 18-16, 6-1
            L5: 9-11, 4-5
            L6: none

            this could be interesting!

    layer3:
    layer5:
    layer6:



layer1 pm, L4 o6cdc: 5-3, 11-15
    L4: 1->5->3->0->10->18->16->11->15->8->6->(1)
        1:  43>56 + 21
            5:  56>12 + 34
            3:  21>46 + 35
        0:  46>53 + 12
        10: 35>26 + 14
        18: 62>45 + 13
        16: 54>32 + 16
            11: 32>61 + 45
            15: 16>34 + 25
        8:  34>52 + 61
        6:  52>34 + 61
        1:  43>56 + 21


layer2: L4: 10-18, 5-3
    L4: 1->5->3->0->10->18->16->11->15->8->6->(1)
        1:  43>56 + 21
            5:  56>12 + 34
            3:  21>46 + 35
        0:  46>53 + 12
            10: 35>26 + 14
            18: 62>45 + 13
        16: 54>32 + 16
        11: 32>61 + 45
        15: 16>34 + 25
        8:  34>52 + 61
        6:  52>34 + 61
        1:  43>56 + 21


layer1, rich pm edges:
    
    type1:
        9:  12>54>63
        1:  21>43>56

        5:  12>34>56
        3:  21>46>35

        15: 16>34>25
        11: 61>45>32

        16: 16>54>32
        17: 61>42>53

    type2:
        4:  15>26>43
        2:  51>42>36

        7:  16>24>53
        6:  61>52>34

        12: 16>42>35
        8:  61>34>52

        18: 13>62>45
        19: 31>46>52


layer1 circuits:
    0:  12>46>53
    10: 14>35>26
    18: 13>62>45
    16: 16>54>32
    11: 61>45>32
    9:  12>54>63
    2:  51>42>36
    7:  16>24>53
    3:  21>46>35

        0:  46>53 + 12
        10: 35>26 + 14
        18: 62>45 + 13
        16: 54>32 + 16
            poor
        11: 61>45 + 32
        9:  54>63 + 12
        2:  36>51 + 42
        7:  24>53 + 16
        3:  35>21 + 46
            poor

    1:  21>43>56
    4:  15>26>43
    5:  12>34>56
    6:  61>52>34
    8:  61>34>52
    12: 16>42>35
    13: 14>53>62
    14: 12>64>35
    15: 16>34>25
    17: 61>42>53
    19: 31>46>52

layer2 circuits:
    16: 16>54>32
    17: 61>42>53
    14: 12>64>35
    19: 31>46>52
    18: 13>62>45
        0 times starts with 2
        5 times ends with 2
        i wonder whether there's a difference between starting and ending
    
    0:  12>46>53
    10: 14>35>26
    11: 61>45>32
    9:  12>54>63
    2:  51>42>36
    7:  16>24>53
    3:  21>46>35
    1:  21>43>56
    4:  15>26>43
    5:  12>34>56
    6:  61>52>34
    8:  61>34>52
    12: 16>42>35
    13: 14>53>62
    15: 16>34>25

layer3 circuits:
    0:  12>46>53
    14: 12>64>35
    19: 31>46>52
    15: 16>34>25
    11: 61>45>32
    9:  12>54>63
    1:  21>43>56
    5:  12>34>56
    3:  21>46>35
        6 times starts with 3

    16: 16>54>32
    17: 61>42>53
    18: 13>62>45
    10: 14>35>26
    2:  51>42>36
    7:  16>24>53
    4:  15>26>43
    6:  61>52>34
    8:  61>34>52
    12: 16>42>35
    13: 14>53>62

layer4:
    0:  12>46>53
    14: 12>64>35
    17: 61>42>53
    16: 16>54>32
    11: 61>45>32
    15: 16>34>25
    19: 31>46>52
    18: 13>62>45
    10: 14>35>26
        5 times starts with 4

    9:  12>54>63
    1:  21>43>56
    5:  12>34>56
    3:  21>46>35
    2:  51>42>36
    7:  16>24>53
    4:  15>26>43
    6:  61>52>34
    8:  61>34>52
    12: 16>42>35
    13: 14>53>62



layer1 circuits:
    0:  12>46>53
    10: 14>35>26
    18: 13>62>45
    16: 16>54>32
    11: 61>45>32
    9:  12>54>63
    2:  51>42>36
    7:  16>24>53
    3:  21>46>35

    1:  21>43>56
    4:  15>26>43
    5:  12>34>56
    6:  61>52>34
    8:  61>34>52
    12: 16>42>35
    13: 14>53>62
    14: 12>64>35
    15: 16>34>25
    17: 61>42>53
    19: 31>46>52



o6cdc:
c1     1-> 5-> 3-> 0->10->18->16->11->15-> 8-> 6->(1)
c2     0-> 3-> 7-> 6-> 8->12->17->14->(0)
c3     0->14->19->15->11-> 9-> 2-> 4->13->10->(0)
c4    16->17->12->13-> 4-> 5-> 1-> 9->11->(16)

c5    16->18->19->14->17->(16)
    +
c6     2-> 7-> 3-> 5-> 4->(2)

c7     2-> 9-> 1-> 6-> 7->(2)
    +
c8    19->18->10->13->12-> 8->15->(19)

layer1 o6c4c:
    0-10-18-16-11-9-2-7-3-(0)

    1-4-5-6-8-12-13-14-15-17-19-(1)

    no 3-circuit mod2-sum works

    i need one (and not 3) of
        1,2,3
        2,6,7
        2,4,5
        1,4,6
        3,4,7
        3,4,6
        1,5,8
        3,5,8
        2,4,8



layer1 circuits:
    c1      1-> 5-> 3-> 0->10->18->16->11->15-> 8-> 6->(1)
    c3      0->14->19->15->11-> 9-> 2-> 4->13->10->(0)
    c6      2-> 7-> 3-> 5-> 4->(2)
    -c2     0->14->17->12->8->6->7->3->(0)
    -c4    16->11->9->1->5->4->13->12->17->(16)
    -c7     2->7->6->1->9->(2)

    sum:
        twice:
            8->6->1->5->4->13
            16->11->9->2->7->3->0->14
        once:
            13->10->18->16
            13->12->8
            14->19->15->8
            14->17->16
        doesn't look interesting to be honest            

    0:  12>46>53  +c1
    10: 14>35>26  +c1
    18: 13>62>45  +c1
    16: 16>54>32  +c1
    11: 61>45>32  -c4
    9:  12>54>63  +c3
    2:  51>42>36  -c7
    7:  16>24>53  +c6
    3:  21>46>35  -c2

    1:  21>43>56  -c1
    6:  61>52>34  -c1
    8:  61>34>52  -c1
    15: 16>34>25  +c8
    19: 31>46>52  -c3
    14: 12>64>35  +c5
    17: 61>42>53  -c2
    12: 16>42>35  +c4
    13: 14>53>62  +c4
    4:  15>26>43  +c4
    5:  12>34>56  +c4

    NOTE: signs correspond to having "1a" or "a1"

    o6cdc-L4 c1     1-> 5-> 3-> 0->10->18->16->11->15-> 8-> 6->(1)
    o6cdc-L6 c2     0-> 3-> 7-> 6-> 8->12->17->14->(0)
    o6cdc-L1 c3     0->14->19->15->11-> 9-> 2-> 4->13->10->(0)
    o6cdc-L5 c4    16->17->12->13-> 4-> 5-> 1-> 9->11->(16)

    o6cdc-L2 c5    16->18->19->14->17->(16)
        +
    o6cdc-L2 c6     2-> 7-> 3-> 5-> 4->(2)

    o6cdc-L3 c7     2-> 9-> 1-> 6-> 7->(2)
        +
    o6cdc-L3 c8    19->18->10->13->12-> 8->15->(19)

    layer1 rich pm edges
            type1: 1a>bc>de => a1>ce>bd
            type2: 1a>bc>de => a1>db>ec

        type1:
            9:  12>54>63  +c3 o6cdc-L1
            1:  21>43>56  -c1 o6cdc-L4

            5:  12>34>56  +c4 o6cdc-L5
            3:  21>46>35  -c2 o6cdc-L6

            15: 16>34>25  +c8 o6cdc-L3
            11: 61>45>32  -c4 o6cdc-L5

            16: 16>54>32  +c1 o6cdc-L4
            17: 61>42>53  -c2 o6cdc-L6

        type2:
            4:  15>26>43  +c4 o6cdc-L5
            2:  51>42>36  -c7 o6cdc-L3

            7:  16>24>53  +c6 o6cdc-L2
            6:  61>52>34  -c1 o6cdc-L4

            12: 16>42>35  +c4 o6cdc-L5
            8:  61>34>52  -c1 o6cdc-L4

            18: 13>62>45  +c1 o6cdc-L4
            19: 31>46>52  -c3 o6cdc-L1


        how they distribute in ocdc:
            L1: 15-11, 2-4
            L2: 3-5, 4-2 + 17-16, 18-19
            L3: 9-1, 6-7 + 12-8, 19-18
            L4: 5-3, 11-15
            L5: 1-9, 16-17
            L6: 7-6, 8-12


TODO: analogue of "o4cdc => 3cdc":
    what if we know that each layer corresponds to "ab>cd + ef" layer encodings?
    can we extract something more then?
    e. g. which edges are rich/poor

    at least if we know we have 4 layers, we definitely know that all edges are poor

    also we can try to brute-force the correspondence for the layers
        and then we can deduce some restrictions on the types of vertices we have


Beltrami field:
    - we need faces, we start from nz5 flow, we calculate circulations for each face,
    - now these will be new face values
    - and then we generate new flow as in ocdc construction, as difference of face values
    - and for Beltrami field we should get flow from which we started, but scaled by same value
o5cdc for Petersen graph:
    0 : 4 6 8
    1 : 5 6 9
    2 : 4 7 9
    3 : 5 7 8
    4 : 0 2 5
    5 : 1 3 4
    6 : 0 1 7
    7 : 2 3 6
    8 : 0 3 9
    9 : 1 2 8
    cycle 1 (colour 0): 0 4 2 7 6 1 5 3 8
    cycle 2 (colour 1): 0 6 7 3 5 4
    cycle 3 (colour 2): 0 8 9 1 6
    cycle 4 (colour 3): 5 1 9 2 4
    cycle 5 (colour 4): 7 2 9 8 3

    take edge 2-9, it has flow=1
    circulations:
        cycle 4
            5 1: 3
            1 9: 1
            9 2: -1
            2 4: 3
            4 5: 2
            circ = 8
        cycle 5:
            7 2: 4
            2 9: 1
            9 8: 2
            8 3: 4
            3 7: 3
            circ = 14
    2-9 gets newflow=6
        cycle 3:
            0 8: 2
            8 9: -2
            9 1: -1
            1 6: 2
            6 0: 1
            circ = 2
    8-9, flow=-2, newflow=-12
    1-9, flow=1, newflow=6
        cycle 2
            0 6: -1
            6 7: 1
            7 3: -3
            3 5: 1
            5 4: -2
            4 0: 1
            circ=-3
        cycle 1:
            circ=-1-1-1-2-2-3-3-4-4=-3-4-6-8=-21
    ok, so it's not Beltrami

    what if we recolor?
        cycle 1, colour a1
        cycle 2, colour a2
        cycle 3, colour a3
        cycle 4, colour a4
        cycle 5, colour a5
    - for Beltrami field we have 2 params, b and c
        - circ_k = b*a_k + c
    - in matrix form:
        circ1 =  9 -3 -2 -2 -2    a1
        circ2 = -3  6 -1 -1 -1    a2
        circ3 = -2 -1  5 -1 -1  * a3
        circ4 = -2 -1 -1  5 -1    a4
        circ5 = -2 -1 -1 -1  5    a5

    ok, looks like there are no Beltrami fields for nz5-flows
    at least in this interpretation
