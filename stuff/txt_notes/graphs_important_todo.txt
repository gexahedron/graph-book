main TODO:
- блогпосты/эксперименты:
  - o6c4c
  - petersen graph
  - counterexamples
  - musings about riemann surfaces
  - nz6 flow and its structures
- можно ли частично ориентировать Petersen coloring'и? UPD: можно!
- вытащить ещё задачи из чужих статей:
  - On d-dimensional nowhere-zero r-flows on a graph
  ...
- if t1+t3 < 9, then s0+s1+s2 is odd
  - что происходит на t1+t3=9?
- вычислить известные снарки в базе
  - Blanusa snarks
  - Isaacs snark J5; UPD: done!
- статья Lovasz "Matching Structure and the Matching Lattice"
  - compute brick decomposition
- Noether's Theorem. If W is not hyperelliptic, then every quadratic differential on W can be written as the sum of (three) products of abelian differentials.
  - paper "NON-HYPERELLIPTIC RIEMANN SURFACES" by Richard Hamilton
- Hopf fibration
  - and more generally "circle bundle over a compact Riemann surface"
? nz4 flow for hyperelliptic graphs?
- paper "Antipode Preserving Cubic Maps: the Fjord Theorem"
- paper "BABY’S FIRST RIEMANN-ROCH"
- Disjoint odd circuits in a bridgeless cubic graph can be quelled by a single perfect matching
	доказали Mazzuoccolo's conjecture
- всего 2110 simple snarks до 36.05
	Our aim in this paper is, therefore, to analyse and classify all 5-simple snarks of order not exceeding 36.
    The list of such snarks is known and contains exactly 2110 graphs.
    We have extracted it from the complete list of all nontrivial snarks of order up 36
     which was produced by Brinkmann et al. [6] in 2013.
     The list of all critical snarks of order up to 36 was previously compiled by Carneiro et al. [9],
     however, those with cyclic connectivity at least 5 have not been singled out.
- супер любопытные числа, почему-то все кроме odd_t4_comps_matchings - чётные:
  odd_t1_comps_2_factors << " " << odd_t2_comps_2_factors << " " <<
  odd_t3_comps_2_factors << " " << odd_t4_comps_2_factors << " " <<
  odd_t1_comps_matchings << " " << odd_t2_comps_matchings << " " <<
  odd_t3_comps_matchings << " " << odd_t4_comps_matchings << "; ";
  - последнее число (odd_t4_comps_matchings) вроде чётно при or=0

====

- ABELIAN TROPICAL COVERS
  mentions and reformulates nowhere-zero 5-flow


todo, поток мыслей, но что-то не склеивается:
  nowhere zero flows
  nowhere zero 1-forms (1-forms <=> vector field - maybe it's related to sphere colouring conjecture?); 1-forms - numbers on edges
  nowhere zero flow doesn't correspond either to exact or closed forms
    (but maybe it's a 1-form of a dual graph
    but then we need an embedding)
  discrete exterior calculus: 1-forms
  arithmetic differential equations:
  a -> da = (a-a^p) / p

todo:
  Существуют ли o6c4c, где:
  - нельзя найти 3 цикла, чтоб все oriented вершины были в балансе
  - такие 3 цикла есть, но nz5 нет
  - изучить кейс, где есть 2 цикла, которые можно сложить и снова получить цикл - что там с oriented вершинами, что там с nz5
  - бывает ли nz5 без баланса
  - Нужно понять, особенны ли чем-нибудь ribbon graphы, которые получаются из o5cdc

todo
  такое ощущение
  что начиная с какого-то размера (типа dominating circuit)
    по числу рёбер в цикле
  один слой o5cdc фиксирует все остальные слои
    или не слои, а цепи, из которых слои собираются
  было бы интересно глянуть статистику какую

neato -Tpng graph20g2-3.dot > graph20g2-3.png
./run_experiments mc 2 2 < ../../multicode/Generated_graphs.20.05.sn.cyc4 2> 20g2-3.txt

todo:
https://hog.grinvin.org/Snarks
Snarks with circular flow number 5
очень любопытный список
интересно, вылезали ли эти графы у меня когда-нибудь
и вообще можно было бы в целом сравнить всякие подсписки друг с другом

todo(?):
Branched covers of the sphere
By the Riemann existence theorem, every connected compact Riemann surface admits the structure of a branched cover of the Riemann sphere.
https://mathoverflow.net/questions/53284/which-riemann-surfaces-arise-from-the-riemann-existence-theorem/53286#53286
возьмём например граф петерсена на сфере (икосододекаэдр)
и возьмём например риманову поверхность, которая соответствует 96555 решению
  эта риманова поверхнось разрезается графом петерсена естественным способом
  мы можем спроецировать её на сферу


ВСЕ ВЫВОДЫ ПРО 5cdc и 33pp предположительно ЛОЖНЫЕ
  (а точнее их нужно перепроверить все)


done:
  Надо попробовать построить o5cdc, один из циклов - это цикл из 244 потока, другой - что-то типа dominating цикла включающего oriented вершины и не включающего эти фиолетовые
  result:
  вроде так нельзя
  я глянул o6c4c решение 20g2:3
  во-первых, 244-цикл в общем случае не ориентируется однозначно
  во-вторых, в 20g2:3 там действительно у него есть ориентация, но вот o5cdc с ним сложить не получилось
  но я посмотрел вручную


todo:
как интересно
find_33pp_from_3pm поменялся
в связи с тем, что я немного сузил понятие 33pp
там есть common_cycle, m1, m2
раньше я считал 33pp как пару (m1, m2)
теперь считаю как тройку (common_cycle, m1, m2)


done
  догнал как связаны 5cdc и nz5, получаемые из 33pp - можно просто глянуть на веса рёбер в nz5 и ровно такие и кинуть на циклы из 5cdc (а C5 достанется вес 0, например). А это значит что можно проверить гипотезу, что по любому 5cdc можно построить какой-нибудь 33pp или nz5, TODO: беру nz5, одному из циклов кидаю вес 0, а на два цикла кидаю вес 1, на оставшиеся два - вес 2 (и ещё надо им как-то перебрать ориентацию), суммирую и проверяю, что получаются nz5 и 33pp.
хотя у меня уже есть функция gen_33pp_from_5cdc
может это оно и есть?
да, это оно и есть
надо добить тогда
- добавить gen_nz5_from_5cdc, gen_nz5_from_5cdc_with_orientations
- выписать первый 5cdc, из которого нельзя сложить напрямую nz5 или 33pp



сфера
  - попробовать подразбиения в духе мозаики пенроуза



done (nothing interesting):
  глянуть целочисленные точки на сфере
  x**2 + y**2 + z**2 = d
  d=101
    этот конкретный пример не прокатывает

  глянуть статью Linnik's ergodic method and the distribution of integer points on spheres
  особенно параграф 3
  что за Hecke tree, выглядит интересно


спекулятивное про Moore graph with girth 5 and degree 57:
Well, for example, you can find copies of the 5-cycle, Petersen graph and the Hoffman-Singleton graph sitting inside the Leech lattice, so this leads me to suspect the missing one is in there (if it exists), or inside a related lattice.
Most of my other intuitions about this are based on numerical coincidences. I mean, you shouldn't put too much stalk in these, but I can't help but wonder. The Petersen graph can be obtained from the graph of the dodecahedron by identifying edges and vertices that are antipodal. One construction of the E8 lattice involves the symmetry group (or maybe its double cover?) of the icosahedron (which is dual to the dodecahedron). Since this groups act on the icosa/dodecahedron, it also acts on the Petersen graph, so there's some relation between these objects through said group. It turns out that the Petersen graph has 240 hamiltonian paths, and the E8 lattice (which itself contains copies of the Petersen graph) has 240 root vectors. Now 240 is a highly composite number so it shows up everywhere and thus it might not be too surprising it's in both places, but again since there's already some other connections between these objects I can't help but think there might be an explanation as to why the hamiltonian path of the Petersen graph should correspond to the root vectors of E8.
Also, the missing Moore graph is supposed to have valency 57, and Petersen graph has exactly 57 5-cycles, and I recall some blog post of John Baez where he says that you can view the E8 group as acting on some 57-dimensional Lie algebra.



f: E(G) -> E(H)
d=n=3
s=+-a1+-a2+-a3
s=0 или s=+-3
типа в H это были циклы
а в G внезапно в вершину входит 3 ребра с потоком 1


todo:
Conjecture (Jaeger, Swart): No 7-cyclically connected snark does exist.


todo:
Есть набор статей по теме "flow-continuous mapping". Конкретно интересна конструкция Z3-flow continuous mapping,
  которую не изучали. Вопрос - она даёт что-нибудь новое для кубических графов? 
  В статье ... приведён пример, где она даёт новый mapping для субкубических графов, 
  но я не понимаю, обобщается ли такой подход на кубические. 
  Сходу кажется, что может обобщиться, если например рёбра как-то хитро замкнутся в цепь.
  А именно: там приведён пример D3 -> C3. В D3 2 вершины, с рёбрами a, b, c, a+b+c=0 (mod 3). 
  В C3 3 вершины, рёбра (a,b), (b,c) и (c,a). Происходит разбегание рёбер. 
  Вот вопрос - можно ли это разбегание как-то замкнуть, чтоб всё сошлось. 
  
  UPD: я тут вспомнил, что у редких снарков имеется oriented petersen colouring, 
  который аналогичен Z-flow continuous mapping, из которого следует Z3-flow continuous mapping.
  Поэтому есть надежда, что будут ещё примеры.



- number_of_vertices -> vertex_count
- number_of_edges -> edge_count
- bit_cycle -> cycle_mask
- for int j 0..MAX_DEG -> graph.deg[v]
- ввести рандомный режим
  когда выбирается рандомом несколько графов для проверки
  это нужно на случай гипотез, которые ломаются на бОльшем числе вершин


todo:
  o6c4c, nz5, or_sum != 0
  проверить:
  - что остаётся bipartite граф
  - что сумма слоёв с весом 1 даёт
    - 244 цикл, если в нём нет oriented вершин
    - доп. пути весом 2, начинающиеся и заканчивающиеся в oriented вершинах из 244-цикла,
      проходящие по unoriented вершинам вне 244-цикла
  - причём если рассмотреть oriented вершины вне 244-цикла и
    unoriented вершины вне этих путей, то у них у всех совпадёт тип

  после того, как всё это проверю - попробовать обобщить эту конструкцию на
  - случаи or_sum = 0 (надо понять какую тройку брать)
  - или сразу на все o6c4c, но надо понять, что я хочу проверить вообще
    например пропадают типы (если только nz7 навернуть попробовать)
    или например там точно не bipartite граф будет, но возможно
      - там будет bipartite граф, если выкинуть дополнительно циклы
      которые появятся в сумме этих слоёв с весом 1
  - можно ещё nz6 проверить, или nz7 веса (0,0,0,1,2,4)


todo:
  поискать скоррелированность вершин в других o6c4c
  мне для этого вообще не нужен nz5
  правда нужно зафиксировать тройку слоёв
  в графе петерсена например
  а ещё видимо нужно, чтоб вершина в этой тройке была покрыта равномерно 2 раза
    отсюда следует, что я рассматриваю ровно все вершины, лежащие вне 244-цикла
  а-то есть ощущение, что все эти свойства про nz5 (кроме набора весов)
    это всё про скоррелированность
    и достаточно просто взять o6c4c и любую тройку слоёв
    свойства - в плане что есть тройки и двойки
  надо назвать это кварками : )
  да, в графе петерсена oriented вершины тоже тройкой идут
    а вот unoriented вершина вне 244 цикла там одна, а не 2 или 3
  во всех ли o6c4c можно подобрать 244-цикл, что oriented вершины распределятся тройками и парами?

  я кажется догнал как определяются знаки в nz5 в вершинах вне 244-цикла в or_sum != 0
  на что-то bipartizing похоже
  а ещё странно что
  если взять эту тройку слоёв
  сложить с весами 1
  получим в точности 244-цикл с весом 1, куда-то ориентированный
    хотя наверно это не супер интересный факт
    я всегда получаю 244-цикл при таком сложении + какие-то другие циклы весом 2
    если этот 244-цикл сам по себе большой - то велика вероятность, что вне его больше нет циклов
  я умею это доказывать?
    по-крайней мере я знаю, что это не во всех o6c4c, 244-циклах так происходит
  done:
    нужно это проверить всё же, а вдруг это просто совпадение
    судя по расставленым assert'ам должно прокатить
  я оказался неправ - 28.05g230-87, ребро 25-21
  ой лол, тут к 244-циклу прям приделаны рёбра величины 2
    через oriented вершины
    о, окей
  230:87 - or244types: 19:-224 24:224
  230:87 - or_not244types: 7:112 8:112 16:112 20:-112 23:112
  230:87 - unor_not244types: 0:-112 3:-112 17:-112 21:134 25:-134
  вообще это похоже на самый максимально возможный хардкор


todo:
  o6c4c, nz5, or_sum != 0
  может поискать dominating circuit
  который включает все вершины 244-цикла
  и совместим с этим циклом в плане 5cdc?
    типа у них нет одинаковых двух идущих подряд рёбер


todo:
  попробовать глянуть такую смесь, или узнать - смотрел ли я такое уже или нет
  o6c4c -> oriented, 244-циклы
  дальше ищем такие 244-циклы, в которых нет ни одной oriented вершины
    (правда это условие видимо не самое умное, его видимо можно ослабить
    чтоб на 244-цикле могли быть oriented вершины, но они должны парами ходить
    просто я пока что не понимаю, как вычислить тот факт, что они парой)
  дальше ищем в графе dominating circuit, который состоит из
    всех oriented вершин и из всех вершин 244-цикла
  дальше ищем o5cdc с этим dominating циклом и с этим 244-циклом
  мне кажется я уже делал что-то подобное
  вроде бы не проверял

  я сделаю так:
  - поищу dominating circuit, содержащий этот набор
  - поищу любой цикл, который совпадёт по вершинам полностью

  при этом фиксирую o6c4c решение, а тройки перебираю все по совместимости с or вершинами, как описано выше
    типа что в цикл попадёт чётное число or вершин
  на 18.05:
  ALL FOUND; DOMINATING1, AND CYCLE
  DOMINATING1 CIRCUIT FOUND; BUT NO CYCLE
  на 20.05: то же
  на 22.05: то же

  ограничусь кейсом nz5, or_sum != 0 и спец-тройками:
  20.05, 22.05, 24.05:
    DOMINATING2 CIRCUIT FOUND; BUT NO CYCLE

  24.05
  33:89
  doms: 5/412
  скорее всего всё сломается на 26.05 или 28.05

  вопрос
  а почему мне это интересно?
  я наверно забью
  > 28.05g1422
  > у него нету 333pp, совместимого с o6c4c
    хотя интересный вопрос - как конкретно я проверял совместимость?
  надо вот чё попробовать:
    взять этот граф
    глянуть 244-цикл
    из решения про DOMINATING2 CIRCUIT FOUND; BUT NO CYCLE
    и прицепить к нему oriented вершин
    я получу какой-нибудь цикл? судя по фразе выше - нет


todo:
  o6c4c, nz5, or_sum != 0
  глянуть вершины вне 244-цикла
  и есть какая-то интересная зависимость по типам
  2:191 - or_not244types: 5:-112 7:112 10:112 12:112 20:112
  2:191 - unor_not244types: 2:134 6:-112 8:-112 15:-134 21:-112
  ну то есть
  я бы хотел сказать, что or и unor совпадают по типу
  с точностью до парных вершин в unor
  вроде как все парные or вершины сидят в 244-цикле
  может можно заодно понять - где сидят парные unor вершины?
    всегда ли это одни и те же вершины?
    симметрия та же, что и в or?
  а, ух ты
  unor могут склеиваться и расклеиваться ещё
    но вроде бы знаки консистентны (глянул глазами пару примеров)
  а oriented так не могут
  or (not244 / 244), 32.05, cyc5:
  g3: 123/134, 134/123, 112/224, 224/112
  g7, g9, g10, g12, g13 - то же
  ну ок, понял
  внутри unor not244 встречается также (тройки vs пара): 112/134
    других вариантов не встречал
  а в unor 244 может быть всё что угодно


todo:
  o6c4c
  может это всё следствие какой-то идеи в духе petersen colouring?
  "это всё" - такая ограниченность в структуре oriented вершин
    и симметрии в nz5 в этих вершинах
    и ограниченность возможных весов в nz5


todo:
  восстанавливаю структуры по nz5
  - есть конструкция
    33pp -> 5cdc, nz5
    из которой можно сделать 5cdc -> nz-mod5
    - здесь единственный nz-mod5?
    - сколько разных 5cdc попадает в один и тот же nz-mod5?
  - есть конструкция o6c4c -> nz5
    - сколько разных вариаций весов прокатывает обычно?
    - можно ли из разных вариаций весов получить один и тот же nz5? nz-mod5?
    - много ли разных nz-mod5 здесь получается?
    - можно ли провернуть наоборот?


done:
  o6c4c, nz5
  кажется имеет смысл глянуть unoriented sums тоже


todo:
  o6c4c, nz5
  есть 3 цикла с весом 0
  а у остальных не 0
  смотрю примеры, где сумма по oriented не 0
  дошло тут, что по идее
    если мы говорим про тройки +++, а не пары +-
    то все oriented вершины несидят в цикле 244-flows
    то есть он весь из не-oriented вершин состоит
  поэтому давайте рассмотрим отдельно non-oriented вершины из 244-flows и отдельно те, что на цикле
  во, на 32 вершинах (на первых 46 графах из файла cyc5):

  рассматриваю только те кейсы, где or_sum по графу ненулевой:
  nz5 sums            = 1
  nz5 sums 244        = 1
  nz5 sums not244     = 1
  or nz5 sums         = 8
  or nz5 sums 244     = 1
  or nz5 sums not244  = 8
  un nz5 sums         = 8
  un nz5 sums 244     = 1
  un nz5 sums not244  = 8

  nz5 types           = 8 10 20 24 48
  nz5 types 244       = 8 10 20 16 32
  nz5 types not244    = 8
  or nz5 types        = 8  8 16  8  8
  or nz5 types 244    = 8  8  8  1  1
  or nz5 types not244 = 8
  un nz5 types        = 8 10 20 24 48
  un nz5 types 244    = 8  8 16 16 32
  un nz5 types not244 = 8

  todo
  вот этот кусок выглядит странно
  un nz5 sums         = 8
  un nz5 sums 244     = 1
  un nz5 sums not244  = 1
  надо перепроверить

  попробую ещё глянуть 36 вершин, cyc5 - на первых 27 графах ничего нового, внезапно (8, 10, 24)


  короче явно видно, что вне цикла из 244
  значения потока зафиксированы с точностью до какой-то симметрии (перестановки?)
  todo: что это за симметрия?

  todo: как изучить кейсы, где or_sum по графу нулевой? может мне как-то зафиксировать выбор 244 цикла?


  Assertion failed: (triple_or_count == 0), function find_int_nz_from_o6c4c, file experiments/o6c4c.cpp, line 306.
  так
  где-то я заблуждаюсь в предположениях
  ошибаюсь довольно логичным образом
    ortypes: 3:-112 13:112 17:112 18:-224 20:112 22:224 24:112
    тут есть пара вершин 18, 22
    которые ломают assertion
    можно поменять assertion на проверку, что на этих вершинах сумма выдаст 0
    заменил, вроде ок

  заменил max_fs на types, всё осталось прежним

  изучу s0:
  24 - 15, 13, 14, 16
   8 - 14, 12
  10 - 14
  ничего толком непонятно

  ага
  вершины вне цикла более-менее зафиксированы (8 вариантов)
  а что с циклом происходит?

  stats1: 8 8 1 8 16 20 16 8
  как-то я пропустил эту строчку внезапно
  тут 16 вариантов для oriented
  надо проверить, что для oriented вне цикла - вариантов всё ещё 8
    да, всё так

  судя по весам:
    в случаях 8, 10 и 24 - один из циклов выделенный
    в случае 10 - 3 выделенных цикла
    в случаях 20 и 48 - получаем 2 непересекающиеся тройки циклов


todo:
  заменить сумму по types
  на проверку, что число типов с + совпало с числом типов с -


done:
  o6c4c, nz5
  заменить проверку or_sum и max_fs
  на сумму по типам
  +112, -112 и прочее (прям как числа интерпретировать)
  тут есть забавный эффект, что 224 = 112 + 112
    и что с 134 такое не прокатывает
  заменил


todo:
  o6c4c
  можно ли как-то изучить примеры без nz5,
  где есть цикл из 244-flows
  на котором нет ни одной oriented вершины?
  например, глянуть nz6


todo:
  o6c4c, nz5
  правда ли, что у всех графов один и тот же список возможных весов?
    (комбинаторный, их типа 128 или 256)
    (хотя не всегда, но может там подмножество?)
    или например зависит только от сигнатуры на oriented вершинах
  такое ощущение сложилось после истории про сумму потоков на or вершинах
  да, судя по 28.05, по кейсам, где oriented sums ненулевой
    всего бывает 7680 вариантов (без отождествления перестановок)
    2^9*3*5
    если отсортировать - будет 64 варианта
    и что интересно - разница между максимумом и минимумом
      либо 3, либо 4
    а это значит, что минимум можно выставить в 0
      получится 12 вариантов
      0 0 0 1 2 3
      0 1 1 1 2 3
      0 1 2 2 2 3
      0 1 2 3 3 3

      0 0 0 1 2 4
      0 0 0 2 3 4
      0 1 1 1 2 4
      0 1 2 2 2 4
      0 1 2 4 4 4
      0 2 2 2 3 4
      0 2 3 3 3 4
      0 2 3 4 4 4
    также
    во всех кейсах веса ровно 3 циклов совпадают
    если зафиксировать эту тройку на 0, тогда
    -4 -3 -2 0 0 0
    -4 -2 -1 0 0 0
    -3 -2 -1 0 0 0
    -3 -1  0 0 0 1
    -2 -1  0 0 0 1
    -2 -1  0 0 0 2
    -2  0  0 0 1 2
    -1  0  0 0 1 2
    -1  0  0 0 1 3
     0  0  0 1 2 3
     0  0  0 1 2 4
     0  0  0 2 3 4
    если не учитывать перестановки
      тогда получится 1440 вариантов (= 12 * 6 * 5 * 4; 12 посорченных вариантов, и нужно выбрать местоположение 3 различных чисел)
  done (есть вложенный todo):
    глянуть веса для oriented sums = 0
    ух ты
    если рассмотреть вообще все веса,
    то и такое бывает (разница между минимумом и максимумом = 5)
    -2 -1 0 0 0 3
    и разница в 6 бывает
    -2 -1 2 2 2 4
    и такое
    -1 -1 0 0 1 1 (разница 2, нету 3 одинаковых весов)
    а ещё вот так бывает (5 разных чисел)
    0 1 2 2 3 4
    и вот так
    -1 0 1 2 3 4
    но видимо это более-менее всё (разницы в 1 нет, больше 6 нет, 4 одинаковых чисел не бывает = меньше 3 разных не бывает)
    todo: это можно как-то формально описать?


todo:
  есть мысль, что можно разбить or вершины на большее число подклассов
  ой не, всё сложнее
  смотрю кейсы, где есть nz5 и oriented sums ненулевые
  24.05g15:
    rov: 0 0 0 5
    types: 11:224 12:-112 15:-224 16:-112 22:-112
    types: 11:-134 12:-123 15:134 16:-123 22:-123
    types: 11:-112 12:-224 15:112 16:-224 22:-224
    тут понятно разбиение - (11, 15) и (12, 16, 22)
  24.05g25:
    rov: 0 0 2 3
    types: 2:112 4:-112 12:-112 18:-112 19:-112
    types: 2:123 4:-123 12:-123 18:-123 19:-123
    types: 2:134 4:-134 12:-134 18:-134 19:-134
    types: 2:-134 4:134 12:134 18:134 19:134
    тут 5 вершин одного типа, с сигнатурой (-, +, +, +, +)
    во втором o6c4c та же история
  24.05g33:
    rov: 0 0 0 5
    types: 5:123 7:123 8:123 15:123 17:-123
    types: 0:-123 3:-123 9:-123 15:123 17:-123

    rov: 0 0 2 3
    types: 3:-123 8:123 14:-123 17:-123 19:-123
    types: 3:-123 8:123 13:-123 18:-123 21:-123
    types: 3:224 8:-224 15:-224 19:-224 20:-224
    types: 3:-123 8:123 12:123 16:123 21:123
  ага, от rov это не зависит
  может это от графа зависит или какого другого параметра
    возможно от чётности s0
    (-, +, +, +, +) - s0 чётный
    (+,-), (+, +, +) - s0 нечётный

  28.05g89
    types: 0:-112 4:112 6:-112 14:-112 18:-112 20:112 24:-112
    (- + - - - + -) s0 чётный
    types: 6:-134 11:-134 14:-134 18:-134 22:-134 23:-134
    (- - - - - -) s0 чётный
    types: 0:224 1:-224 3:112 5:-112 21:224 22:224 24:224
    (+ - + + +) (+ -) s0 чётный
    types: 0:224 1:-224 2:-224 3:112 5:-112 20:-224 25:-224
    (+ - - - -) (+ -) s0 чётный
  28.05g133
    types: 1:224 2:-224 5:-224 10:-224 15:-224 17:-224 21:-224 24:-224
    (+, -, -, -, -, -, -, -) s0 чётный

  получается это такое усиление гипотезы, что or != 1
    они склеены на самом деле
    хотя это наверно даже понятно как можно понять
    надо глянуть - как именно циклы друг с другом склеены в этих вершинах
    и понять - почему они рождаются парами с противоположным знаком,
    тройками с одним и тем же знаком,
    или более сложными комбинациями вот этих двух конфигураций
  хотя это я игнорирую сейчас кейсы, где есть несколько oriented вершин
    а сумма по ним 0

  24.05g15:
    (11, 15) и (12, 16, 22)
    circuit pairings:
    11: 6,11, 2,12,  9,1,
    15: 6,0,  2,13,  9,10,
    12: 0,7,  6,4,  10,12,
    16: 0,4,  6,13, 10,8,
    22: 1,3,  6,8,  11,13,
    так, это цепи, тоже полезно, но мне интересны были циклы
    pairings:
    11: 2,4   1,5,  3,0,
    15: 2,0,  1,5,  3,4,
    12: 2,1,  0,3,  4,5,
    16: 0,1,  4,3,  2,5,
    22: 0,1,  2,3,  4,5,
     . -1 0 . 2
    -2  . . 1 2
    =>
     .  . 0 . 2 . 4
     .  . . 1 2 3
    weights: 0 1 0 2 0 -2
             0 1 2 3 4  5
    types: 11:123 12:-134 15:-123 16:-134 22:-134
    11: 0 -1 2
    15: 0 -1 2
    12: 1 2 -2
    16: 1 2 -2
    22: 1 2 -2
    забавно
    это не объясняет знаки
    и почему их 2 и 3
    а вот это интересно
      weights: 0 1 0 2 0 -2
      types: 11:123 12:-134 15:-123 16:-134 22:-134
      weights: 0 1 0 2 0 3
      types: 11:224 12:-112 15:-224 16:-112 22:-112
    в любом случае видно, что
    слои 0,2,4 особенные

  кажется тут ещё не просто разбиение на пары и тройки
    они зависят друг от друга
    и либо принимают значения 123 и 134
    либо 112 и 224

  да тут и unoriented вершины тоже зафиксированы, найс
  types: 0:-112 1:-134 2:-112 3:134 4:112 5:123 6:224 7:-224 8:-123 9:123 10:134 11:-224 12:112 13:-134 14:-123 15:224 16:112 17:-112 18:134 19:-112 20:224 21:-224 22:112 23:-134
  а не, это только один пример такой, на g33 такого нет, там 3 разных решения
  но хм, гипотеза! - число решений зависит только от графа
    а именно - от какой-то другой конструкции, условно, например, от числа раскрасок Петерсена
    но не от числа раскрасок петерсена
    а, ещё от числа троек видимо зависит
      но в 28.05g133 не зависит
    с не-oriented вершинами всё чуть сложнее:
      точнее так
      для 28.05 (правда не все отсмотрел) встретилось 4 варианта количества решений
      8, 10, 24, 48
      а для oriented вершин только 8 всегда

todo:
  oriented vs ignored
  o6c4c vs o333-flows
    хотя тут нет цикла в o333-flows
    хотя вершины всё равно можно попробовать классифицировать
    например - вершины тройки
  o6c4c vs o244-flows
    на 24.05g33 есть вариант
    где по o6c4c можно слепить nz5, но o244 решений нет
  nz5, nz-mod5

  todo (перепроверить):
  до этого я сравнивал o244-flows и 6c4c-244-flows-33-pp-nz5
    по nz5 пересечение пустое:
      ребро 4 в o244-flows-nz5 будет сидеть на цикле
      ребро 4 в 6c4c-244-flows-33-pp-nz5 будет сидеть вне цикла
      но можно сравнить nz-mod5


todo:
  o6c4c, в которых есть nz5
  vs comps:
  odd_t1_comps_2_factors << " " << odd_t2_comps_2_factors << " " <<
  odd_t3_comps_2_factors << " " << odd_t4_comps_2_factors << " " <<
  odd_t1_comps_matchings << " " << odd_t2_comps_matchings << " " <<
  odd_t3_comps_matchings << " " << odd_t4_comps_matchings

  смотрю файл по 24.05 - вижу, что
    odd_t1_comps_2_factors чётный (odd_t2_comps_2_factors чётный)
    odd_t3_comps_2_factors чётный (odd_t4_comps_2_factors чётный)
    odd_t1_comps_matchings чётный (odd_t2_comps_matchings чётный)
  где это ломается?


todo:
  упал assert на 28.05g611
  if (total_poor_comps == 1) {
    assert(s0 % 2 == 0); // TODO
  }
  я его не проверял так далеко?
  результат - лол, уже было, закомментил в коде, поправил в блоге
  (ещё была такая мысль - скорее всего total_rich_comps тоже надо будет попросить быть == 1)
  todo: визуализировать пример, хотя я вряд ли что пойму


todo:
  судя по всему
  nz5 в (oriented vs ignored) супер-специфические
  вопрос - все ли nz5 такого вида можно получить?
  вид такой - классифицируем вершины на
   112  123  134  224
  -112 -123 -134 -224
  знак определяется максимумом в тройке
  считаем число вершин каждого вида
  и хотим, чтобы #112 = #-112 и то же для остальных


todo:
  6c4c
  24.05, 26.05
  s2 (= even_rich_matchings), even_t3_matchings, even_t4_matchings
  s2: 0; em: 0 3;
  s2: 0; em: 3 0;
  s2: 1; em: 0 2;
  s2: 1; em: 3 1;
  s2: 2; em: 0 1;
  s2: 2; em: 3 2;
  s2: 3; em: 0 0;
  s2: 3; em: 3 3;
  что это? это легко показать?
  почему я нигде не упомянул эту зависимость, что снова не напарываться на неё?
  вообще получается, em - это декомпозиция s2


todo:
  вот эти тройки oriented вершин, которые не схлопываются в 0
  они зафиксированы при зафиксированном o6c4c, или это каждый раз разная тройка?


todo:
  o6c4c, nz5
  если в oriented вершину попал тип 123 или 134 - он вообще балансируется?


todo (внутри есть todo) (conjecture):
  o6c4c, oriented
  проверить сумму по типам в oriented вершинах
  фиксирую o6c4c, и смотрю сумму
  сумма фиксирована или нет?
  24.05: сумма нефиксирована
    но зато фиксирован 0 или неноль
    более того - если не 0, то встречаются все 3 варианта сумм 6, 9, 12
    и мы имеем ровно 3 вершины, совпадающие по типу и по знаку
      (но возможны дополнительные парные вершины)
    очевидно or нечётный
    odd_t1_comps_2_factors чётный (odd_t2_comps_2_factors чётный)
    odd_t3_comps_2_factors чётный (odd_t4_comps_2_factors чётный)
    odd_t1_comps_matchings чётный (odd_t2_comps_matchings чётный)
    rov: 0 0 0 3; or = 3; t1 = 0; t3 = 9 ; odd_t1_comps_2_factors = 0; odd_t1_2_factors = 0
    rov: 0 0 0 5; or = 5; t1 = 0; t3 = 15; odd_t1_comps_2_factors = 0; odd_t1_2_factors = 0
    rov: 0 0 2 3; or = 3; t1 = 1; t3 = 13; odd_t1_comps_2_factors = 4; odd_t1_2_factors = 2
    even_t3_matchings = 0

    s2 != 0
    s1 + s2 = 1 (mod 2) (upd: сломал на 24.05g33)
      может так тогда?
      s1 + s2 + odd_t2_2_factors = 1 (mod 2)
      выглядит искусственно, но вроде прокатывает
      но на 26.05 не прокатывает
      s1: 29; s2: 1; odd_t2_2_factors: 2;
      s1: 29; s2: 2; odd_t2_2_factors: 1;
      s1: 30; s2: 1; odd_t2_2_factors: 1;
      s1: 30; s2: 2; odd_t2_2_factors: 2;
      s1: 31; s2: 1; odd_t2_2_factors: 2;
      s1: 34; s2: 1; odd_t2_2_factors: 1;
    ага, как интересно
    s2 + even_t4_matchings = 3
      ага, это неинтересно

  вообще этот эксперимент хорошо показывает, как усложняются решения
  и как тяжело искать зависимости
  и наверно показывает структуру or вершин
  todo: выписать ещё веса циклов

  26.05:
    вывод про сумму тот же
    очевидно or нечётный
    odd_t1_comps_2_factors чётный (odd_t2_comps_2_factors чётный)
    odd_t3_comps_2_factors чётный (odd_t4_comps_2_factors чётный)
    odd_t1_comps_matchings чётный (odd_t2_comps_matchings чётный)
    even_t3_matchings = 0
    s2 != 0
    rov: 0 0 0 3; or: 03; t1: 0; t3:  9; comps: 0; o2: 0
    rov: 0 0 0 5; or: 05; t1: 0; t3: 15; comps: 0; o2: 0
    rov: 0 0 0 7; or: 07; t1: 0; t3: 21; comps: 0; o2: 0
    rov: 0 0 2 3; or: 05; t1: 1; t3: 13; comps: 4; o2: 2
    rov: 0 0 2 5; or: 07; t1: 1; t3: 19; comps: 4; o2: 2
    rov: 0 0 4 3; or: 07; t1: 2; t3: 17; comps: 2; o2: 1
    rov: 0 0 4 3; or: 07; t1: 2; t3: 17; comps: 4; o2: 2
    rov: 0 1 2 2; or: 05; t1: 2; t3: 11; comps: 6; o2: 2
    rov: 0 1 2 4; or: 07; t1: 2; t3: 17; comps: 6; o2: 2
    rov: 0 1 4 2; or: 07; t1: 3; t3: 15; comps: 2; o2: 1
    rov: 0 1 4 4; or: 09; t1: 3; t3: 21; comps: 2; o2: 1
    rov: 0 2 2 3; or: 07; t1: 3; t3: 15; comps: 6; o2: 0


  28.05:
    ещё не запускал
    думаю, что может вылезут варианты с двумя тройками?
    да!
    oriented sums: 0
    oriented sums: -12 -9 -6 6 9 12
    oriented sums: -24 -18 -12 12 18 24
    круто
    проверил до g610 включительно:
      s2 бывает также 0
        даже при нечётном or
      even_t3_matchings бывает также == 3
        но только в случаях, когда 6 совпадающих вершин (or чётный) (-24 -18 -12 12 18 24)
      все _comps_ числа, перечисленные выше, всё ещё чётные


todo:
  проверил ещё до 22.05 включительно:
    число o244 решений не нулевое, если есть nz5 и oriented вершины
  сломалось на 24.05g33
  oriented sums: -12 -9 -6 6 9 12
    g33: new o6c4c: or: 05; t1+t3: 15; s0: 14; s1: 31; s2: 2; PAR: 1 (1);
      em: 0 1; o2: 0 2; t1: 0; t2: 5; t3: 15; t4: 16; comps: 0 2 6 0 0 2 6 1; rov: 0 0 0 5;
    o244: 0; orverts: 5 7 8 15 17 ;
  а на 20.05g1 есть вариант, что o244 решений нет, а nz-mod5 решение есть


done (хотя внутри есть todo):
  правда ли, что каждый тип вершин появляется парами, причём поровну со знаком + и -?
    то ли про nz5 (по идее нет)
      нет
    то ли про o6c4c nz5
      нет
    то ли про (oriented vs ignored) nz5
      до 20.05 включительно правда (хотя я только circuits смотрел)
      заодно проверяю сразу сумму максимумов по oriented вершинам
      сломалось на 22.05g15
      причём на circuits, не cycles
    todo:
      глянуть пример где сломалось
      посчитать сколько таких вообще - кажется это большая редкость
  сумма по oriented вершинам всегда пока что 0
    до 24.05 включительно


done (хотя внутри есть todo):
  o6c4c, oriented
  проверить сумму по типам в oriented вершинах
  там только типы 112 и 224
    todo: это правда? вроде нет
  посчитать 4,-4,2,-2
  неправда, ломается на 24.05g2
    очень дискретно ломается - помимо 0 получаю суммы 6, 9, 12
    из-за 112, 123 и 134 вершин
      причём каждый раз как смотрел - они почему-то тройками ходят, одинаковыми
      причём других oriented вершин в решении нет, только эти 3 одинаковых
      например
      7: -1 2 -1
      14: 2 -1 -1
      18: 2 -1 -1
      или
      3: 4 -3 -1
      14: -3 -1 4
      19: -3 -1 4
      или
      5: 3 -1 -2
      8: -1 -2 3
      14: 3 -1 -2
    todo: глянуть пример


todo:
  oriented vs ignored
  что нужно попробовать поменять:
    nz5 -> nz6
      правда я не умею генерить все возможные nz6 по 33pp
      точнее так - nz6 <=> 34-pp
      а я не умею генерить 34-pp
      хотя при этом там всё ещё есть понятный цикл
      во!
      !!!!!!!!!!!!!!!TODO!!!!!!!!!!!!!!!
        я знаю как по nz6 построить 34-pp
        давайте возьмём nz5 или nz6, построенный в o6c4c
        и построим по нему 34-pp
        и глянем цикл
      но для этого придётся закодить
        Lemma 2.4 (Tutte [15]). If a graph G admits a modular k-flow (D, f),
        then G admits a integer k-flow (D, f') such that
        f(e) ≡ f'(e) (mod k) for all e ∈ E(G)
        что не совсем просто
        и включает в себя большой перебор (всех путей между каждой парой вершин, если я всё правильно помню)
      todo
        а может тут можно как-то просто по nz-mod6 построить 34-pp?


done (хотя внутри есть todo):
  oriented vs dominating
  пробую такой вариант:
    - считаю o6c4c, по нему считаю nz5, сохраняю в этом nz5 набор oriented вершин
      done
    - считаю 33-pp, ищу варианты с dominating cycle, и считаю nz5
      видимо надо сначала пофиксить код для генерации 33-pp
      есть работающий код в 5cdc
      todo - надо вспомнить - как по 5cdc восстановить все 33pp
        там дополнительный перебор по ориентированию рёбер
      done
    - дальше выписываю ignored, и oriented, и какой nz5 в пересечении
      done

    результат
      o6c4c -> nz5, oriented
      33-pp -> nz5, dominating cycle, ignored

      10.05 - ok (то есть всё ещё нет 134, oriented не пересекается с ignored)
      18.05 - ok
      20.05 - сломал; 20.05g5, поток:
        0: -4 2 2
        1: -2 4 -2
        2: -3 2 1
        3: -2 -2 4
        4: -2 4 -2
        5: -4 2 2
        6: 2 -1 -1
        7: 3 -4 1
        8: 1 1 -2
        9: 2 -1 -1
        10: -2 -2 4
        11: 1 1 -2
        12: -1 3 -2
        13: -4 2 2
        14: 4 -2 -2
        15: 2 -1 -1
        16: 2 -1 -1
        17: -3 2 1
        18: -4 1 3
        19: 2 1 -3
        types: 112 123 134 224
        oriented: 0 1 5 8 14 15 ; ignored: 7 18 ; both: {}
        вершины 7 и 18 с потоком 134, при этом не является oriented
        хотя во всех решениях пересечение пустое
        а ещё странным образом вершины 134 ходят парами
        кажется это общий факт, надо проверить
      22.05: пока что я только знаю, что здесь есть примеры с непустым пересечением

  todo:
    насколько честный перебор у меня для nz5 из o6c4c?
      мне кажется, что почти честный, хотя доказать не могу
      наблюдения
        - пусть сработали веса a,b,c,d,e,f
          тогда a+1,b+1,c+1,d+1,e+1,f+1 тоже сработают
        - отсортируем
        0<=a<=b<=c<=d<=e<=f
        непонятно, хочется как-то ограничить величину, но непонятно как
      я перебираю веса от -4 до 4
    выписать ещё веса для o6c4c (для nz-mod5 должны быть -c,-1,0,0,1,c)
    глянуть, что там не только o5cdc участвует


done (хотя внутри есть todo):
  oriented vs ignored
  замена: dominating cycle -> dominating circuit
    классика
    хочу убедиться ещё раз, что вершин типа 134 вообще не бывает
    хм, облом, бывают, на 20.05 есть пример
    зато до 22.05 включительно пересечение oriented и ignored - пустое
  todo: визуализировать пример


done:
  oriented vs ignored
  замена: nz5 -> nz-mod5
    типа более строгая гипотеза получится
      строже в плане oriented vs ignored
      а вот в плане появления типов вершин - происходит перегруппировка, и фиг знает что там будет,
      скорее всего ничего
      даже очевидно, что ничего - вершины 113 и 442 ходят парами, как и 221 и 334
  результат - всё сломалось, ничего интересного
  даже если ограничиться circuit


done (хотя внутри есть todo):
  oriented vs ignored
  замена: 33pp с dominating cycle -> просто 33pp
    добавилось чуть больше матчей
    результат - всё сломалось:
      на 20.05 есть вариант
      types: 112 123 134 224
      oriented: 7 8 16 ; ignored: 2 3 4 5 10 12 14 15 18 19 ; both: {}
      134 в ignored
      и есть другой вариант, где в пересечении 123
      что, если ignored считать только тех, кто соседний с циклом?
        то же самое
      что, если ignored считать только тех, кто всеми тремя рёбрами соседний с циклом?
        стало чуть лучше
        но есть вариант, где both пустой, в ignored вершина 134
      на 22.05 никаких новых пересечений не добавилось
      как-то уныло получается
    todo:
      проверить, что 33pp корректный



todo
  в статье The Homology of Abelian Covers of Knotted Graphs
  есть раскраска графа петерсена элементами группы Z_2^5
  а половина циклов описывается как подгруппы индекса 2
  известно, что 6c4c циклов там нет
  вопрос - можно ли 5cdc решение описать какое-нибудь?

todo
  нужен код для визуализации
  чтоб понять что происходит в задаче petersen colouring vs same 5cdcs

todo
  может глянуть пересечение проблем 244-flows и petersen colouring?
  и там и там есть циклы

todo
  поизучать non-separating cycles
  прям полные антиподы dominating circuits

todo
  как связаны nz-потоки
  в гиперграфе и в его двойственном гиперграфе?

todo:
  как выяснилось
  у разных раскрасок петерсена может совпасть профиль
  но они будут разной природы (в плане совпадения 5cdc)
  можно ли тут что-то вытащить для o6c4c?
  так, интересно
  я имел в виду вот этот граф
  чётность числа ориентированных вершин
  точно не хватит зависимости только от профиля
  28.05g2869
  prof: prprrrrrrrrprrrrrrprrrrrrrrprrrrrrrrrrrrrr
  так вот - этого профиля просто нет из раскрасок петерсена
  так что фиг знает, надо по-другому действовать

todo
  различные petersen colouring
  с совпадающими 5cdc
  это должно быть по идее что-то простое
  раз тут чётко степени двойки и чёткие квадратики
    квадратик в том смысле что
    мы выбираем один индекс из каждого столбца
    и каждый столбец участвует
  какая-то чёткая двоичная структура комбинаторная
  done: надо выписать индексы раскрасок петерсена, сгруппированные по совпадению профилей rich-poor

  WARNING
    надо перепроверить код про 5cdc и 33p,
    вполне возможно, что там баги, и все выводы
    здесь неверные

  посмотреть ещё по приколу
  petersen 5cdc
  бывает ли, что одно и то же 5cdc
  приходит из нескольких раскрасок?
  да, бывает (причём сразу несколько 5cdc; TODO: интересно почему;
    вот почему
    я не проверил, но гипотеза
    что они просто одно и то же выдают
    то есть ещё раз
    берём 2 разные раскраски петерсена, у которых совпадает профиль
      (и видимо ещё что-то, что я ещё не знаю)
      и у них полностью совпадут наборы 5cdc)
    А ВОТ И НЕТ
    я так понял наоборот
    совпадения бывают между разными профилями
    но в каждой паре - эти пары профилей
    они одни и те же наборы образуют
    не, неправда
    к числу rich рёбер тоже не получается привязать
    зато!
->    есть консистентное наблюдение
    что можно разбить расраски на 2 лагеря
    что в этих парах (и четвёрках?) раскраски всегда из разных лагерей
    поди ещё и размеры лагерей совпадут
      вроде нет
        pet_5cdc_to_col_idx size: 2: 2 4
        pet_5cdc_to_col_idx size: 2: 2 4
        pet_5cdc_to_col_idx size: 2: 2 5
        pet_5cdc_to_col_idx size: 2: 2 5
        pet_5cdc_to_col_idx size: 2: 1 4
        pet_5cdc_to_col_idx size: 2: 1 4
        pet_5cdc_to_col_idx size: 2: 1 5
        pet_5cdc_to_col_idx size: 2: 1 5
        pet_5cdc_to_col_idx size: 2: 1 4
        pet_5cdc_to_col_idx size: 2: 1 4
        pet_5cdc_to_col_idx size: 2: 2 5
        pet_5cdc_to_col_idx size: 2: 2 5
        pet_5cdc_to_col_idx size: 2: 1 5
        pet_5cdc_to_col_idx size: 2: 1 5
        pet_5cdc_to_col_idx size: 2: 2 4
        pet_5cdc_to_col_idx size: 2: 2 4
    тут что-то более хитрое
    какие-то хитрые симметрии мб? или перестановки циклов в 5cdc?
    кстати лол, глянул 6с4с, чего-то ожидал тех же строчек
      но нет! на 22.05 пусто
      прикольно! 6c4c не хочет повторяться, даже до 26.05 включительно
->      TODO: можно ли это доказать?
      я немного неумный
      у графа Петерсена единственное 6c4c решение
      с другой стороны, всё равно хочется понять, почему здесь инъекция
      кстати, если это так, то
      #petersen colouring <= #6c4c решений
      TODO: неужели по 6c4c можно восстановить petersen colouring?

->      done: или возможно тут 5cdc и 6c4c вообще ни при чём,
      а это правда для любого построимого цикла из прообраза?
      неправда, ломается на 18.05g2
      то же, если смотреть на full cycle'ы
      если смотреть на dominating circuits, то ломается на 20.05g4
    так, на самом деле
    в 5cdc тоже образ в графе Петерсена совпадает
      то есть, если зафиксировать 5cdc в G, то в него попадает максимум
      1 решение 5cdc из графа Петерсена (само это решение ещё много куда попадает,
        часто с кратностями;
        TODO: совпадают ли эти кратности? вроде нет)
->    TODO: а это можно доказать?
    а вот кстати чтоб 3 и больше раскрасок выдало одно и то же 5cdc
      пока что не вижу примеров
      проверил до 24.05 включительно
      на 26.05 нашлось по 4 раскраски:
        g84
        number of petersen colourings: 26; number of profiles: 10
        pet_5cdc_to_col_idx size: 4: 2 3 6 7
        pet_5cdc_to_col_idx size: 4: 2 3 6 7
        pet_5cdc_to_col_idx size: 4: 2 3 6 7
        pet_5cdc_to_col_idx size: 4: 2 3 6 7
        pet_5cdc_to_col_idx size: 4: 17 16 13 12
        pet_5cdc_to_col_idx size: 4: 17 16 13 12
        pet_5cdc_to_col_idx size: 4: 17 16 13 12
        pet_5cdc_to_col_idx size: 4: 17 16 13 12
        pet_5cdc_to_col_idx size: 4: 5 4 9 8
        pet_5cdc_to_col_idx size: 4: 5 4 9 8
        pet_5cdc_to_col_idx size: 4: 5 4 9 8
        pet_5cdc_to_col_idx size: 4: 5 4 9 8
        pet_5cdc_to_col_idx size: 4: 14 15 10 11
        pet_5cdc_to_col_idx size: 4: 14 15 10 11
        pet_5cdc_to_col_idx size: 4: 14 15 10 11
        pet_5cdc_to_col_idx size: 4: 14 15 10 11
        pet_5cdc_to_col_idx size: 4: 2 4 10 12
        pet_5cdc_to_col_idx size: 4: 2 4 10 12
        pet_5cdc_to_col_idx size: 4: 2 4 10 12
        pet_5cdc_to_col_idx size: 4: 2 4 10 12
        pet_5cdc_to_col_idx size: 4: 17 15 9 7
        pet_5cdc_to_col_idx size: 4: 17 15 9 7
        pet_5cdc_to_col_idx size: 4: 17 15 9 7
        pet_5cdc_to_col_idx size: 4: 17 15 9 7
        pet_5cdc_to_col_idx size: 4: 14 16 6 8
        pet_5cdc_to_col_idx size: 4: 14 16 6 8
        pet_5cdc_to_col_idx size: 4: 14 16 6 8
        pet_5cdc_to_col_idx size: 4: 14 16 6 8
        pet_5cdc_to_col_idx size: 4: 5 3 13 11
        pet_5cdc_to_col_idx size: 4: 5 3 13 11
        pet_5cdc_to_col_idx size: 4: 5 3 13 11
        pet_5cdc_to_col_idx size: 4: 5 3 13 11
         2  3  6  7
         5  4  9  8
        14 15 10 11
        17 16 13 12
        квадратик
          изначально был неправильный, поправил
        20  18
        23  19
        (2) 22
            21
        rrrpppprpppprrrprpprprrpprrrrrrpppprrpp: 25
        rrrpprprpppprrrpppprpprprrrrrrrppprpppr: 21 22
        rrrrpprrprpprrprrprrpprprrrrrrpprpppppp: 18 19
        rrrprprrpppprrrrppprrprpprrrrrppprprprp: 3 4 15 16
        rrrppprrpppprrrrppprpprprrrrrrppppppppp: 2 5 14 17 20 23
          видимо 20 и 23 другой природы, но с совпавшим профилем
        rrrpppprppprrrrpppprpprprrrrrrppprprprp: 6 9 10 13
        rpppprprppprprpprprpprrprpprprrrrrrrrrr: 1
        rrrpppprpppprrrppprrprrpprrrrrprprppppr: 24
        rrrprpprppprrrrpppprrprpprrrrrppppppppp: 7 8 11 12
        pprpprprppprrppprprpprrprrpprprrrrrrrrr: 0

        g139
        number of petersen colourings: 44; number of profiles: 10
        pet_5cdc_to_col_idx size: 4: 10 11 19 20
        pet_5cdc_to_col_idx size: 4: 10 11 19 20
        pet_5cdc_to_col_idx size: 4: 10 11 19 20
        pet_5cdc_to_col_idx size: 4: 10 11 19 20
        pet_5cdc_to_col_idx size: 4: 10 12 29 31
        pet_5cdc_to_col_idx size: 4: 10 12 29 31
        pet_5cdc_to_col_idx size: 4: 10 12 29 31
        pet_5cdc_to_col_idx size: 4: 10 12 29 31
        pet_5cdc_to_col_idx size: 4: 11 13 30 32
        pet_5cdc_to_col_idx size: 4: 11 13 30 32
        pet_5cdc_to_col_idx size: 4: 11 13 30 32
        pet_5cdc_to_col_idx size: 4: 11 13 30 32
        pet_5cdc_to_col_idx size: 4: 12 13 21 22
        pet_5cdc_to_col_idx size: 4: 12 13 21 22
        pet_5cdc_to_col_idx size: 4: 12 13 21 22
        pet_5cdc_to_col_idx size: 4: 12 13 21 22
        pet_5cdc_to_col_idx size: 4: 15 17 40 42
        pet_5cdc_to_col_idx size: 4: 15 17 40 42
        pet_5cdc_to_col_idx size: 4: 15 17 40 42
        pet_5cdc_to_col_idx size: 4: 15 17 40 42
        pet_5cdc_to_col_idx size: 4: 16 18 41 43
        pet_5cdc_to_col_idx size: 4: 16 18 41 43
        pet_5cdc_to_col_idx size: 4: 16 18 41 43
        pet_5cdc_to_col_idx size: 4: 16 18 41 43
        pet_5cdc_to_col_idx size: 4: 19 21 36 38
        pet_5cdc_to_col_idx size: 4: 19 21 36 38
        pet_5cdc_to_col_idx size: 4: 19 21 36 38
        pet_5cdc_to_col_idx size: 4: 19 21 36 38
        pet_5cdc_to_col_idx size: 4: 20 22 37 39
        pet_5cdc_to_col_idx size: 4: 20 22 37 39
        pet_5cdc_to_col_idx size: 4: 20 22 37 39
        pet_5cdc_to_col_idx size: 4: 20 22 37 39
        pet_5cdc_to_col_idx size: 4: 25 26 40 41
        pet_5cdc_to_col_idx size: 4: 25 26 40 41
        pet_5cdc_to_col_idx size: 4: 25 26 40 41
        pet_5cdc_to_col_idx size: 4: 25 26 40 41
        pet_5cdc_to_col_idx size: 4: 27 28 42 43
        pet_5cdc_to_col_idx size: 4: 27 28 42 43
        pet_5cdc_to_col_idx size: 4: 27 28 42 43
        pet_5cdc_to_col_idx size: 4: 27 28 42 43
        pet_5cdc_to_col_idx size: 4: 29 30 36 37
        pet_5cdc_to_col_idx size: 4: 29 30 36 37
        pet_5cdc_to_col_idx size: 4: 29 30 36 37
        pet_5cdc_to_col_idx size: 4: 29 30 36 37
        pet_5cdc_to_col_idx size: 4: 31 32 38 39
        pet_5cdc_to_col_idx size: 4: 31 32 38 39
        pet_5cdc_to_col_idx size: 4: 31 32 38 39
        pet_5cdc_to_col_idx size: 4: 31 32 38 39
        pet_5cdc_to_col_idx size: 4: 4 5 15 16
        pet_5cdc_to_col_idx size: 4: 4 5 15 16
        pet_5cdc_to_col_idx size: 4: 4 5 15 16
        pet_5cdc_to_col_idx size: 4: 4 5 15 16
        pet_5cdc_to_col_idx size: 4: 4 6 25 27
        pet_5cdc_to_col_idx size: 4: 4 6 25 27
        pet_5cdc_to_col_idx size: 4: 4 6 25 27
        pet_5cdc_to_col_idx size: 4: 4 6 25 27
        pet_5cdc_to_col_idx size: 4: 5 7 26 28
        pet_5cdc_to_col_idx size: 4: 5 7 26 28
        pet_5cdc_to_col_idx size: 4: 5 7 26 28
        pet_5cdc_to_col_idx size: 4: 5 7 26 28
        pet_5cdc_to_col_idx size: 4: 6 7 17 18
        pet_5cdc_to_col_idx size: 4: 6 7 17 18
        pet_5cdc_to_col_idx size: 4: 6 7 17 18
        pet_5cdc_to_col_idx size: 4: 6 7 17 18
  22.05: g2, g5, g8, g12, g17, g20
    по-моему это подножество графов, где number_of_profiles < number_of_colourings
    надо это доказать! что это обязательное условие
      забавно, что это недостаточное условие
    (profile - это я так помню, мы забываем цвет рёбер
    и просто помним про рёбра, что они poor или rich
    и 2 разных petersen colouring могут привести к одному профилю)
  24.05: g3-g5, g9-g10, g14-g17, g20-g23, g25, g28, g30-g32, g34-g35, g38
